// Tracking
//  - https://paper.dropbox.com/doc/atom-vscode--B_1pTajtClXUnlRg8vKINs~QAg-h1pVZyCsdouFUaDxCTofw
//
// Docs
//  - https://code.visualstudio.com/docs/getstarted/settings
//    - Big reference of all available commands
//
{

  // Title bar
  "window.titleBarStyle": "native",
  "window.customTitleBarVisibility": "never",
  "window.commandCenter": false,
  "workbench.navigationControl.enabled": false,
  "chat.commandCenter.enabled": false,

  // Workspace
  "accessibility.verbosity.terminal": false,
  "task.quickOpen.history": 0,
  "testing.countBadge": "off",
  "security.workspace.trust.enabled": false, // https://code.visualstudio.com/docs/editor/workspace-trust
  "security.workspace.trust.untrustedFiles": "open",
  "update.mode": "manual",
  "update.showReleaseNotes": false,
  "window.density.editorTabHeight": "compact",
  "window.dialogStyle": "custom",
  "window.nativeFullScreen": false,
  "window.newWindowDimensions": "inherit",
  "window.openFoldersInNewWindow": "on", // Else opening/reopening a workspace will overwrite the current window's workspace :/
  "window.title": "${appName}${separator}${activeRepositoryName}",
  "workbench.activityBar.location": "bottom",
  "workbench.colorTheme": "Default High Contrast",
  "workbench.commandPalette.preserveInput": true,
  "workbench.editor.autoLockGroups": {
    "terminalEditor": false
  },
  "workbench.editor.customLabels.patterns": {
    // Custom tab labels
    //  - https://code.visualstudio.com/docs/getstarted/userinterface#_customize-tab-labels
  },
  "workbench.editor.decorations.badges": false,
  "workbench.editor.doubleClickTabToToggleEditorGroupSizes": "off",
  "workbench.editor.empty.hint": "hidden",
  "workbench.editor.enablePreview": false,
  "workbench.editor.highlightModifiedTabs": true,
  "workbench.editor.navigationScope": "editor",
  "workbench.editor.showIcons": false,
  "workbench.editor.tabActionCloseVisibility": false,
  "workbench.editor.untitled.labelFormat": "name",
  "workbench.editor.wrapTabs": true,
  "workbench.hover.delay": 300,
  "workbench.iconTheme": null,
  "workbench.layoutControl.enabled": false,
  "workbench.layoutControl.type": "menu",
  "workbench.quickOpen.preserveInput": true,
  // "workbench.quickOpen.closeOnFocusLost": false, // Uncomment to use element inspector on quick opens (for css stylesheet)
  "workbench.reduceMotion": "on", // On closing an editor/terminal, focus neighboring tab instead of last-selected tab
  "workbench.startupEditor": "none",
  "workbench.tips.enabled": false,
  "workbench.welcomePage.walkthroughs.openOnInstall": false,
  "workspace-path-status-bar.enable": false,
  "workbench.commandPalette.history": 0,
  "zenMode.hideLineNumbers": false,
  "zenMode.restore": true,

  // Fonts
  // "workbench.fontAliasing": "default", // Works well on my home displays (laptop retina + external 4k)
  "workbench.fontAliasing": "auto", // Works the same on my home displays and might work better on office displays with lower res (untested)
  "editor.fontFamily": "Consolas Nerd Font",
  // "editor.fontWeight": "normal", // Default: White text normal + colored text bold
  // "terminal.integrated.fontWeight": "normal", // Default: White text normal
  // "terminal.integrated.fontWeightBold": "bold", // Default: Colored text bold
  //
  // Classic 11px/13px sizing
  //  - I used this before apc-extension broke (which provided knobs you can't do in css: "apc.listRow", "apc.statusBar", "apc.header")
  //  - But to size everything across the workbench to 11px/13px, I had to do a _lot_ of gnarly css tweaking (fontSize, lineHeight, height, padding, etc.)
  // "editor.fontSize": 11,
  // "editor.lineHeight": 13,
  // "terminal.integrated.fontSize": 11,
  //
  // New approach: Zoom the entire workspace smaller, manually tune fontSize/lineHeight bigger to approximate 11px/13px -- and do less css tweaking! üéâ
  //  - Constraints:
  //    - editor fontSize can be fractional, but lineHeight can't
  //    - terminal fontSize and lineHeight behave in weird ways that I don't understand
  //  - To manually tune:
  //    - Set vscode to classic 11px/13px ("editor.fontSize": 11, "editor.lineHeight": 13, "terminal.integrated.fontSize": 11)
  //    - Hide tab bar and breadcrumbs ("workbench.editor.showTabs": "none", "breadcrumbs.enabled": false)
  //    - Screenshot the whole screen (Screenshot.app -> "Capture Entire Screen")
  //    - Open the screenshot in vscode (using jdanbrown.imageViewer, not the builtin media-preview)
  //    - Set vscode back to the target sizes (~13px/15px)
  //    - Switch tabs back and forth for visual overlay
  //
  // Set lineHeight:15, then tune zoomLevel + fontSize to match classic (11px/13px)
  //  - e.g. Explorer:
  //    - fontSize: 84.3% * 13px = 10.959px üü¢ vs. 11px
  //    - lineHeight: 84.3% * 20px = 16.86px üü° vs. 13px
  "window.zoomLevel": -0.785, // 84.3% = 1-(0.785*.20) (window size = zoomLevel * 20% larger/smaller)
  "editor.lineHeight": 15,
  "editor.fontSize": 12.7,
  "terminal.integrated.fontSize": 13, // üü¢ Weird, 13 is visually right and 12.7 is too small (test: llt ~/hack/birdgram/model/data/recordings/)
  "terminal.integrated.lineHeight": 1, // üü¢ Not sure why this works, but empirically it does (terminal lines visually match editor lines)
  //
  // Set lineHeight:16, then tune zoomLevel + fontSize to match classic (11px/13px)
  //  - e.g. Explorer:
  //    - fontSize: 77.2% * 13px = 10.036px ‚ùå vs. 11px
  //    - lineHeight: 77.2% * 20px = 15.44px üü° vs. 13px
  // "window.zoomLevel": -1.139, // 77.2% = 1-(1.139*.20) (window size = zoomLevel * 20% larger/smaller)
  // "editor.lineHeight": 16,
  // "editor.fontSize": 13.55,
  // "terminal.integrated.fontSize": 14, // ‚ùå Nope: 13 too small, 15 too big, and 15 leaves a big blank space at the top (tall monitor)
  // "terminal.integrated.lineHeight": 1, // üü¢ Not sure why this works, but empirically it does (terminal lines visually match editor lines)

  // Explorer
  "workbench.tree.indent": 12,
  "workbench.tree.renderIndentGuides": "always",
  "workbench.tree.enableStickyScroll": true,
  "workbench.tree.stickyScrollMaxItemCount": 50,
  "workbench.list.defaultFindMatchType": "contiguous",
  "explorer.openEditors.visible": 50,
  "explorer.compactFolders": false,
  "explorer.excludeGitIgnore": true,
  "explorer.decorations.badges": false,
  "explorer.confirmDragAndDrop": false,

  // Problems
  "problems.sortOrder": "position",
  "problems.defaultViewMode": "table",
  "problems.showCurrentInStatus": true,

  // Indent/tabs
  //  - https://code.visualstudio.com/docs/editor/codebasics#_indentation
  "editor.detectIndentation": false, // So we can override editor.tabSize in "[foo]" filetypes below
  "editor.tabSize": 2,
  "editor.insertSpaces": true,
  //  - TODO Find a good compromise with Move Line Up/Down
  //    - "full" messes up indentation when you Move Line Up/Down
  //    - "advanced" is _almost_ good, but still some cases that surprised me when I tried it out
  "editor.autoIndent": "full", // The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages.
  // "editor.autoIndent": "advanced", // The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.
  // "editor.autoIndent": "brackets", // The editor will keep the current line's indentation and honor language defined brackets.
  // "editor.autoIndent": "keep", // The editor will keep the current line's indentation.
  // "editor.autoIndent": "none", // The editor will not insert indentation automatically."

  // Editor
  //  - FIXME vim L/H keeps scrolling down/up if you repeat it: https://github.com/VSCodeVim/Vim/issues/1393
  //    - 0 fixes H, but L still scrolls down by 1
  "editor.renderWhitespace": "none",
  "editor.autoClosingBrackets": "never",
  "editor.autoClosingOvertype": "never",
  "editor.autoClosingQuotes": "never",
  "editor.copyWithSyntaxHighlighting": false,
  "editor.renderLineHighlight": "none",
  "editor.cursorBlinking": "solid",
  "editor.minimap.enabled": false,
  "editor.matchBrackets": "near",
  "editor.lightbulb.enabled": "off",
  "editor.dragAndDrop": false,
  "editor.multiCursorModifier": "alt",
  "editor.acceptSuggestionOnCommitCharacter": false,
  "editor.snippetSuggestions": "bottom",
  "editor.suggestOnTriggerCharacters": false,
  "editor.suggestSelection": "first",
  "editor.wordBasedSuggestionsMode": "allDocuments",
  "editor.acceptSuggestionOnEnter": "off",
  "editor.suggest.showSnippets": false,
  "editor.guides.indentation": false,
  "editor.bracketPairColorization.enabled": false,
  "editor.occurrencesHighlight": "off",
  "editor.comments.ignoreEmptyLines": false,
  "editor.linkedEditing": true,
  "editor.accessibilitySupport": "off",
  "editor.hideCursorInOverviewRuler": true,
  "files.hotExit": "off",
  "files.refactoring.autoSave": false,
  "files.simpleDialog.enable": true,
  "files.trimTrailingWhitespace": true,
  "files.trimFinalNewlines": true,
  "files.insertFinalNewline": true,

  // Editor: scrolloff
  //  - TODO Bug: cursorSurroundingLines is buggy in vim
  //    - https://github.com/VSCodeVim/Vim/issues/4912 H/L with cursorSurroundingLines causes editor to scroll
  //      - üéâ Fixed in 1.28.0: https://github.com/VSCodeVim/Vim/pull/9150 fix #4912 broken H and L motions
  //    - https://github.com/VSCodeVim/Vim/issues/1393 L selects the right line, but also scrolls down one
  //      - ‚ùì Test if this was also fixed by #9150 (issue is still open)
  //  - TODO Bug: cursorSurroundingLines broken by stickyScroll
  //    - https://github.com/microsoft/vscode/issues/204193 Editor.cursorSurroundingLines broken with update to 1.86
  //    - https://github.com/VSCodeVim/Vim/issues/9141 Sticky Scroll partially breaks zt
  "editor.cursorSurroundingLines": 0, // Default: 0
  "editor.stickyScroll.enabled": true, // Default: true
  "editor.stickyScroll.maxLineCount": 5, // Default: 5

  // Editor: Inlay hints
  //  - https://code.visualstudio.com/docs/editing/editingevolved#_inlay-hints
  //  - https://stackoverflow.com/a/68721151/397334
  "editor.inlayHints.enabled": "offUnlessPressed", // Hold ctrl+opt to show

  // Editor: CodeLens
  //  - https://code.visualstudio.com/api/language-extensions/programmatic-language-features
  //  - https://code.visualstudio.com/blogs/2017/02/12/code-lens-roundup
  "editor.codeLens": false, // I _think_ I don't want any of them
  "merge-conflict.codeLens.enabled": false, // I don't want this one
  "jupyter.interactiveWindow.codeLens.enable": false, // I don't want this one

  // Completions
  //  - https://github.com/microsoft/vscode/issues/76322
  "editor.wordBasedSuggestions": "matchingDocuments", // Complete on any word -- only if no other provider has a completion
  "editor.quickSuggestions": {
    "comments": true, // Complete in comments
    "strings": true, // Complete in strings
    "other": true, // ?
  },

  // Hide gutter (editor left margin)
  //  - https://github.com/microsoft/vscode/issues/30795
  //  - https://github.com/microsoft/vscode/issues/12543
  "editor.lineNumbers": "off",
  "editor.glyphMargin": false,
  "editor.folding": false,
  // "editor.showFoldingControls": "never", // XXX Makes notebook cells display weird (hides left margin), and doesn't affect normal editor display
  "editor.lineNumbersMinChars": 0,  // Undocumented
  "editor.lineDecorationsWidth": 3, // Undocumented

  // Hide scrollbars + some bits of overview ruler
  //  - https://github.com/microsoft/vscode/issues/35454 ‚Äî¬†Disable fading scrollbars
  //  - https://github.com/microsoft/vscode/issues/66000 ‚Äî¬†Scroll bar visibility should be configurable
  //  - https://github.com/microsoft/vscode/issues/98632 ‚Äî Add option `editor.scrollbar.vertical/horizontal` as official
  //  - https://github.com/microsoft/vscode/issues/28653 ‚Äî Feature: Setting to hide Vertical Scroll-Bar when the Minimap is Visible
  //  - https://github.com/microsoft/vscode/issues/85418 ‚Äî Disable overview ruler entirely
  // "editor.scrollbar.verticalScrollbarSize": 0, // Hides scrollbar, but also hides overview ruler
  // "editor.scrollbar.horizontalScrollbarSize": 0,
  "editor.scrollbar.vertical": "hidden", // Hides scrollbar and leaves overview ruler shown
  "editor.scrollbar.horizontal": "hidden",
  // "editor.overviewRulerBorder": false,
  // "terminal.integrated.scrollbar.vertical": "hidden", // NOTE No such setting, handled in css

  // Disable decorating colors values (#rgb) with color swatches
  //  - Because it's slow to open the editor, or even to add/remove text around them
  "editor.colorDecorators": false,

  // Terminal
  "terminal.integrated.defaultLocation": "editor", // Woo!
  // NOTE This all moved to init.ts
  // "terminal.integrated.defaultProfile.osx": "tmux-new-or-attach-vscode-term-uid",
  // "terminal.integrated.profiles.osx": {
  //   "tmux-new-or-attach-vscode-term-uid": {
  //     "path": "tmux-new-or-attach-vscode-term-uid", // NOTE Requires "terminal.integrated.inheritEnv":true (default)
  //     "args": [],
  //   },
  // },
  "terminal.integrated.allowChords": false,
  "terminal.integrated.cursorStyleInactive": "none",
  "terminal.integrated.macOptionIsMeta": true,
  "terminal.integrated.rightClickBehavior": "default",
  "terminal.external.osxExec": "iTerm.app",
  "terminal.integrated.showExitAlert": false,
  "terminal.integrated.tabs.title": "${cwdFolder}/",
  // "terminal.integrated.tabs.title": "${cwd}",
  // "terminal.integrated.tabs.title": "${process}",
  // "terminal.integrated.tabs.title": "term",
  // "terminal.integrated.tabs.title": "bash",
  // "terminal.integrated.tabs.title": "#",
  // "terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",
  "terminal.integrated.tabs.description": "",
  "terminal.integrated.confirmOnKill": "always",
  "terminal.integrated.confirmOnExit": "always",
  "terminal.integrated.scrollback": 10000,
  "terminal.integrated.persistentSessionScrollback": 10000,
  "terminal.integrated.minimumContrastRatio": 1, // https://code.visualstudio.com/docs/terminal/basics#_why-are-the-colors-in-the-terminal-not-correct
  // "terminal.integrated.gpuAcceleration": "off", // https://code.visualstudio.com/docs/terminal/basics#_im-having-problems-with-the-terminal-rendering-what-can-i-do
  "terminal.integrated.commandsToSkipShell": [
    "workbench.action.toggleKeybindingsLog",
  ],
  // "terminal.integrated.sendKeybindingsToShell": true, // Nope, breaks ctrl-h/ctrl-l for switching tabs
  "terminal.integrated.wordSeparators": " ',\"`‚îÄ‚Äò‚Äô|[]", // Default: " ()[]{}',\"`‚îÄ‚Äò‚Äô|"
  "terminal.integrated.enableMultiLinePasteWarning": "never",

  // Terminal shell integration
  //  - https://code.visualstudio.com/docs/terminal/shell-integration
  //  - HACK We enable:false in settings.json, and then init it manually in shell startup scripts, because vscode/fish/starship bugs
  //    - Part 1 in ~/.code/settings.json
  //    - Part 2 in ~/.config/fish/config.fish
  //    - https://github.com/microsoft/vscode/issues/208465 Prepending using shell integration does not work for fish when using starship prompt
  //    - https://github.com/microsoft/vscode/issues/220144 Starship status always shows command success with shell integration enabled
  //    - https://github.com/microsoft/vscode/issues/245607 In fish, can't make shell integration and starship both work at the same time
  "terminal.integrated.shellIntegration.enabled": false,
  "terminal.integrated.shellIntegration.decorationsEnabled": "never",
  "terminal.integrated.shellIntegration.showCommandGuide": false,
  "terminal.integrated.environmentChangesRelaunch": false,

  // Search Editor / Search
  "search.searchEditor.defaultNumberOfContextLines": 0,
  "search.searchEditor.doubleClickBehaviour": "selectWord",
  "search.searchEditor.reusePriorSearchConfiguration": true,
  "search.quickAccess.preserveInput": true,
  "search.quickOpen.includeHistory": false,
  "search.decorations.badges": false,
  "search.exclude": {
    "build/**": true,
    "**/*.gz": true,
  },
  "search.mode": "newEditor",
  "search.seedWithNearestWord": true,
  "search.showLineNumbers": true,
  "search.smartCase": true,
  "search.useParentIgnoreFiles": true,
  "search.useGlobalIgnoreFiles": true,
  "search.followSymlinks": false,

  // Notebook/jupyter
  "jupyter.collapseCellInputCodeByDefault": false,
  "jupyter.disableJupyterAutoStart": true,
  "jupyter.enableScrollingForCellOutputs": false,
  "jupyter.askForKernelRestart": false,
  "jupyter.showKernelSelectionOnInteractiveWindow": true,
  "jupyter.insidersChannel": "off",
  "jupyter.alwaysTrustNotebooks": true,
  "jupyter.interactiveWindow.creationMode": "perFile",
  "jupyter.interactiveWindow.textEditor.cellFolding": false,
  "interactiveWindow.collapseCellInputCode": "never",
  "notebook.insertToolbarLocation": "hidden",
  "notebook.output.textLineLimit": 1000,
  "notebook.globalToolbar": false,
  "notebook.showCellStatusBar": "hidden",
  "notebook.stickyScroll.enabled": true,
  "notebook.insertFinalNewline": false,

  // Git
  "scm.showActionButton": false, // Hide action button at top of sidebar ('Commit', 'Sync Changes', etc.)
  "scm.alwaysShowRepositories": true,
  "scm.countBadge": "off",
  "scm.defaultViewMode": "tree",
  "scm.inputFontSize": 11,
  "scm.inputFontFamily": "editor",
  "scm.diffDecorationsGutterPattern": {
    "modified": false
  },
  "git.openRepositoryInParentFolders": "never",
  "git.enableStatusBarSync": false,
  "git.showCommitInput": false,
  "git.verboseCommit": true,
  "git.blame.statusBarItem.enabled": false,
  "git.checkoutType": [
    "local",
    // "remote",
    // "tags"
  ],
  //  - Disable annoying flashing badge on sidebar icon
  //    - https://github.com/microsoft/vscode/issues/71297
  //    - https://github.com/microsoft/vscode/issues/179418
  "git.showProgress": false,
  //  - HACK Disable untracked changes for ~100x performance improvement
  //    - https://github.com/microsoft/vscode/issues/169253
  //    - [juliannadeau] You can get a 100x performance improvement by setting git.untrackedChanges
  //      to hidden in your settings. There is a tradeoff in that new files will not show up in this
  //      UI and you'll have to add them via CLI.
  // "git.untrackedChanges": "hidden",

  // Git: Diff editor
  "diffEditor.hideUnchangedRegions.enabled": true,
  "diffEditor.ignoreTrimWhitespace": false,
  "diffEditor.renderGutterMenu": false,
  "diffEditor.renderIndicators": false,
  "diffEditor.renderMarginRevertIcon": false,
  "diffEditor.renderSideBySideInlineBreakpoint": 950,

  // magit
  //  - https://github.com/kahole/edamagit
  //  - https://github.com/kahole/edamagit/blob/develop/TUTORIAL.md
  //  - https://github.com/kahole/edamagit/blob/develop/package.json#L392
  //  - https://magit.vc/manual/magit/
  "magit.forge-enabled": true,
  // "magit.display-buffer-function": "same-column", // Default: "other-column"
  // "magit.quick-switch-enabled": false, // Default
  "magit.hide-status-sections": [
    // Default: none
    "issues",
    "pull requests",
    "recent commits",
    // "staged",
    "stashes",
    "unmerged",
    "unpulled",
    "unpushed",
    // "unstaged",
    // "untracked"
  ],

  // // GitLens
  // //  - https://github.com/gitkraken/vscode-gitlens
  // //  - https://www.gitkraken.com/gitlens
  // "gitlens.showWelcomeOnInstall": false,
  // "gitlens.showWhatsNewAfterUpgrades": false,
  // "gitlens.currentLine.enabled": false,
  // "gitlens.codeLens.enabled": false,
  // "gitlens.views.commits.files.compact": false,
  // "gitlens.views.commitDetails.files.compact": false,
  // "gitlens.views.repositories.files.compact": false,
  // "gitlens.views.fileHistory.files.compact": false,
  // "gitlens.views.branches.files.compact": false,
  // "gitlens.views.remotes.files.compact": false,
  // "gitlens.views.stashes.files.compact": false,
  // "gitlens.views.tags.files.compact": false,
  // "gitlens.views.worktrees.files.compact": false,
  // "gitlens.views.contributors.files.compact": false,
  // "gitlens.views.searchAndCompare.files.compact": false,
  // "gitlens.views.formats.commits.label": "${(tips) ‚Ä¢ }${message}",
  // "gitlens.views.commits.showBranchComparison": false,
  // "gitlens.views.branches.showBranchComparison": false,
  // "gitlens.views.repositories.showBranchComparison": false,
  // "gitlens.views.repositories.branches.showBranchComparison": false,
  // "gitlens.views.worktrees.showBranchComparison": false,
  // "gitlens.graph.layout": "editor",
  // "gitlens.graph.dimMergeCommits": true,
  // "gitlens.graph.minimap.additionalTypes": ["localBranches", "stashes", "tags"],
  // "gitlens.graph.scrollMarkers.additionalTypes": ["localBranches", "stashes", "tags"],
  // "gitlens.graph.minimap.dataType": "lines",
  // "gitlens.graph.commitOrdering": "topo",
  // "gitlens.graph.highlightRowsOnRefHover": false,
  // "gitlens.ai.experimental.generateCommitMessage.enabled": false,

  // Github
  //  - https://github.com/Microsoft/vscode-pull-request-github
  "githubIssues.assignWhenWorking": false,
  "githubPullRequests.defaultMergeMethod": "squash",
  "githubPullRequests.focusedMode": "overview",
  "githubPullRequests.showPullRequestNumberInTree": true,

  // Copilot
  //  - https://code.visualstudio.com/docs/copilot/overview
  "github.copilot.chat.welcomeMessage": "never",
  "github.copilot.editor.enableAutoCompletions": true,
  // "github.copilot.nextEditSuggestions.enabled": true, // TODO Not yet, `escape` doesn't seem to work reliably for reject suggestion -- annoying :/
  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": false,
    "scminput": false,
  },
  "chat.editor.fontSize": 11,
  "notebook.experimental.cellChat": true,

  // Debug
  "debug.console.fontSize": 11,
  "debug.console.wordWrap": false,
  "debug.toolBarLocation": "docked",
  "debug.openDebug": "openOnDebugBreak", // From dart: https://dartcode.org/docs/recommended-settings/

  // NOTE Disabled because it adds spelling errors to the Problems list, which is too noisy
  //  - Instead, manually use alfred 'spell' -- which actually has a really great interactive mode!
  // // Spell Checker
  // //  - https://streetsidesoftware.com/vscode-spell-checker/
  // // "cSpell.enabled": false, // To disable without reload/restart
  // "cSpell.showStatus": false,
  // "cSpell.checkOnlyEnabledFileTypes": false,
  // "cSpell.showAutocompleteSuggestions": true,
  // "cSpell.hideAddToDictionaryCodeActions": true,

  // Vale
  //  - https://github.com/errata-ai/vale
  //  - https://vale.sh/
  "vale.doNotShowWarningForFileToBeSavedBeforeLinting": true,

  // Navigation
  "editor.gotoLocation.alternativeDeclarationCommand": "",
  "editor.gotoLocation.alternativeDefinitionCommand": "",
  "editor.gotoLocation.alternativeTypeDefinitionCommand": "",

  // Symbols
  "outline.showArrays": false,
  "outline.showBooleans": false,
  "outline.showConstants": false,
  "outline.showEnumMembers": false,
  "outline.showFields": false,
  "outline.showNull": false,
  "outline.showNumbers": false,
  "outline.showProperties": false,
  "outline.showStrings": false,
  "outline.showVariables": false,

  // advanced-open-file
  //  - https://github.com/ytakhs/vscode-advanced-open-file
  "vscode-advanced-open-file.groupDirectoriesFirst": true,
  "vscode-advanced-open-file.includeDotDotItemForParent": false,
  "vscode-advanced-open-file.matchType": "sparse",

  // commands
  //  - https://github.com/usernamehw/vscode-commands
  //  - https://github.com/usernamehw/vscode-commands/blob/master/docs/documentation.md
  //  - https://github.com/usernamehw/vscode-commands/blob/master/docs/examples.md
  "commands.populateCommandPalette": true,
  "commands.commands": {
    "commands.openNotesMd": {
      "command": "commands.openFolder",
      "args": "${userHome}/notes.md",
    },
  },

  // Emoji/unicode
  //  - https://github.com/brunnerh/insert-unicode -- shift+cmd+i
  //  - https://github.com/mattbierner/vscode-emojisense -- cmd+i
  //    - TODO Remove emojisense if insert-unicode adds a command to insert emoji only
  //      - https://github.com/brunnerh/insert-unicode/issues/43
  //      - insert-unicode has better usability (recents, favorites, etc.)
  "emojisense.languages": {"*": true},
  "emojisense.emojiDecoratorsEnabled": false,
  "emojisense.markupCompletionsEnabled": false,

  // Highlight
  //  - https://github.com/fabiospampinato/vscode-highlight
  "highlight.regexFlags": "g", // Default: "gi"
  "highlight.regexes": {
    "\\b(TODO|FIXME|XXX|HACK|NOTE|WARNING)\\b": {
      "decorations": [{"color": "#ff6e67", "fontWeight": "bold"}], // Same as "terminal.ansiBrightRed" (above)
    },
    "(\\t)": {
      "decorations": [{"backgroundColor": "#ff6e67"}], // Same as "terminal.ansiBrightRed" (above)
      "filterFileRegex": ".*(?<!.gitconfig|COMMIT_EDITMSG|Makefile|.go)$",
      // language:'log' is for the Output bottom panel (discovered via Inspect Editor Tokens and Scopes)
      "filterLanguageRegex": "(?<!log)$",
    },
  },

  // highlight-words
  //  - https://github.com/rsbondi/highlight-words
  "highlightwords.colors": [
    {"dark": "#ffd966", "light": "#ffd966"}, // Yellow
    {"dark": "#ff6666", "light": "#ff6666"}, // Red
    {"dark": "#66ff8c", "light": "#66ff8c"}, // Green
    {"dark": "#ff66d9", "light": "#ff66d9"}, // Magenta
    {"dark": "#b266ff", "light": "#b266ff"}, // Purple
    {"dark": "#668cff", "light": "#668cff"}, // Blue
    {"dark": "#66ffff", "light": "#66ffff"}, // Cyan
  ],

  // Colorize
  //  - https://github.com/kamikillerto/vscode-colorize
  //  - Enable selectively, else editors with color highlights will become veeery slow at basic scrolling/typing
  //  - No, definitely don't crawl all files: https://github.com/KamiKillertO/vscode-colorize/issues/174
  "colorize.enable_search_variables": false,
  //  - Don't hide colors on active line (doesn't make typing any faster, unfortunately)
  "colorize.hide_current_line_decorations": false,
  //  - Don't enable for any language by default (use selective file includes instead)
  "colorize.languages": [],
  //  - Only enable very selectively for these files
  "colorize.include": [
    // The Color Theme guide says that *-color-theme.json files get colors by default, but I don't see any
    //  - https://code.visualstudio.com/api/extension-guides/color-theme
    // "**/*-color-theme.json",
    // Enable my old atom syntax style files until I'm done migrating from them
    // "**/atom-jdanbrown-syntax/styles/*.less",
    // Toggle this when editing colors in this file (don't leave on all the time else it's insanely slow)
    // "**/settings.json",
  ],

  // Bookmarks
  //  - https://github.com/alefragnani/vscode-bookmarks
  "bookmarks.label.suggestion": "suggestWhenSelectedOrLineWhenNoSelected",
  "bookmarks.navigateThroughAllFiles": true,
  "bookmarks.sideBar.expanded": true,
  "bookmarks.sideBar.countBadge": "off",

  // Project Manager
  //  - https://github.com/alefragnani/vscode-project-manager
  "projectManager.openInNewWindowWhenClickingInStatusBar": true,
  "projectManager.supportSymlinksOnBaseFolders": true,
  "projectManager.git.baseFolders": [
    "~/hack"
  ],

  // Active File in Status Bar
  //  - https://github.com/RoscoP/ActiveFileInStatusBar
  "ActiveFileInStatusBar.revealFile": true,

  // Prettier
  //  - https://github.com/prettier/prettier-vscode
  "prettier.printWidth": 120,

  // ShellCheck
  //  - https://github.com/vscode-shellcheck/vscode-shellcheck
  "shellcheck.enable": false,

  // Markdown
  "markdown.preview.lineHeight": 1.5,
  "markdown.extension.list.indentationSize": "inherit",
  "markdown.extension.theming.decoration.renderCodeSpan": false,
  "markdown-checkbox.checkmark": "x",
  "markdown-checkbox.dateWhenChecked": false,
  "markdown-checkbox.italicWhenChecked": false,
  "markdown-checkbox.showStatusBarItem": false,
  "markdown-checkbox.strikeThroughWhenChecked": false,
  "markdown-checkbox.typeOfBulletPoint": "-",

  // Swift
  "swiftformat.path": "/opt/homebrew/bin/swiftformat",

  // yaml
  //  - HACK Force a dummy yaml schema on all *.yaml files to avoid incorrect autodetection
  //    - https://github.com/redhat-developer/vscode-yaml/issues/245
  //    - https://github.com/redhat-developer/vscode-yaml/issues/491
  "yaml.schemas": {
    "https://json.schemastore.org/yamllint.json": "*.yaml",
  },

  // Filetypes
  //  - https://code.visualstudio.com/docs/languages/identifiers
  "workbench.editorAssociations": {
    "git-rebase-todo": "default",
    // For images, use jdanbrown.imageViewer instead of the builtin media-preview
    //  - https://github.com/microsoft/vscode/tree/main/extensions/media-preview
    "*.png": "jdanbrown.imageViewer",
    "*.jpg": "jdanbrown.imageViewer",
    "*.jpeg": "jdanbrown.imageViewer",
    "*.gif": "jdanbrown.imageViewer",
    "*.webp": "jdanbrown.imageViewer",
    "*.bmp": "jdanbrown.imageViewer",
    "*.ico": "jdanbrown.imageViewer",
    "*.tiff": "jdanbrown.imageViewer",
    "*.tif": "jdanbrown.imageViewer",
    "*.svg": "jdanbrown.imageViewer",
    "*.avif": "jdanbrown.imageViewer",
  },
  "[magit]": {
    // "editor.showFoldingControls": "never",
  },
  "[jsonc]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[markdown]": {
    "editor.quickSuggestions": {
      "comments": "off",
      "strings": "off",
      "other": "off"
    },
    "editor.wordWrap": "on",
    "editor.wrappingIndent": "indent"
  },
  "[fish]": {
    "editor.tabSize": 4,
  },
  "[python]": {
    "editor.tabSize": 4,
    // "editor.defaultFormatter": "ms-python.black-formatter",
    "editor.defaultFormatter": "charliermarsh.ruff",
    "editor.formatOnSave": false,
    "editor.rulers": [99],
  },
  "[starlark]": {
    "editor.tabSize": 4,
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
  },
  "[dart]": {
    //
    // From [where? -- did I add these?]
    //
    "editor.insertSpaces": true,
    "editor.detectIndentation": false,
    "editor.suggest.insertMode": "replace",
    //
    // From dart: https://dartcode.org/docs/recommended-settings/
    //
    // Automatically format code on save and during typing of certain characters
    // (like `;` and `}`).
    // "editor.formatOnSave": true,
    // "editor.formatOnType": true,
    // Draw a guide line at 80 characters, where Dart's formatting will wrap code.
    // "editor.rulers": [80],
    // XXX Nope, I want "editor.selectionHighlight"!
    // // Disables built-in highlighting of words that match your selection. Without
    // // this, all instances of the selected text will be highlighted, interfering
    // // with Dart's ability to highlight only exact references to the selected variable.
    // "editor.selectionHighlight": false,
    // By default, VS Code prevents code completion from popping open when in
    // "snippet mode" (editing placeholders in inserted code). Setting this option
    // to `false` stops that and allows completion to open as normal, as if you
    // weren't in a snippet placeholder.
    "editor.suggest.snippetsPreventQuickSuggestions": false,
    // By default, VS Code will pre-select the most recently used item from code
    // completion. This is usually not the most relevant item.
    //
    // "first" will always select top item
    // "recentlyUsedByPrefix" will filter the recently used items based on the
    //     text immediately preceding where completion was invoked.
    "editor.suggestSelection": "first",
    // Allows pressing <TAB> to complete snippets such as `for` even when the
    // completion list is not visible.
    "editor.tabCompletion": "onlySnippets",
  },

  // Python
  //  - https://code.visualstudio.com/docs/languages/python
  //  - https://github.com/microsoft/vscode-python
  //  - https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance
  //  - https://github.com/microsoft/pylance-release/wiki/Pylance-Configuration-Tips
  "python.terminal.activateEnvironment": false,
  "python.interpreter.infoVisibility": "always",

  // Python: Pylance/Pyright
  "python.languageServer": "Pylance",
  "python.analysis.autoImportCompletions": false, // Lots of FPs that I have to discover and delete later
  "python.analysis.autoIndent": false, // Disable to stop double-indenting on `def foo(<enter>`
  "python.analysis.diagnosticMode": "openFilesOnly",
  // "python.analysis.diagnosticMode": "workspace",
  //  - Breakdown of which checks are enforced by each typeCheckingMode
  //    - https://microsoft.github.io/pyright/#/configuration?id=diagnostic-settings-defaults
  "python.analysis.typeCheckingMode": "strict",
  // "python.analysis.typeCheckingMode": "standard",
  // "python.analysis.typeCheckingMode": "basic",
  // "python.analysis.typeCheckingMode": "off",
  "python.analysis.extraPaths": [],
  "python.analysis.ignore": [
    // Disable checking in notebooks
    //  - Because e.g. a single `from x import *` renders it completely useless
    "**/*.ipynb",
  ],

  // Python: Notebooks
  "jupyter.interactiveWindow.cellMarker.decorateCells": "allCells",
  "jupyter.interactiveWindow.viewColumn": "beside",
  "notebook.cellToolbarLocation": {
    "default": "hidden"
  },
  "notebook.showFoldingControls": "never",
  "notebook.markup.fontSize": 12,

  // Python: Ruff
  //  - https://github.com/astral-sh/ruff
  //  - https://github.com/astral-sh/ruff-vscode
  "ruff.organizeImports": false,

  // Dart
  //  - https://dartcode.org/docs/recommended-settings/
  "dart.closingLabels": false,
  "dart.lineLength": 120,
  "dart.showTodos": false,
  "dart.previewLsp": true,
  "dart.debugExternalLibraries": false,
  "dart.debugSdkLibraries": false,
  "dart.enableSnippets": false,
  "dart.hotReloadProgress": "statusBar",
  "dart.flutterGutterIcons": false,

  // Allow trailing commas in ~/.code/*.json
  //  - https://github.com/microsoft/vscode/issues/102061
  "json.schemas": [
    {
      "fileMatch": [
        ".code/keybindings.json",
        ".code/settings.json",
      ],
      "schema": {
        "allowTrailingCommas": true
      }
    },
  ],

  // Extensions
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1
  },

  // neovim
  //  - https://github.com/vscode-neovim/vscode-neovim
  "vscode-neovim.neovimExecutablePaths.darwin": "/opt/homebrew/bin/nvim",

  // vim
  //  - https://github.com/VSCodeVim/Vim
  //  - https://galenwong.github.io/blog/2021-03-22-vscode-neovim-vs-vscodevim/
  //
  //  - Basics
  "vim.disableAnnoyingNeovimMessage": true,
  "vim.hlsearch": true,
  "vim.leader": ",",
  "vim.showmodename": false,
  "vim.textwidth": 120,
  "vim.visualstar": true,
  "vim.joinspaces": false,
  "vim.matchpairs": "(:),{:},[:],<:>",
  // "vim.mouseSelectionGoesIntoVisualMode": false, // Hmm, why did I set this to false? I think I like visual mode better
  //  - ReplaceWithRegister
  //    - https://github.com/VSCodeVim/Vim#replacewithregister
  //    - yank -> gr<motion> to paste
  //    - TODO(practice)
  "vim.replaceWithRegister": true,
  //  - Cursor style
  "vim.cursorStylePerMode.visual": "underline-thin",
  "vim.cursorStylePerMode.visualblock": "underline-thin",
  "vim.cursorStylePerMode.visualline": "underline-thin",
  //  - Find/search highlight
  "vim.searchHighlightColor": "#ff0d", // Need a little transparency else I can't see the cursor as I next/prev
  "vim.searchHighlightTextColor": "#000",
  "vim.searchMatchColor": "#fff", // Color for the first match while typing before hitting enter (short lived)
  "vim.searchMatchTextColor": "#000",
  //  - textobj-arguments
  //    - https://github.com/VSCodeVim/Vim#vim-textobj-arguments
  "vim.argumentObjectOpeningDelimiters": ["(", "[", "{"],
  "vim.argumentObjectClosingDelimiters": [")", "]", "}"],
  //  - Keybindings
  "vim.normalModeKeyBindingsNonRecursive": [

    // NOTE [2023-09-22] Hmm no wait, maybe this is actually better than vim's undo stack, which has its own issues:
    //  - Undo groups aren't always what I expect, so it often undoes too many edits
    //  - Redo often shits itself by creating something I didn't do (races?), which means I can't redo back to where I started üëé
    // XXX [2023-09-14] No actually, this makes vim undo/redo behave really weird, with the wrong granularity of edits
    //  - iiuc these issues are about weirdness when you _mix_ vim u/^R with vscode cmd+z/shift+cmd+z, so let's just not do that
    // Avoid vscode-vim's separate undo/redo stack, use vscode's instead
    //  - https://github.com/VSCodeVim/Vim/issues/1490#issuecomment-352167221
    //  - https://github.com/VSCodeVim/Vim/issues/2007
    {"before": ["u"], "commands": ["undo"]},
    {"before": ["<c-r>"], "commands": ["redo"]},

    // Unbind confusing commands
    {"before": ["<c-i>"], "after": []}, // Used in keybindings.json (Navigation)
    {"before": ["<c-o>"], "after": []}, // Used in keybindings.json (Navigation)

    // Clear search on esc
    {"before": ["<esc>"], "after": ["<esc>"], "commands": [":nohl", "highlightwords.removeAllHighlights", ":"]},
    //  - Also on \\ (old habits die hard)
    {"before": ["\\", "\\"], "commands": [":nohl", "highlightwords.removeAllHighlights", ":"]},

    // Save
    {"before": [",", ","], "commands": ["workbench.action.files.save"]},

    // Indent/unindent
    //  - NOTE <s-tab> broken until https://github.com/VSCodeVim/Vim/issues/4719
    {"before": ["<tab>"], "commands": ["editor.action.indentLines"]},
    {"before": ["<shift+tab>"], "commands": ["editor.action.outdentLines"]},

    // Comment
    {"before": ["\\", "c"], "after": ["g", "c"]},

    // Search Editor
    //  - Relies on "search.seedWithNearestWord":true to search for the current word without selecting anything
    {"before": ["<c-f>"], "commands": ["search.action.openNewEditorToSide"]},
    {"before": [",", "a"], "commands": ["search.action.openNewEditorToSide"]},

    // Peek
    //  - TODO(practice)
    {"before": [",", "p", "r"], "commands": ["editor.action.referenceSearch.trigger"]},
    {"before": [",", "p", "d"], "commands": ["editor.action.peekDefinition"]},
    {"before": [",", "p", "i"], "commands": ["editor.action.peekImplementation"]},
    {"before": [",", "p", "c"], "commands": ["editor.showCallHierarchy"]},
    {"before": [",", "p", "l"], "commands": ["editor.action.peekDeclaration"]},
    {"before": [",", "p", "t"], "commands": ["editor.action.peekTypeDefinition"]},
    {"before": [",", "p", "h"], "commands": ["editor.showTypeHierarchy"]},

    // Edge motion
    {"before": ["["], "after": ["<leader>", "["]},
    {"before": ["]"], "after": ["<leader>", "]"]},

    // Notebooks
    //  - HACK Can't do this zz in keybindings.json because there's no when clause to exclude single-char replace mode (`r`)
    //    - It will _almost_ work, except the `z` in `rz` will get shadowed
    //    - `vim.mode == 'Replace'` only works in `R`, not `r`
    //    - https://github.com/VSCodeVim/Vim/issues/7256 vim.mode == 'Normal' in key binding is triggering in replace mode
    {"before": ["z", "z"], "after": ["z", "z"], "commands": ["notebook.centerActiveCell"]},

    // Bookmarks
    //  - TODO(practice)
    {"before": ["<leader>", "b"], "commands": ["bookmarks.toggle"]},
    {"before": ["<leader>", "B"], "commands": ["bookmarksExplorer.focus"]},
    {"before": ["<leader>", "l"], "commands": ["bookmarks.list"]},
    {"before": ["<leader>", "L"], "commands": ["bookmarks.listFromAllFiles"]},

    // Git
    //  - (See keybindings.json for centralized comments)
    //  - Repo
    {"before": ["g", "c", "o"], "commands": ["git.checkout"]},
    //  - Views
    // {"before": ["g", "s"], "commands": ["workbench.view.scm"]}, // Use shift+cmd+3
    //  - Commands
    // {"before": ["g", "c"], "commands": ["git.commitStaged"]}, // No, conflicts with gco
    // {"before": ["g", "C"], "commands": ["git.commitStagedAmend"]}, // Want?

    // // Git: Diff editor
    // {"before": ["g", "s"], "commands": ["git.viewChanges"]}, // Diff all files (one pane)
    // {"before": ["g", "S"], "commands": ["git.viewStagedChanges"]}, // Diff staged all files (one pane)
    // {"before": ["g", "d"], "commands": ["git.openChange"]}, // Diff current file
    // {"before": ["g", "a"], "commands": ["git.stageSelectedRanges"]},
    // {"before": ["g", "u"], "commands": ["git.unstageSelectedRanges"]},
    // {"before": ["g", "r"], "commands": ["git.revertSelectedRanges"]},
    // {"before": ["g", "A"], "commands": ["git.stage"]}, // Entire file
    // {"before": ["g", "U"], "commands": ["git.unstage"]}, // Entire file

    // // GitLens
    // // {"before": ["g", "l"], "commands": ["gitlens.showCommitsView"]},
    // {"before": ["g", "l"], "commands": ["gitlens.showGraph"]},
    // {"before": ["g", "b"], "commands": ["gitlens.showBranchesView"]},
    // {"before": ["g", "t"], "commands": ["gitlens.showTagsView"]},
    // // {"before": ["g", "r"], "commands": ["gitlens.showRemotesView"]}, // Nope, conflicts with revert in diff editor

    // magit
    //  - Views
    {"before": ["g", "m"], "commands": ["jdanbrown.workbench.action.quickOpen.magit"]},
    {"before": ["g", "M"], "commands": ["magit.file-popup"]},
    {"before": ["g", "d"], "commands": ["magit.diff-file"]},
    {"before": ["g", "s"], "commands": ["magit.status"]},
    {"before": ["g", "c"], "commands": ["magit.commit"]},
    {"before": ["g", "P"], "commands": ["magit.pushing"]},
    {"before": ["g", "p"], "commands": ["magit.pulling"]},
    {"before": ["g", "f"], "commands": ["magit.fetching"]},
    {"before": ["g", "b"], "commands": ["magit.branching"]},
    //  - Expose vscode commands to vim.remap via gZ (see keybindings.json)
    //    - NOTE Use Q/W to avoid magit keybindings s/u, which I don't know how to make not steal from the middle of gZ*
    {"before": ["g", "Z", "Q"], "commands": ["magit.move-to-unstaged-changes"]},
    {"before": ["g", "Z", "W"], "commands": ["magit.move-to-staged-changes"]},

  ],
  "vim.visualModeKeyBindingsNonRecursive": [

    // Clipboard
    {"before": ["Y"], "after": ["\"", "+", "y"]},

    // Indent/unindent
    {"before": ["<tab>"], "commands": ["editor.action.indentLines"]},
    {"before": ["<shift+tab>"], "commands": ["editor.action.outdentLines"]},

    // Shrink/expand selection
    //  - https://code.visualstudio.com/docs/editor/codebasics#_shrinkexpand-selection
    {"before": ["o"], "commands": ["editor.action.smartSelect.expand"]},
    {"before": ["O"], "commands": ["editor.action.smartSelect.shrink"]},

    // Search
    //  - Relies on "search.seedWithNearestWord":true to search for the current word without selecting anything
    {"before": [",", "a"], "commands": ["search.action.openNewEditorToSide"]},

    // textobj-arguments
    //  - https://github.com/VSCodeVim/Vim#vim-textobj-arguments
    {"before": ["i", ","], "after": ["i", "a"]},
    {"before": ["a", ","], "after": ["a", "a"]},

    // Edge motion
    {"before": ["["], "after": ["<leader>", "["]},
    {"before": ["]"], "after": ["<leader>", "]"]},

    // Git
    //  - (See keybindings.json for comments)
    //  - Views
    // {"before": ["g", "s"], "commands": ["workbench.view.scm"]}, // Use shift+cmd+3
    // // {"before": ["g", "l"], "commands": ["gitlens.showCommitsView"]},
    // {"before": ["g", "l"], "commands": ["gitlens.showGraph"]},
    // {"before": ["g", "b"], "commands": ["gitlens.showBranchesView"]},
    // {"before": ["g", "t"], "commands": ["gitlens.showTagsView"]},
    // // {"before": ["g", "r"], "commands": ["gitlens.showRemotesView"]}, // Nope, conflicts with revert in diff editor
    //  - Commands
    // {"before": ["g", "a"], "commands": ["git.stageSelectedRanges", "extension.vim_escape"]},
    // {"before": ["g", "u"], "commands": ["git.unstageSelectedRanges", "extension.vim_escape"]},
    // {"before": ["g", "r"], "commands": ["git.revertSelectedRanges", "extension.vim_escape"]},
    // {"before": ["g", "A"], "commands": ["git.stage"]},
    // {"before": ["g", "U"], "commands": ["git.unstage"]},
    // // {"before": ["g", "c"], "commands": ["git.commitStaged"]}, // No, conflicts with gco
    // // {"before": ["g", "C"], "commands": ["git.commitStagedAmend"]}, // Want?
    {"before": ["g", "c", "o"], "commands": ["git.checkout"]},

    // magit
    {"before": ["g", "m"], "commands": ["jdanbrown.workbench.action.quickOpen.magit"]},
    {"before": ["g", "M"], "commands": ["magit.file-popup"]},
    {"before": ["g", "d"], "commands": ["magit.diff-file"]},
    {"before": ["g", "s"], "commands": ["magit.status"]},
    {"before": ["g", "c"], "commands": ["magit.commit"]},
    {"before": ["g", "P"], "commands": ["magit.pushing"]},
    {"before": ["g", "p"], "commands": ["magit.pulling"]},
    {"before": ["g", "f"], "commands": ["magit.fetching"]},
    {"before": ["g", "b"], "commands": ["magit.branching"]},

  ],
  "vim.operatorPendingModeKeyBindings": [

    // textobj-arguments
    //  - https://github.com/VSCodeVim/Vim#vim-textobj-arguments
    {"before": ["i", ","], "after": ["i", "a"]},
    {"before": ["a", ","], "after": ["a", "a"]},

    // Edge motion
    {"before": ["["], "after": ["<leader>", "["]},
    {"before": ["]"], "after": ["<leader>", "]"]},

  ],

  // multi-commands
  "multiCommand.commands": [

    // Custom css/styling
    {
      "command": "multiCommand:custom-ui-style.reload+fixChecksums.apply+jdanbrown.quitAndRestart",
      "sequence": ["custom-ui-style.reload", "fixChecksums.apply", "jdanbrown.quitAndRestart"],
    },

    // Workspace
    {
      "command": "multiCommand.workbench.action.toggleKeybindingsLog.focusBackOnEditor",
      "sequence": ["workbench.action.toggleKeybindingsLog", "workbench.action.focusActiveEditorGroup",],
    },

    // HACK Workaround: Simplify to workbench.action.focus*GroupWithoutWrap after this bug is fixed
    //  - https://github.com/microsoft/vscode/issues/236648 workbench.action.focus*GroupWithoutWrap commands fail to focus *-most group when sibebar/panel is focused
    {
      "command": "multiCommand:workbench.action.focusActiveEditorGroup+workbench.action.focusLeftGroupWithoutWrap",
      "sequence": ["workbench.action.focusActiveEditorGroup", "workbench.action.focusLeftGroupWithoutWrap",],
    },
    {
      "command": "multiCommand:workbench.action.focusActiveEditorGroup+workbench.action.focusRightGroupWithoutWrap",
      "sequence": ["workbench.action.focusActiveEditorGroup", "workbench.action.focusRightGroupWithoutWrap",],
    },
    {
      "command": "multiCommand:workbench.action.focusActiveEditorGroup+workbench.action.focusBelowGroupWithoutWrap",
      "sequence": ["workbench.action.focusActiveEditorGroup", "workbench.action.focusBelowGroupWithoutWrap",],
    },
    {
      "command": "multiCommand:workbench.action.focusActiveEditorGroup+workbench.action.focusAboveGroupWithoutWrap",
      "sequence": ["workbench.action.focusActiveEditorGroup", "workbench.action.focusAboveGroupWithoutWrap",],
    },

    // Bottom panel
    //  - Workaround for focus jumping to weird places on workbench.action.togglePanel
    {
      "command": "multiCommand.workbench.action.togglePanel.focusBackOnEditor",
      "sequence": ["workbench.action.togglePanel", "workbench.action.focusActiveEditorGroup",],
    },
    {
      "command": "multiCommand.workbench.action.togglePanel.focusBackOnSidebar",
      "sequence": ["workbench.action.togglePanel", "workbench.action.focusSideBar",],
    },

    // Search Editor
    {
      "command": "multiCommand:search.action.focusQueryEditorWidget+workbench.action.search.toggleQueryDetails",
      "sequence": ["search.action.focusQueryEditorWidget", "workbench.action.search.toggleQueryDetails"],
    },
    {
      "command": "multiCommand:search.action.unfocusQueryEditorWidget",
      // Don't also do "search.action.focusPreviousSearchResult" because next->previous gives wrong outcome on first use in new search
      "sequence": ["search.action.focusNextSearchResult", "extension.vim_escape"],
    },
    {
      "command": "multiCommand:search.action.focusNextSearchResult+editor.action.peekDefinition",
      "sequence": ["search.action.focusNextSearchResult", "editor.action.peekDefinition"],
    },
    {
      "command": "multiCommand:search.action.focusPreviousSearchResult+editor.action.peekDefinition",
      "sequence": ["search.action.focusPreviousSearchResult", "editor.action.peekDefinition"],
    },
    // {
    //   "command": "multiCommand:search.action.focusNextSearchResult+extension.vim_escape",
    //   "sequence": ["search.action.focusNextSearchResult", "extension.vim_escape"],
    // },
    // {
    //   // Nope, repeating this one gets you stuck because of how escape leaves the cursor
    //   "command": "multiCommand:search.action.focusPreviousSearchResult+extension.vim_escape",
    //   "sequence": ["search.action.focusPreviousSearchResult", "extension.vim_escape"],
    // },
    {
      "command": "multiCommand:editor.action.peekDefinition+extension.vim_home+search.action.focusNextSearchResult",
      "sequence": ["editor.action.peekDefinition", "extension.vim_home", "search.action.focusNextSearchResult"],
    },

    // Editor
    //  - HACK A command that approximately does "Next problem || Next merge conflict"
    //    - XXX Nope, not great (noisy and janky)
    // {
    //   "command": "multiCommand:editor.action.marker.next+merge-conflict.next",
    //   "sequence": ["editor.action.marker.next", "merge-conflict.next"],
    // },
    // {
    //   "command": "multiCommand:editor.action.marker.prev+merge-conflict.previous",
    //   "sequence": ["editor.action.marker.prev", "merge-conflict.previous"],
    // },

    // Navigation
    //  - Add color highlight on goto references + peek references
    //    - Requires an extra manual esc when done, which I think is fine
    {
      "command": "multiCommand.addHighlightAnd.editor.action.goToReferences",
      "sequence": ["highlightwords.addHighlight", "editor.action.goToReferences"],
    },
    {
      "command": "multiCommand.addHighlightAnd.editor.action.referenceSearch.trigger",
      "sequence": ["highlightwords.addHighlight", "editor.action.referenceSearch.trigger"],
    },

    // Terminal
    {
      "command": "multiCommand:workbench.action.files.save+jdanbrown.terminal.rerunCommandInRecentTerminal",
      "sequence": ["workbench.action.files.save", "jdanbrown.terminal.rerunCommandInRecentTerminal"],
    },

    // Notebook
    {
      "command": "multiCommand.notebook.cell.edit.NormalMode",
      "sequence": ["notebook.cell.edit", "extension.vim_escape"],
    },
    {
      "command": "multiCommand.notebook.cell.edit.InsertMode",
      // HACK Do vim_escape first, else vim_insert when you're already in insert will put you in replace mode (weird)
      "sequence": ["notebook.cell.edit", "extension.vim_escape", "extension.vim_insert"],
    },
    {
      "command": "multiCommand:jdanbrown.fix.cellMarker+jupyter.insertCellAbove",
      "sequence": ["jdanbrown.fixWorkspaceSetting.jupyter.cellMarker", "jupyter.insertCellAbove"],
    },
    {
      "command": "multiCommand:jdanbrown.fix.cellMarker+jupyter.insertCellBelow",
      "sequence": ["jdanbrown.fixWorkspaceSetting.jupyter.cellMarker", "jupyter.insertCellBelow"],
    },
    {
      "command": "multiCommand:jdanbrown.fix.cellMarker+jupyter.insertCellBelowPosition",
      "sequence": ["jdanbrown.fixWorkspaceSetting.jupyter.cellMarker", "jupyter.insertCellBelowPosition"],
    },
    {
      "command": "multiCommand:list.focusDown+list.selectAndPreserveFocus",
      "sequence": ["list.focusDown", "list.selectAndPreserveFocus"],
    },
    {
      "command": "multiCommand:list.focusUp+list.selectAndPreserveFocus",
      "sequence": ["list.focusUp", "list.selectAndPreserveFocus"],
    },
    {
      "command": "multiCommand:notebook.fold+list.selectAndPreserveFocus",
      "sequence": ["notebook.fold", "list.selectAndPreserveFocus"],
    },
    {
      "command": "multiCommand:notebook.unfold+list.selectAndPreserveFocus",
      "sequence": ["notebook.unfold", "list.selectAndPreserveFocus"],
    },

    // Scrolling
    //  - HACK Works! (a little janky)
    {"command": "multiCommand:notebook.cell.quitEdit_scrollDown", "sequence": ["notebook.cell.quitEdit", "list.scrollDown"]},
    {"command": "multiCommand:notebook.cell.quitEdit_scrollUp", "sequence": ["notebook.cell.quitEdit", "list.scrollUp"]},
    {"command": "multiCommand:notebook.cell.quitEdit_scrollPageDown", "sequence": ["notebook.cell.quitEdit", "multiCommand.list.scrollPageDown"]},
    {"command": "multiCommand:notebook.cell.quitEdit_scrollPageUp", "sequence": ["notebook.cell.quitEdit", "multiCommand.list.scrollPageUp"]},
    {
      "command": "multiCommand.list.scrollPageDown",
      "sequence": [
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
      ],
    },
    {
      "command": "multiCommand.list.scrollPageUp",
      "sequence": [
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
      ],
    },

    // magit
    {"command": "multiCommand.magit.stage", "sequence": ["magit.stage", "extension.vim_escape"]},
    {"command": "multiCommand.magit.stage-all", "sequence": ["magit.stage-all", "extension.vim_escape"]},
    {"command": "multiCommand.magit.unstage", "sequence": ["magit.unstage", "extension.vim_escape"]},
    {"command": "multiCommand.magit.unstage-all", "sequence": ["magit.unstage-all", "extension.vim_escape"]},
    {"command": "multiCommand.magit.discard-at-point", "sequence": ["magit.discard-at-point", "extension.vim_escape"]},

  ],

  // Colors
  //  - See all keys w/ default values: "Developer: Generate Color Theme From Current Settings"
  //  - https://code.visualstudio.com/api/references/theme-color
  //  - Inspiration for colors (high-contrast dark)
  //    - https://glitchbone.github.io/vscode-base16-term/#/3024
  //    - https://glitchbone.github.io/vscode-base16-term/#/isotope
  //    - https://glitchbone.github.io/vscode-base16-term/#/summerfruit-dark
  //    - https://glitchbone.github.io/vscode-base16-term/#/google-dark
  //    - https://glitchbone.github.io/vscode-base16-term/#/spacemacs
  //  - Tools for converting rgba->rgb<->hsl
  //    - https://rgbacolorpicker.com/rgba-to-hex
  //      - e.g. rgba(255,106,105,0.3) -> #ff6a694d
  //    - https://colordesigner.io/convert/hsltohex
  //      - e.g. show rgba -> truncate to rbg -> convert to hsl -> tune lightness -> diff tuned tab color with original rgba color
  //  - My classic colors
  //    - #777777 -- black
  //    - #ff6e67 -- red
  //    - #5ffa68 -- green
  //    - #fffc67 -- yellow
  //    - #6871ff -- blue
  //    - #ff77ff -- magenta
  //    - #60fdff -- cyan
  //    - #ffffff -- white
  //  - git colors (from git builtins, I think)
  //    - #5ffa69 -- green (git status staged)
  //    - #f96e67 -- red (git status unstaged)
  //    - #8cf77b -- green (git diff inserted)
  //    - #ed776d -- red (git diff deleted)
  "workbench.colorCustomizations": {

    // "activityBar.activeBackground": null,
    // "activityBar.activeBorder": "#404040",
    // "activityBar.activeFocusBorder": null,
    // "activityBar.background": "#000000",
    // "activityBar.border": "#404040",
    // "activityBar.dropBorder": null,
    // "activityBar.foreground": "#ffffff",
    // "activityBar.inactiveForeground": "#ffffff",
    // "activityBarBadge.background": "#000000",
    // "activityBarBadge.foreground": "#ffffff",
    // "activityBarTop.activeBackground": null,
    "activityBarTop.activeBackground": "#666",
    "activityBarTop.activeBorder": "#0000", // Default: #404040
    // "activityBarTop.background": null,
    // "activityBarTop.dropBorder": "#ffffff",
    // "activityBarTop.foreground": "#ffffff",
    // "activityBarTop.inactiveForeground": "#ffffff",
    // "sideBarActivityBarTop.border": "#404040",

    "bookmarks.overviewRuler": "#0000", // Disable

    "button.background": "#666", // Primary buttons (most of them)
    "button.hoverBackground": "#808080", // #666 + 10L (https://hslpicker.com)
    "button.secondaryBackground": "#404040", // Secondary buttons (e.g. in Notifications)
    "button.secondaryHoverBackground": "#808080", // Same as hoverBackground

    "contrastActiveBorder": "#0000", // Disable
    // "contrastBorder": "#777",
    "contrastBorder": "#404040",

    // Git: Diff editor
    //  - Red/green color samples from a github commit with "Dark high contrast" (https://github.com/settings/appearance)
    //    - Green: #09b43a (text), #26cd4d4d (line)
    //    - Red:   #ff6a69 (text), #ff6a694d (line)
    //  - Red/green color samples: Atom colors w/ scaled HSL lightness
    //    - Green: #2d571a (atom, dark) -> #4b8c30 (bright) -> #6cc644 (very bright)
    //    - Red:   #910000 (atom, dark) -> #a62c2e (bright) -> #ff4444 (very bright)
    // "diffEditor.border": "#404040", // (Default, from "contrastBorder")
    // "multiDiffEditor.border": "#404040",
    // "multiDiffEditor.background": "#40404066", // Want, but not until they add a similar setting for diffEditor
    "multiDiffEditor.headerBackground": "#404040",
    // "multiDiffEditor.headerBackground": "#808080",
    "diffEditor.diagonalFill": "#373b41", // Default: Some gray color w/ diagonal lines -- changed to solid in css below
    //
    // v1
    //  - Nope: text bg too bright, hard to see fg in big swaths of changes
    // "diffEditor.insertedLineBackground": "#105620", // Github line rgba (#26cd4d4d) -> fiddle with hsl to get matching rgb with no alpha
    // "diffEditor.insertedTextBackground": "#09b43abb", // Github text + alpha
    // "diffEditor.removedLineBackground": "#712a2b", // Github line rgba (#ff6a694d) -> fiddle with hsl to get matching rgb with no alpha
    // "diffEditor.removedTextBackground": "#ff6a6988", // Github text + alpha
    // v2
    //  - Nope: line bg too dim, hard to spot bg in small isolated changes
    // "diffEditor.insertedLineBackground": "#10562088",
    // "diffEditor.insertedTextBackground": "#105620fe",
    // "diffEditor.removedLineBackground": "#712a2b88",
    // "diffEditor.removedTextBackground": "#712a2bfe",
    // v3
    //  - Try: set the one working bg color for both line + text, and forget about distinguishing them
    "diffEditor.insertedLineBackground": "#105620fe",
    "diffEditor.insertedTextBackground": "#105620fe",
    "diffEditor.removedLineBackground": "#712a2bfe",
    "diffEditor.removedTextBackground": "#712a2bfe",
    //
    "diffEditorOverview.insertedForeground": "#09b43a", // Github text
    "diffEditorOverview.removedForeground":  "#ff6a69", // Github text
    "diffEditor.insertedTextBorder": "#0000", // Default: #33ff2e
    "diffEditor.removedTextBorder": "#0000",  // Default: #ff008f
    // "diffEditor.move.border": "#8b8b8b9c",     // When does move happen? (haven't seen them yet)
    // "diffEditor.moveActive.border": "#ffa500", // When does move happen? (haven't seen them yet)
    // "diffEditorGutter.insertedLineBackground": null, // Don't care about the gutter (and I don't see them with gutter on anyway)
    // "diffEditorGutter.removedLineBackground": null,  // Don't care about the gutter (and I don't see them with gutter on anyway)

    "editor.background": "#000000",
    "editor.foreground": "#ffffff",
    // "editorRuler.foreground": "#101010",  // Very very faint [too faint in daylight]
    "editorRuler.foreground": "#202020",  // Very very faint

    // Editor find/search highlight
    //  - NOTE This is for cmd+f, vim '/' is set by "vim.searchHighlightColor"
    "editor.findMatchBackground": "#ff0", // Focused match
    "editor.findMatchBorder": "#0000", // Focused match
    "editor.findMatchHighlightBackground": "#ff0d", // All other matches (like "vim.searchHighlightColor")
    "editor.findMatchHighlightBorder": "#0000", // All other matches

    "editorGutter.background": "#000",

    // Editor selection + selection highlight (other text that matches selection)
    "editor.selectionBackground": "#fff", // Selected text
    "editor.inactiveSelectionBackground": "#fff", // (Default: Adds transparency on lost focus -- don't want)
    "editor.selectionHighlightBackground": "#fff8", // All other text that matches selected text
    "editor.selectionHighlightBorder": "#0000",
    //  - No variable for this one, set below in css (".monaco-editor .selectionHighlight")
    // "editor.inactiveSelectionHighlightBackground": "#fff8", // (Default: Adds transparency on lost focus -- don't want)

    // Editor: Inlay hints
    //  - https://code.visualstudio.com/docs/editing/editingevolved#_inlay-hints
    //  - https://stackoverflow.com/a/68721151/397334
    "editorInlayHint.background": "#666",

    // Accent/highlight color in a _lot_ of places
    //  - e.g. autocomplete fuzzy text matching -- need a color muted enough so it doesn't burn your eyes here (99% case, always typing)
    //  - e.g. cmd-p fuzzy text matching -- need a color bright enough that it catches your eyes here (e.g. sparse char matches)
    //  - e.g. borders in focused UI widgets (e.g. settings) -- secondary concern to the above
    // "focusBorder": "#f38518", // Default orange from hcDark theme -- I don't like this orange everywhere (e.g. autocomplete)
    "focusBorder": "#4f97d7", // Blue from spacemacs -- muted enough to not burn my eyes in autocomplete as I type (99% case)
    // "focusBorder": "#01a0e4", // Blue from 3024 -- nicely bright, but a little too eye-burning for autocomplete as I type
    // "focusBorder": "#01a252", // Green from 3024 -- good alternate choice if I ever get tired of blue
    //  - Manually fix all residual orange (#f38518), from: "Developer: Generate Color Theme From Current Settings"
    "editor.lineHighlightBorder": "#4f97d7",
    "listFilterWidget.outline": "#4f97d7",
    "terminalOverviewRuler.findMatchForeground": "#4f97d7",

    "gitDecoration.addedResourceForeground": "#5ffa68", // New staged
    "gitDecoration.conflictingResourceForeground": "#ff6e67",
    "gitDecoration.deletedResourceForeground": "#ff77ff",
    "gitDecoration.ignoredResourceForeground": "#686868",
    "gitDecoration.modifiedResourceForeground": "#de935f",
    "gitDecoration.stageDeletedResourceForeground": "#ff77ff",
    "gitDecoration.stageModifiedResourceForeground": "#de935f",
    "gitDecoration.submoduleResourceForeground": "#8db9e2", // (Leave as default)
    "gitDecoration.untrackedResourceForeground": "#5ffa68", // New unstaged

    // Explorer
    //  - TODO "list.activeSelectionForeground": How to keep git decoration color instead of changing to white?
    //  - TODO "list.activeSelectionBackground": How to change to "list.focusBackground" when they overlap?
    "list.activeSelectionBackground": "#404040",
    "list.inactiveFocusBackground": "#0000",
    "list.inactiveSelectionBackground": "#404040",
    "list.focusBackground": "#666",
    "list.hoverBackground": "#666",
    "list.errorForeground": "#ff6e67", // Color for files with problems

    // List find/search highlight (Explorer)
    "list.filterMatchBackground": "#ff0d", // Like "vim.searchHighlightColor"
    "list.filterMatchBorder": "#0000",

    // git merge
    "merge.border": "#0000", // Default: "#c3df6f",
    "merge.commonContentBackground": "#0000",
    "merge.commonHeaderBackground": "#ff6666",
    "merge.currentContentBackground": "#0000",
    "merge.currentHeaderBackground": "#ff6666",
    "merge.incomingContentBackground": "#0000",
    "merge.incomingHeaderBackground": "#ff6666",
    // "mergeEditor.change.background": "#9bb95533",
    // "mergeEditor.change.word.background": "#9ccc2c33",
    // "mergeEditor.changeBase.background": "#4b1818",
    // "mergeEditor.changeBase.word.background": "#6f1313",
    // "mergeEditor.conflict.handled.minimapOverViewRuler": "#adaca8ee",
    // "mergeEditor.conflict.handledFocused.border": "#c1c1c1cc",
    // "mergeEditor.conflict.handledUnfocused.border": "#86868649",
    // "mergeEditor.conflict.input1.background": null,
    // "mergeEditor.conflict.input2.background": null,
    // "mergeEditor.conflict.unhandled.minimapOverViewRuler": "#fcba03",
    // "mergeEditor.conflict.unhandledFocused.border": "#ffa600",
    // "mergeEditor.conflict.unhandledUnfocused.border": "#ffa6007a",
    // "mergeEditor.conflictingLines.background": "#ffea0047",

    // Notebook
    // "notebook.cellBorderColor": "#404040",
    // "notebook.cellEditorBackground": null,
    // "notebook.cellHoverBackground": null,
    // "notebook.cellInsertionIndicator": "#4f97d7",
    // "notebook.cellStatusBarItemHoverBackground": "#ffffff26",
    // "notebook.cellToolbarSeparator": "#404040",
    // "notebook.editorBackground": null,
    // "notebook.focusedCellBackground": null,
    // "notebook.focusedCellBorder": "#4f97d7",
    "notebook.focusedCellBorder": "#0000", // Disable gutter color (coupled with custom-ui-style.stylesheet: "Border color on selected cell")
    // "notebook.focusedEditorBorder": "#4f97d7",
    "notebook.inactiveFocusedCellBorder": "#0000", // Default: #404040
    // "notebook.inactiveSelectedCellBorder": "#4f97d7",
    // "notebook.outputContainerBackgroundColor": null,
    // "notebook.outputContainerBorderColor": null,
    // "notebook.selectedCellBackground": null,
    // "notebook.selectedCellBorder": "#404040",
    // "notebook.symbolHighlightBackground": null,
    // "notebookEditorOverviewRuler.runningCellForeground": "#89d185",
    // "notebookScrollbarSlider.activeBackground": "#404040",
    // "notebookScrollbarSlider.background": "#40404099",
    // "notebookScrollbarSlider.hoverBackground": "#404040cc",
    // "notebookStatusErrorIcon.foreground": "#f48771",
    // "notebookStatusRunningIcon.foreground": "#ffffff",
    // "notebookStatusSuccessIcon.foreground": "#89d185",

    // Peek
    // "peekView.border": "#404040",
    // "peekViewEditor.background": "#000000",
    // "peekViewEditor.matchHighlightBackground": null,
    // "peekViewEditor.matchHighlightBorder": "#00000000",
    // "peekViewEditorGutter.background": "#000000",
    // "peekViewEditorStickyScroll.background": "#000000",
    // "peekViewResult.background": "#000000",
    // "peekViewResult.fileForeground": "#ffffff",
    // "peekViewResult.lineForeground": "#ffffff",
    // "peekViewResult.matchHighlightBackground": null,
    "peekViewResult.selectionBackground": "#666", // Default: null (invisible)
    // "peekViewResult.selectionForeground": "#ffffff",
    "peekViewTitle.background": "#404040", // Default: #000
    // "peekViewTitleDescription.foreground": "#ffffff99",
    // "peekViewTitleLabel.foreground": "#ffffff",

    // "quickInputList.focusBackground": "#404040",
    "quickInputList.focusBackground": "#666666", // Match hover background (e.g. try in Quick Search which has section headers)

    // Search Editor find/search highlight
    "searchEditor.findMatchBackground": "#ff0d", // Like "vim.searchHighlightColor"
    "searchEditor.findMatchBorder": "#0000",

    "selection.background": "#008000",

    "settings.focusedRowBorder": "#a6a6a6", // Override focusBorder (blue -> gray)

    "statusBar.background": "#404040",
    // "statusBar.foreground": "#a6a6a6", // Medium gray like all other scaffolding text
    "statusBar.foreground": "#fff", // Hmm actually, very white because there's important stuff down there that changes
    "statusBarItem.remoteBackground": "#0000",

    // "statusBar.debuggingBackground": "#ba592c", // Default (some orange that doesn't work well with my other colors)
    // "statusBar.debuggingForeground": "#a6a6a6", // Default (the same grey as statusBar.foreground)
    "statusBar.debuggingBackground": "#800600", // Dark red (#ff6e67 70L -> 25L)
    "statusBar.debuggingForeground": "#fff", // Very white on dark red

    // "tab.activeBackground": "#404040", // Don't highlight background of active tab, only foreground (like atom)
    "tab.activeBackground": "#666", // Do highlight background of active tab (I think this is better than atom)
    "tab.activeForeground": "#fff",
    "tab.border": "#0000",
    // "tab.hoverBackground": "#404040",
    "tab.hoverBackground": "#666",
    "tab.hoverForeground": "#fff",
    // "tab.inactiveBackground": "#404040",
    // "tab.inactiveBackground": "#000",
    // "tab.inactiveForeground": "#fff",
    // "tab.inactiveForeground": "#777",
    "tab.inactiveForeground": "#a6a6a6",
    "tab.inactiveModifiedBorder": "#0000",
    // "tab.unfocusedActiveBackground": "#404040",
    "tab.unfocusedActiveBackground": "#404040",
    "tab.unfocusedActiveForeground": "#fff",
    // "tab.unfocusedActiveForeground": "#a6a6a6",
    "tab.unfocusedActiveModifiedBorder": "#0000",
    // "tab.unfocusedHoverBackground": "#404040",
    "tab.unfocusedHoverBackground": "#666",
    "tab.unfocusedHoverForeground": "#fff",
    // "tab.unfocusedInactiveBackground": "#404040",
    // "tab.unfocusedInactiveBackground": "#000",
    // "tab.unfocusedInactiveForeground": "#777",
    // "tab.unfocusedInactiveForeground": "#fff",
    "tab.unfocusedInactiveForeground": "#a6a6a6",
    "tab.unfocusedInactiveModifiedBorder": "#0000",

    // Terminal
    //  - https://code.visualstudio.com/api/references/theme-color#integrated-terminal-colors
    //  - https://glitchbone.github.io/vscode-base16-term
    //  - My classic colors
    //    - #777777 -- black
    //    - #6871ff -- blue
    //    - #60fdff -- cyan
    //    - #5ffa68 -- green
    //    - #ff77ff -- magenta
    //    - #ff6e67 -- red
    //    - #ffffff -- white
    //    - #fffc67 -- yellow
    "terminal.background": "#000000",
    "terminal.foreground": "#ffffff",
    "terminal.ansiBrightBlack": "#777777",
    "terminal.ansiBrightBlue": "#6871ff",
    "terminal.ansiBrightCyan": "#60fdff",
    "terminal.ansiBrightGreen": "#5ffa68",
    "terminal.ansiBrightMagenta": "#ff77ff",
    "terminal.ansiBrightRed": "#ff6e67",
    "terminal.ansiBrightWhite": "#ffffff",
    "terminal.ansiBrightYellow": "#fffc67",
    "terminal.ansiBlack": "#777777",
    "terminal.ansiBlue": "#6871ff",
    "terminal.ansiCyan": "#60fdff",
    "terminal.ansiGreen": "#5ffa68",
    "terminal.ansiMagenta": "#ff77ff",
    "terminal.ansiRed": "#ff6e67",
    "terminal.ansiWhite": "#ffffff",
    "terminal.ansiYellow": "#fffc67",

    // Terminal find/search highlight
    //  - NOTE Must Reload Window (ctrl+cmd+r) for these colors to update in active terminals (probably a bug)
    "terminal.findMatchBackground": "#ff0", // Focused match
    "terminal.findMatchBorder": "#ff0", // Focused match
    "terminal.findMatchHighlightBackground": "#ff0d", // All other matches (like "vim.searchHighlightColor")
    "terminal.findMatchHighlightBorder": "#0000", // All other matches

    // Links
    "editorLink.activeForeground": "#4f97d7", // Default: #00ffff
    "notificationLink.foreground": "#4f97d7", // Default: #3794ff
    "textLink.foreground": "#4f97d7", // Default: #3794ff
    "textLink.activeForeground": "#4f97d7", // Default: #3794ff

  },

  // Custom syntax colors
  //  - Docs
  //    - https://code.visualstudio.com/api/extension-guides/color-theme
  //    - https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide
  //    - https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide
  //    - https://code.visualstudio.com/api/references/theme-color
  //  - Schema reference (w/ all scope names)
  //    - https://github.com/wraith13/vscode-schemas/blob/master/en/v1.82.2/schemas/color-theme.json
  //    - https://github.com/wraith13/vscode-schemas/blob/master/en/v1.82.2/schemas/token-styling.json -- semanticTokenColorCustomizations
  //    - https://github.com/wraith13/vscode-schemas/blob/master/en/v1.82.2/schemas/textmate-colors.json -- tokenColorCustomizations
  //  - My atom syntax colors
  //    - https://github.com/jdanbrown/atom-jdanbrown-syntax/blob/master/styles/colors.less
  //    - https://github.com/jdanbrown/atom-jdanbrown-syntax/blob/master/styles/syntax-variables.less
  //    - https://github.com/jdanbrown/atom-jdanbrown-syntax/blob/master/styles/base.less
  //  - My classic colors
  //    - #777777 -- black
  //    - #6871ff -- blue
  //    - #60fdff -- cyan
  //    - #5ffa68 -- green
  //    - #ff77ff -- magenta
  //    - #ff6e67 -- red
  //    - #ffffff -- white
  //    - #fffc67 -- yellow
  //  - git colors (from git builtins, I think)
  //    - #5ffa69 -- green (git status staged)
  //    - #f96e67 -- red (git status unstaged)
  //    - #8cf77b -- green (git diff inserted)
  //    - #ed776d -- red (git diff deleted)
  //  - Use semantic highlighting when it's available, and fallback to syntax highlighting when it's not
  //    - https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide
  // //    - XXX Actually nvm, I don't think I like semantic highlighting at all, disable it
  // //      - (It can also be disabled per language, if I ever want it in some languages but not others)
  // "editor.semanticHighlighting.enabled": false,
  "editor.semanticTokenColorCustomizations": {
    "rules": {

      // Standard
      //  - https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide
      "class":         {"foreground": "#60fdff", "fontStyle": "bold"},
      "comment":       {"foreground": "#777777", "fontStyle": "bold"},
      "decorator":     {"foreground": "#60fdff", "fontStyle": "bold"},
      "enum":          {"foreground": "#60fdff", "fontStyle": "bold"},
      "enumMember":    {"foreground": "#ff77ff", "fontStyle": "bold"},
      "event":         {"foreground": "#60fdff", "fontStyle": "bold"},
      "function":      {"foreground": "#60fdff", "fontStyle": "bold"},
      "interface":     {"foreground": "#60fdff", "fontStyle": "bold"},
      "keyword":       {"foreground": "#fffc67", "fontStyle": "bold"},
      "label":         {"foreground": "#fffc67", "fontStyle": "bold"},
      "macro":         {"foreground": "#6871ff", "fontStyle": "bold"},
      "method":        {"foreground": "#60fdff", "fontStyle": "bold"},
      "namespace":     {"foreground": "#ffffff", "fontStyle": ""},
      "number":        {"foreground": "#ff77ff", "fontStyle": "bold"},
      "operator":      {"foreground": "#fffc67", "fontStyle": "bold"},
      "parameter":     {"foreground": "#ffffff", "fontStyle": ""},
      "property":      {"foreground": "#ffffff", "fontStyle": ""},
      "regexp":        {"foreground": "#ff77ff", "fontStyle": "bold"},
      "string":        {"foreground": "#ff77ff", "fontStyle": "bold"},
      "struct":        {"foreground": "#60fdff", "fontStyle": "bold"},
      "type":          {"foreground": "#60fdff", "fontStyle": "bold"},
      "typeParameter": {"foreground": "#ffffff", "fontStyle": ""},
      "variable":      {"foreground": "#ffffff", "fontStyle": ""},

      // Magit
      //  - https://github.com/kahole/edamagit/pull/271
      "magit-ref-name": {"foreground": "#fffc67", "fontStyle": "bold"},

      // Python
      //  - https://github.com/microsoft/pylance-release
      "*.typeHint:python":       {"foreground": "#fffc67", "fontStyle": "bold"},
      "clsParameter:python":     {"foreground": "#60fdff", "fontStyle": "bold"},
      "intrinsic:python":        {"foreground": "#ffffff", "fontStyle": ""},
      "magicFunction:python":    {"foreground": "#60fdff", "fontStyle": "bold"}, // (dunder methods)
      "member:python":           {"foreground": "#ffffff", "fontStyle": ""},
      "module:python":           {"foreground": "#ffffff", "fontStyle": ""},
      "selfParameter:python":    {"foreground": "#60fdff", "fontStyle": "bold"},

    },
  },
  //  - Use semantic highlighting when it's available, and fallback to syntax highlighting when it's not
  //    - https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide
  //    - https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide#semantic-coloring-in-color-themes
  //      - Schema reference on foreground/fontStyle
  "editor.tokenColorCustomizations": {
    "textMateRules": [

      {"scope": "comment",                                                  "settings": {"foreground": "#777777", "fontStyle": "bold"}},
      {"scope": "constant.character",                                       "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "constant.language",                                        "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "constant.numeric",                                         "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "constant.other.caps",                                      "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "constant.other.color.rgb-value",                           "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "constant.other.option",                                    "settings": {"foreground": "#ffffff", "fontStyle": ""}}, // shellscript
      {"scope": "constant.other.rgb-value",                                 "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "constant.regexp",                                          "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "constant.sha.git-rebase",                                  "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "emphasis",                                                 "settings": {"fontStyle": "italic"}},
      {"scope": "entity.name.class",                                        "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "entity.name.command.shell",                                "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "entity.name.function",                                     "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "entity.name.namespace",                                    "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "entity.name.scope-resolution",                             "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "entity.name.tag",                                          "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "entity.name.type",                                         "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "entity.name.variable",                                     "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "entity.other.attribute-name.attribute",                    "settings": {"foreground": "#ffffff", "fontStyle": "bold"}},
      {"scope": "entity.other.attribute-name.css",                          "settings": {"foreground": "#5ffa68", "fontStyle": "bold"}},
      {"scope": "entity.other.attribute-name.class.css",                    "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "entity.other.attribute-name.class.mixin.css",              "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "entity.other.attribute-name.id.css",                       "settings": {"foreground": "#5ffa68", "fontStyle": "bold"}},
      {"scope": "entity.other.attribute-name.parent-selector.css",          "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "entity.other.attribute-name.pseudo-class.css",             "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "entity.other.attribute-name.pseudo-element.css",           "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "entity.other.inherited-class",                             "settings": {"foreground": "#5ffa68", "fontStyle": "bold"}},
      {"scope": "invalid",                                                  "settings": {"foreground": "#ff6e67", "fontStyle": "bold"}},
      {"scope": "keyword",                                                  "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.control",                                          "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.control.import",                                   "settings": {"foreground": "#6871ff", "fontStyle": "bold"}},
      {"scope": "keyword.operator",                                         "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.cast",                                    "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.expression",                              "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.logical",                                 "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.logical.python",                          "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.new",                                     "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.sizeof",                                  "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.type",                                    "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.type.annotation",                         "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "keyword.other.operator",                                   "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.other.unit",                                       "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "keyword.other.using",                                      "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "magit.header",                                             "settings": {"foreground": "#6871ff", "fontStyle": "bold underline"}},
      {"scope": "magit.subheader",                                          "settings": {"foreground": "#6871ff", "fontStyle": "bold"}},
      {"scope": "markup.bold",                                              "settings": {"fontStyle": "bold"}},
      {"scope": "markup.changed",                                           "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "markup.deleted",                                           "settings": {"foreground": "#f96e67", "fontStyle": "bold"}},
      {"scope": "markup.heading",                                           "settings": {"foreground": "#5ffa68", "fontStyle": "bold"}},
      {"scope": "markup.inline.raw.string.markdown",                        "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "markup.inserted",                                          "settings": {"foreground": "#5ffa69", "fontStyle": "bold"}},
      {"scope": "markup.italic",                                            "settings": {"fontStyle": "italic"}},
      {"scope": "markup.strikethrough",                                     "settings": {"fontStyle": "strikethrough"}},
      {"scope": "markup.underline",                                         "settings": {"fontStyle": "underline"}},
      {"scope": "meta.commit-message.git-rebase",                           "settings": {"foreground": "#ffffff", "fontStyle": "bold"}},
      {"scope": "meta.definition.variable.name",                            "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "meta.diff.header",                                         "settings": {"foreground": "#6871ff", "fontStyle": "bold"}},
      {"scope": "meta.diff.header.from-file",                               "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "meta.diff.header.to-file",                                 "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "meta.diff.index",                                          "settings": {"foreground": "#6871ff", "fontStyle": "bold"}},
      {"scope": "meta.diff.range",                                          "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "meta.embedded",                                            "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "meta.function-call",                                       "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "meta.function-call.arguments",                             "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "meta.function-call punctuation",                           "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      // {"scope": "meta.function.parameters.python",                          "settings": {"foreground": "#fffc67", "fontStyle": ""}}, // Types on function args
      // {"scope": "meta.function.parameters.python support.type",             "settings": {"foreground": "#fffc67", "fontStyle": ""}}, // Types on function args
      {"scope": "meta.embedded.assembly",                                   "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "meta.object-literal.key",                                  "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "meta.preprocessor",                                        "settings": {"foreground": "#6871ff", "fontStyle": "bold"}},
      {"scope": "meta.preprocessor.numeric",                                "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "meta.preprocessor.string",                                 "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "meta.resultLinePrefix.contextLinePrefix.search",           "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "meta.return-type",                                         "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "meta.template.expression",                                 "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "meta.type.cast.expr",                                      "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "meta.type.new.expr",                                       "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "punctuation.definition.arguments",                         "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "punctuation.definition.comment",                           "settings": {"foreground": "#777777", "fontStyle": "bold"}},
      {"scope": "punctuation.definition.list.begin.markdown",               "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "punctuation.definition.parameters",                        "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      // FIXME These highlights markdown `[x]` but not `[ ]` (and it incorrectly highlights `[foo]`)
      // {"scope": "punctuation.definition.string.begin.markdown",             "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      // {"scope": "punctuation.definition.string.end.markdown",               "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "punctuation.definition.tag",                               "settings": {"foreground": "#777777", "fontStyle": "bold"}},
      {"scope": "punctuation.definition.template-expression.begin",         "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "punctuation.definition.template-expression.end",           "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "punctuation.section.embedded",                             "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "punctuation.separator",                                    "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "source.coffee.embedded",                                   "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "source.cpp keyword.operator.delete",                       "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "source.cpp keyword.operator.new",                          "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "source.groovy.embedded",                                   "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "source.powershell variable.other.member",                  "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage",                                                  "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.modifier",                                         "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.modifier.import",                                  "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "storage.modifier.package",                                 "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "storage.type",                                             "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.annotation",                                  "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.generic",                                     "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.modifier",                                    "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.object.array",                                "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.parameters",                                  "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.primitive.array",                             "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.primitive",                                   "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.string.python",                               "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}}, // f"..."
      {"scope": "storage.type.token",                                       "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.variable",                                    "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "string meta.image.inline.markdown",                        "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "string",                                                   "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "string.regexp",                                            "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "string.tag",                                               "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "string.value",                                             "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "string.quoted.double.shell",                               "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "string.quoted.single.shell",                               "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "string.unquoted.argument.shell",                           "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "strong",                                                   "settings": {"fontStyle": "bold"}},
      {"scope": "support.class",                                            "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "support.constant.color",                                   "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.constant.dom",                                     "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "support.constant.font-name",                               "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.constant.handlebars",                              "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.constant.json",                                    "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.constant.math",                                    "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.constant.media",                                   "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.constant.media-type",                              "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.constant.property-value",                          "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.function",                                         "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "support.function.git-rebase",                              "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "support.type",                                             "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "support.type.primitive",                                   "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "support.type.property-name",                               "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "support.type.vendored.property-name",                      "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "support.variable",                                         "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "token.debug-token",                                        "settings": {"foreground": "#6871ff", "fontStyle": "bold"}},
      {"scope": "token.error-token",                                        "settings": {"foreground": "#ff6e67", "fontStyle": "bold"}},
      {"scope": "token.info-token",                                         "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "token.warn-token",                                         "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "variable",                                                 "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "variable.language.this",                                   "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "variable.language.wildcard",                               "settings": {"foreground": "#fffc67", "fontStyle": ""}},
      {"scope": "variable.legacy.builtin.python",                           "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "variable.other.less",                                      "settings": {"foreground": "#6871ff", "fontStyle": ""}},
      {"scope": "variable.language.special.self.python",                    "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "variable.parameter.function.language.special.self.python", "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},

    ],
  },

  // Tabs + breadcrumbs
  "breadcrumbs.icons": false,
  "breadcrumbs.symbolPath": "off",
  "workbench.editor.tabCloseButton": "off",

  // Custom css/styling
  //  - https://github.com/subframe7536/vscode-custom-ui-style
  //  - Workaround error: "Installation appears to be corrupt [Unsupported]"
  //    - https://github.com/RimuruChan/vscode-fix-checksums
  //    - https://stackoverflow.com/a/78996147/397334
  //    - https://code.visualstudio.com/docs/supporting/faq#_installation-appears-to-be-corrupt-unsupported
  //  - Commands to reload:
  //    - "Custom UI Style: Reload"
  //    - "Fix Checksums: Apply"
  //    - Quit + restart
  //
  // Settings
  "custom-ui-style.reloadWithoutPrompting": true,
  "custom-ui-style.watch": false,
  //
  // Monospace everywhere
  "custom-ui-style.font.monospace": "Consolas Nerd Font",
  "custom-ui-style.font.sansSerif": "Consolas Nerd Font",
  //
  // Electron BrowserWindow options
  //  - https://www.electronjs.org/docs/latest/api/base-window
  //  - https://www.electronjs.org/docs/latest/api/browser-window
  "custom-ui-style.electron": {
    // Frameless window (no title bar, no traffic light buttons)
    //  - https://www.electronjs.org/docs/latest/tutorial/custom-window-styles#frameless-windows
    //  - https://www.electronjs.org/docs/latest/tutorial/custom-title-bar
    "frame": false,
    // "titleBarStyle": "hidden", // Nope, this re-shows the traffic light buttons
    // Preserve "maximized across two screens" on hide/show
    //  - Neat!
    "enableLargerThanScreen": true,
    // Disable rounded corners
    //  - "Setting this property to false will prevent the window from being fullscreenable"
    "roundedCorners": false,
    // Don't pass "webPreferences", it breaks vscode! (blank window at startup)
    //  - This is because these options are injected as a code string, and webPreferences get passed twice
    // "webPreferences": {...},
  },
  "custom-ui-style.stylesheet": {

    // Hide all scrollbars
    ".scrollbar": {
      "display": "none",
    },

    // Quick input (cmd+p)
    //  - Protip: To use element inspector on these, set "workbench.quickOpen.closeOnFocusLost":false
    ".quick-input-list .monaco-list-row": {
      "border-radius": "unset",
    },
    //  - Files
    //    - Make really wide (default 600px is too narrow for long paths)
    ".quick-input-widget:has(.monaco-list[aria-label*='Search files'])": {
      "width": "1000px !important",
      "left": "calc((100% - 1000px) / 2) !important",
      "margin-left": "0px !important",
    },
    //    - Reorder "file dir" -> "dir/file"
    ".quick-input-widget .monaco-list[aria-label*='Search files'] .monaco-icon-label-container": {
      "display": "flex",
    },
    ".quick-input-widget .monaco-list[aria-label*='Search files'] .monaco-icon-label-container .monaco-icon-description-container": {
      "order": "1",
      "overflow-y": "hidden",
      "text-overflow": "ellipsis",
    },
    ".quick-input-widget .monaco-list[aria-label*='Search files'] .monaco-icon-label-container .monaco-icon-description-container .label-description": {
      "font-size": "inherit !important",
      "opacity": "1 !important",
      "margin-left": "0px !important",
    },
    ".quick-input-widget .monaco-list[aria-label*='Search files'] .monaco-icon-label-container .monaco-icon-name-container": {
      "order": "2",
    },
    ".quick-input-widget .monaco-list[aria-label*='Search files'] .monaco-icon-label-container:has(.label-description .monaco-highlighted-label:not(:empty)) .label-name::before": {
      "content": "'/'",
    },
    //  - Symbols
    //    - Move parent to the right edge for vertical alignment ("symbol parent [space]" -> "symbol [space] parent")
    ".quick-input-widget .monaco-list[aria-label*='name of a symbol'] .monaco-icon-description-container": {
      "float": "right",
    },

    // Quick search (shift+cmd+f)
    //  - Make really wide (default 600px is too narrow for long paths)
    ".quick-input-widget:has(.monaco-list[aria-label*='Search for text in your workspace files'])": {
      "width": "1000px !important",
      "left": "calc((100% - 1000px) / 2) !important",
      "margin-left": "0px !important",
    },
    //  - On header rows, add background color + remove top border
    ".quick-input-widget .monaco-list[aria-label*='Search for text in your workspace files'] .monaco-list-row:has(.quick-input-list-entry.quick-input-list-separator-border)": {
      "background": "#404040",
    },
    ".quick-input-widget .monaco-list[aria-label*='Search for text in your workspace files'] .monaco-list-row:has(.quick-input-list-entry.quick-input-list-separator-border) .quick-input-list-entry.quick-input-list-separator-border": {
      "border-top-width": "0px", // Default: 1px
    },
    ".quick-input-widget .monaco-list[aria-label*='Search for text in your workspace files'] .monaco-list-row:has(.quick-input-list-entry.quick-input-list-separator-border) .quick-input-list-entry.quick-input-list-separator-border .label-name": {
      "font-weight": "inherit", // Default: 600 (bold)
    },
    //  - On header rows, reorder "file dir" -> "dir/file"
    ".quick-input-widget .monaco-list[aria-label*='Search for text in your workspace files'] .monaco-list-row:has(.quick-input-list-entry.quick-input-list-separator-border) .monaco-icon-label-container": {
      "display": "flex",
      "color": "#ffffff", // Default has 70% opacity
    },
    ".quick-input-widget .monaco-list[aria-label*='Search for text in your workspace files'] .monaco-list-row:has(.quick-input-list-entry.quick-input-list-separator-border) .monaco-icon-label-container .monaco-icon-description-container": {
      "order": "1",
      "overflow-y": "hidden",
      "text-overflow": "ellipsis",
    },
    ".quick-input-widget .monaco-list[aria-label*='Search for text in your workspace files'] .monaco-list-row:has(.quick-input-list-entry.quick-input-list-separator-border) .monaco-icon-label-container .monaco-icon-description-container .label-description": {
      "font-size": "inherit !important",
      "opacity": "1 !important",
      "margin-left": "0px !important",
    },
    ".quick-input-widget .monaco-list[aria-label*='Search for text in your workspace files'] .monaco-list-row:has(.quick-input-list-entry.quick-input-list-separator-border) .monaco-icon-label-container .monaco-icon-name-container": {
      "order": "2",
    },
    ".quick-input-widget .monaco-list[aria-label*='Search for text in your workspace files'] .monaco-list-row:has(.quick-input-list-entry.quick-input-list-separator-border) .monaco-icon-label-container:has(.label-description .monaco-highlighted-label:not(:empty)) .label-name::before": {
      "content": "'/'",
    },

    // Advanced Open File (cmd+o)
    //  - TODO Make advanced-open-file leave a signature on its .quick-input-widget that we can match on
    //    - Currently there's no correct way to detect a .quick-input-widget from advanced-open-file vs. others
    //    - For making it wide, we match on [aria-label='Type to narrow down results.'], which I think is the default
    //      for any quick open that doesn't provide it's own text
    //    - For hiding the icons, we additionally match on [aria-label^='file'][aria-label*='  '], which is brittle but
    //      should at least avoid incorrectly matching on other quick opens
    //  - Make really wide (default 600px is too narrow for long paths)
    ".quick-input-widget:has(.monaco-list[aria-label='Type to narrow down results.'])": {
      "width": "1000px !important",
      "left": "calc((100% - 1000px) / 2) !important",
      "margin-left": "0px !important",
    },
    //  - Hide icons, and add '/' after dirs
    //    - TODO Make advanced-open-file not show icons when "workbench.iconTheme":null, like the built-in file pickers
    ".quick-input-widget:has(.monaco-list[aria-label='Type to narrow down results.']) .monaco-list-row[aria-label^='file'][aria-label*='  '] .label-name": {
      "margin-left": "-1ex", // Negate the leading ' ' char in the label (I guess injected by advanced-open-file to separate the label from the icon ü§∑)
    },
    ".quick-input-widget:has(.monaco-list[aria-label='Type to narrow down results.']) .monaco-list-row[aria-label^='file'][aria-label*='  '] .label-name .codicon": {
      "display": "none !important", // Hide icon
    },
    ".quick-input-widget:has(.monaco-list[aria-label='Type to narrow down results.']) .monaco-list-row[aria-label^='file'][aria-label*='  '] .label-name:has(.codicon-file-directory)::after": {
      "content": "'/'",
    },
    ".quick-input-widget:has(.monaco-list[aria-label='Type to narrow down results.']) .monaco-list-row[aria-label^='file'][aria-label*='  '] .label-name:has(.codicon-file-symlink-file)::after": {
      "content": "' ->'",
    },
    ".quick-input-widget:has(.monaco-list[aria-label='Type to narrow down results.']) .monaco-list-row[aria-label^='file'][aria-label*='  '] .label-name:has(.codicon-file-symlink-directory)::after": {
      "content": "'/ ->'",
    },

    // Activity Bar
    "#workbench\\.parts\\.activitybar": {
      "background-color": "#404040 !important",
    },

    // Sidebar
    //  - Re-style titlebars
    "#workbench\\.parts\\.sidebar > .title": {
      "background-color": "#404040",
      "border-bottom": "1px solid #666 !important",
    },
    "#workbench\\.parts\\.sidebar .pane-header": {
      "background-color": "#404040 !important",
    },
    //  - Add border on focused view
    "#workbench\\.parts\\.sidebar .monaco-list:focus::before": {
      "display": "none",
    },
    "#workbench\\.parts\\.sidebar .pane:has(:focus)::before": {
      "content": "''",
      "pointer-events": "none",
      "position": "absolute",
      "top": "0",
      "left": "0",
      "width": "100%",
      "height": "100%",
      "outline": "1px solid #fff",
      "outline-offset": "-1px",
      "z-index": "1",
    },

    // Sidebar: Explorer (tree)
    //  - Color dirs blue
    //    - But leave alone when git modified (orange) or ignored (gray)
    ".explorer-folders-view .monaco-list-row:has(.rootfolder-icon, .folder-icon) .label-name": {
      "font-weight": "bold",
    },
    ".explorer-folders-view .monaco-list-row:has(.folder-icon):not(:has(.monaco-icon-label[class*=monaco-decoration-])) .label-name": {
      "color": "#6871ff",
    },
    //  - Color the expand/collapse dir icons blue
    //    - We can't apply orange/gray to the modified/ignored ones, so just color them all blue
    ".explorer-folders-view .monaco-list-row .monaco-tl-twistie.codicon": {
      "color": "#6871ff",
      "font-weight": "bold",
    },
    //  - Color symlinks cyan
    //    - We can't use the first selector because symbolic links have an empty decoration
    //    - Which means symlink colors (cyan) clobber git colors (modified/added)
    // ".explorer-folders-view .monaco-list-row:has(.monaco-icon-label[title*='Symbolic Link']):not(:has(.monaco-icon-label[class*=monaco-decoration-])) .label-name": {
    ".explorer-folders-view .monaco-list-row:has(.monaco-icon-label[title*='Symbolic Link']) .label-name": {
      "color": "#60fdff",
      "font-weight": "bold",
    },
    //  - Add a border below the sticky header list items
    //    - https://code.visualstudio.com/updates/v1_85#_sticky-scroll-in-trees
    ".explorer-folders-view .monaco-tree-sticky-container": {
      "border-bottom": "2px solid #404040",
    },

    // Sidebar: Source Control
    //  - Hide all action buttons except the few I actually (have to) use
    //    - I have to use +/- because there aren't yet keybindings for stage/unstage from scm view :/
    //    - https://github.com/microsoft/vscode/issues/194214 In Source Control view, add commands/keybindings for "Stage File" / "Unstage File"
    //    - https://github.com/microsoft/vscode/issues/24916 SCM: Support keyboard shortcuts
    ".scm-view .monaco-list-row .actions .action-label[aria-label$='Checkout Branch/Tag...'] .codicon": {
      "display": "none !important", // Hide the icon by the branch name
    },
    ".scm-view .monaco-list-row .actions .action-label[aria-label='Open File']": {
      "display": "none !important",
    },
    ".scm-view .monaco-list-row .actions .action-label[aria-label='Discard Changes']": {
      "display": "none !important",
    },
    ".scm-view .monaco-list-row .actions .action-label[aria-label='Discard All Changes']": {
      "display": "none !important",
    },
    ".scm-view .monaco-list-row .actions .action-label[aria-label='Stash All Changes']": {
      "display": "none !important",
    },
    //  - Color dirs blue
    ".scm-view .monaco-list-row .scm-provider .label .name": {
      "font-weight": "bold",
      "color": "#6871ff !important",
    },
    ".scm-view .monaco-list-row:has(.folder-icon) .label-name": {
      "font-weight": "bold",
      "color": "#6871ff !important",
    },
    ".scm-view .monaco-list-row:has(.folder-icon) .label-name .label-separator": {
      "opacity": "1 !important",
      "margin": "0px !important",
    },
    //  - Color the expand/collapse dir icons blue
    //    - We can't apply orange/gray to the modified/ignored ones, so just color them all blue
    ".scm-view .monaco-list-row .monaco-tl-twistie.codicon": {
      "color": "#6871ff !important",
      "font-weight": "bold",
    },

    // Bottom panel
    //  - Re-style titlebar
    "#workbench\\.parts\\.panel .title": {
      "background-color": "#404040",
    },
    "#workbench\\.parts\\.panel .title .action-item .action-label": {
      "color": "#a6a6a6 !important",
    },
    "#workbench\\.parts\\.panel .title .action-item.checked .action-label": { // Panel bar labels (left) focus like this
      "color": "#fff !important",
    },
    "#workbench\\.parts\\.panel .title .action-item .action-label.checked": { // Panel bar buttons (right) toggle on like this
      "color": "#fff !important",
    },
    "#workbench\\.parts\\.panel .title .action-item .action-label:hover": {
      "color": "#fff !important",
    },
    //  - Add border when focused
    "#workbench\\.parts\\.panel:has(:focus) .content::before": {
      "content": "''",
      "pointer-events": "none",
      "position": "absolute",
      "top": "0",
      "left": "0",
      "width": "100%",
      "height": "100%",
      "outline": "1px solid #fff",
      "outline-offset": "-1px",
      "z-index": "1",
    },

    // Notifications
    //  - Add border on focused view
    //    - The Notifications list view happens when you shift+cmd+\ (notifications.showList)
    //    - The Notification Toasts view happens when you click the standalone notifications (which doesn't activate the notifications list)
    ".notifications-center:has(:focus)": {
      "border-color": "#fff !important",
    },
    ".notification-toast:has(:focus)": {
      "border-color": "#fff !important",
    },

    // Editor: Hide overview ruler (editor right margin / scrollbar)
    //  - https://github.com/microsoft/vscode/issues/85418
    ".decorationsOverviewRuler": {
      "display": "none !important",
    },

    // Tabs + breadcrumbs
    //  - Codicon references
    //    - https://microsoft.github.io/vscode-codicons/dist/codicon.html
    //    - https://github.com/microsoft/vscode-codicons/blob/0.0.30/dist/codicon.csv -- shows hex values, but incomplete
    //    - https://github.com/microsoft/vscode-codicons/blob/0.0.30/src/template/mapping.json -- complete, but shows decimal values (use python hex())

    // Tabs: Font/height sizing
    ".tabs-and-actions-container": {
      "background": "#404040 !important",
    },
    ".tabs-and-actions-container .tab": {
      "padding-right": "10px !important", // Prevent the normal padding-right:10px changing to padding-right:0 when .dirty (probably for the dirty circle)
      "border-width": "0px !important", // Prevent jank when moving through wrapped tabs (when right border changes 0px->1px, which I don't need)
    },
    ".tabs-and-actions-container .tab .monaco-icon-label .monaco-icon-label-container": {
      // When multiple tabs are open with the same name (.label-name), they gain a dir label too (.label-description),
      // which wraps in a bad way and gets hidden because of my other styling edits. Adding flex+nowrap keeps both
      // labels on one (wide) line.
      "display": "flex",
      "flex-wrap": "nowrap",
    },
    ".monaco-workbench .part.editor > .content .editor-group-container > .title .editor-actions": {
      "outline": "0px !important",
      "padding": "0px !important",
    },
    ".monaco-workbench .part.editor > .content .editor-group-container > .title .tabs-container > .tab.sizing-fit": {
      "width": "inherit", // Let tab widths shrink to fit tab titles (default: 120px)
    },
    ".monaco-action-bar .action-label": {
      "margin-right": "0px !important",
    },

    // Tabs: Icons
    ".tabs-and-actions-container .tab.dirty .tab-label": {
      // Color labels of dirty tabs
      "color": "#de935f", // git orange (gitDecoration.modifiedResourceForeground)
    },
    ".tabs-and-actions-container .tab.dirty .tab-label::after": {
      // XXX Nope, don't show a solid circle to the right of dirty tabs, because it causes jank with the new wrapped tab
      // bar. Instead, color the tab label (above).
      // "content": "'\\ea71'",
      // "font-family": "codicon",
      // "padding-right": "0px",
      // "display": "block !important", // Add circle on dirty/unsaved editors
    },
    ".tabs-and-actions-container .codicon": {
      "width": "inherit !important",
      "padding": "0px !important",
      "color": "#a6a6a6 !important",
    },
    ".tabs-and-actions-container .codicon:hover": {
      "color": "#fff !important",
    },
    ".tabs-and-actions-container .action-item": {
      "margin": "0px !important",
      "padding": "0px 4px !important",
      "text-align": "center !important",
    },
    ".tabs-and-actions-container .action-item:hover": {
      "background": "#666 !important",
    },

    // Tabs: Hide decorations before/after
    //  - Before: Tab icons (e.g. terminal tabs have one)
    //  - After: Tab actions (e.g. X to close, git M/A/U decorations)
    ".tabs-and-actions-container .tab .tab-label::before": {
      "display": "none",
    },
    ".tabs-and-actions-container .tab .tab-actions": {
      "display": "none",
    },

    // Tabs: Disable git font color
    //  - But leave git font color enabled for Explorer view
    //  - See also: `workbench.colorCustomizations` in https://code.visualstudio.com/api/references/theme-color#git-colors
    ".monaco-workbench .part.editor > .content .editor-group-container > .title.tabs .monaco-icon-label::after": {
      "display": "none",
    },
    ".tabs-and-actions-container .tab *[class*=monaco-decoration-itemColor-]": {
      "color": "inherit",
    },
    ".tabs-and-actions-container .tab *[class*=monaco-decoration-iconBadge-]": {
      "color": "inherit",
    },
    ".tabs-and-actions-container .tab *[class*=monaco-decoration-itemBadge-]": {
      "color": "inherit",
    },
    ".tabs-and-actions-container .tab *[class*=monaco-decoration-itemBadge-]::after": {
      "color": "inherit",
    },

    // Breadcrumbs
    ".monaco-breadcrumbs .monaco-breadcrumb-item .codicon-breadcrumb-separator": {
      "display": "none", // Replace with '/' (below)
    },
    ".monaco-breadcrumbs .monaco-breadcrumb-item:not(:last-of-type) .label-name::after": {
      "content": "'/'",
    },
    ".monaco-breadcrumbs .monaco-breadcrumb-item:not(.root_folder):first-of-type .label-name::before": {
      "content": "'/'",
    },

    // Status bar: Git
    //  - Reorder
    ".statusbar [id^='status.scm.']": {
      "order": "-9", // First
    },
    //  - Hide branch icon next to branch name
    ".statusbar [id^='status.scm.'] .codicon-git-branch::before": {
      "display": "none",
    },

    // Status bar: Problems
    //  - Reorder
    ".statusbar #status\\.problems": {
      "order": "-8", // Second
    },
    ".statusbar #statusbar\\.currentProblem": {
      "order": "8", // Second-to-last (else it jerks all the middle stuff back and forth)
    },
    //  - Numbers: Gray when no problems, white when problems
    ".statusbar #status\\.problems[aria-label='No Problems']": {
      "color": "#a6a6a6 !important",
    },
    ".statusbar #status\\.problems[aria-label!='No Problems']": {
      "color": "#fff !important",
    },
    //  - Icons: Gray when no problems, red/yellow/cyan when problems (plus bold to stand out)
    ".statusbar #status\\.problems .codicon": {
      "color": "#a6a6a6 !important",
    },
    ".statusbar #status\\.problems[aria-label*='Errors:'] .codicon-error": {
      "color": "#ff6e67 !important",
      "font-weight": "bold",
    },
    ".statusbar #status\\.problems[aria-label*='Warnings:'] .codicon-warning": {
      "color": "#fffc67 !important",
      "font-weight": "bold",
    },
    ".statusbar #status\\.problems[aria-label*='Infos:'] .codicon-info": {
      "color": "#60fdff !important",
      "font-weight": "bold",
    },

    // Status bar: Vim
    //  - Reorder
    ".statusbar #vscodevim\\.vim\\.primary": {
      "order": "9", // Last
    },

    // Status bar: Copilot Chat
    //  - Reorder
    ".statusbar #chat\\.statusBarEntry": {
      "order": "-1", // 3nd to last
    },

    // Status bar: Copilot Workspace
    //  - Reorder
    ".statusbar #github\\.copilot-workspace\\.copilot-workspace-vscode\\.statusBarItem": {
      "order": "-2", // 2nd to last
    },

    // Status bar: Notifications
    //  - Reorder
    ".statusbar #status\\.notifications": {
      "order": "-3", // Last (rightmost)
    },

    // Editor
    //  - Hack for missing color variable "editor.inactiveSelectionHighlightBackground" (see above: "Editor selection highlight")
    ".monaco-editor .selectionHighlight": {
      "background-color": "var(--vscode-editor-selectionHighlightBackground)",
    },

    // Terminals
    //  - Hide gutter
    ".monaco-workbench .xterm": {
      "padding-left": "3px !important", // Match editor first column
    },
    //  - Hide decorations (the ones I can't hide in settings)
    ".xterm-decoration.quick-fix": {
      "display": "none !important",
    },
    //  - Hide ruler
    ".xterm-decoration-overview-ruler": {
      "display": "none !important",
    },
    //  - Hide scrollbar
    //    - https://stackoverflow.com/a/38994837/397334
    ".xterm-viewport::-webkit-scrollbar": {
      "display": "none",
    },

    // Add border on focused editor/terminal pane
    //  - Bugs/gotchas
    //    - Use :focus in addition to .editor-group-container.active, because focusing other views (e.g. Explorer in the
    //      sidebar) doesn't de-.active the .editor-group-container
    //    - .notebook-editor and webview/iframe views doesn't make a :focus (bug?), and doesn't expose its own .focused/.focus
    //      state on .notebook-editor, so we rely on .active alone and let it incorrectly stay outlined when focus
    //      switches to Explorer/etc.
    //    - webview iframes use a weird dom indirection that looks like this:
    //      - <div class="editor-instance"><div id="webview-editor-element-$UID1" data-keybinding-context="$NUM" aria-flowto="$UID2" /></div>
    //      - <div class="monaco-workbench"><div id="$UID2" data-parent-flow-to-element-id="webview-editor-element-$UID1" ...>...</div>
    //    - z-index arms race because various things keep appearing with higher z-indexes ü§∑
    //  - Bottom/left/right
    //    - Handle top separately because the top of this .editor-group-container is below breadcrumbs, not above it
    ".editor-group-container.active:not(.empty):has(:focus, .notebook-editor, div[id^='webview-editor-element-'])::before": {
      "content": "''",
      "pointer-events": "none",
      "position": "absolute",
      "top": "0",
      "left": "0",
      "width": "calc(100% - 2px)",
      "height": "calc(100% - 1px)",
      "border-width": "0px 1px 1px 1px",
      "border-style": "solid",
      "border-color": "#fff",
      "z-index": "40", // z-index:40 to override terminal things (.xterm-screen has z-index:31)
    },
    //  - Top: Use the bottom of .tabs-and-actions-container, which is above breadcrumbs (and below tabs/actions)
    ".editor-group-container.active:not(.empty):has(:focus, .notebook-editor, div[id^='webview-editor-element-']) .tabs-and-actions-container::before": {
      "content": "''",
      "pointer-events": "none",
      "position": "absolute",
      "bottom": "0",
      "right": "0",
      "width": "100%",
      "height": "1px",
      "background-color": "#fff",
      "z-index": "40", // Match above, for simplicity
    },
    //  - Hack z-index to hide left/right overflow through tabs/actions (want it to stop after breadcrumbs)
    ".editor-group-container.active:not(.empty):has(:focus, .notebook-editor, div[id^='webview-editor-element-']) .tabs-and-actions-container": {
      "z-index": "41", // Bigger than z-index:40 above
    },

    // Disable underlines for detected links
    ".monaco-editor .detected-link": {
      "text-decoration": "inherit",
    },
    ".monaco-editor .detected-link-active": {
      "text-decoration": "inherit",
    },

    // Copilot Chat
    ".interactive-item-container .value .rendered-markdown p": {
      "line-height": "1.18em", // Tighter: 1.18em = 13px/11px (default: 1.5em)
    },

    // Git: Diff editor
    //  - Hide overview ruler + scrollbar (right margin)
    //    - Use .diffOverview to hide both of them (and whatever else is in that div)
    ".diffOverview": {
      "display": "none",
    },
    //  - In the overview ruler, move red/green above the scrollbar (preserve color) instead of below it (dimmed color)
    ".monaco-diff-editor .diffOverview .diffOverviewRuler": {
      "z-index": "11", // Above z-index:10 of the scrollbar (.diffOverview .diffViewport)
    },
    //  - Make negative areas solid instead of diagonal fill (e.g. what to show on left when lines added on right)
    ".monaco-editor .diagonal-fill": {
      "background-color": "var(--vscode-diffEditor-diagonalFill)",
      "background-image": "unset",
      "background-size": "unset",
    },
    //  - File header
    //    - Styling
    //      - Make the file headers _very_ obvious, so it's easy to visually scan across long diffs with many files
    //      - Remove some borders
    ".multiDiffEditor .multiDiffEntry .header .header-content": {
      "background": "#fff !important",
      "color": "#000 !important",
      "margin-top": "0px !important",
      "border": "0px !important",
    },
    ".multiDiffEditor .multiDiffEntry .header .header-content .codicon": {
      "color": "#000 !important",
    },
    ".multiDiffEditor .multiDiffEntry .editorParent": {
      "border-bottom": "0px !important",
    },
    //    - Reorder "file dir" -> "dir/file"
    ".multiDiffEditor .multiDiffEntry .header .file-path .title .monaco-icon-label-container": {
      "display": "flex",
    },
    ".multiDiffEditor .multiDiffEntry .header .file-path .title .monaco-icon-label-container .monaco-icon-name-container": {
      "order": "2",
    },
    ".multiDiffEditor .multiDiffEntry .header .file-path .title .monaco-icon-label-container .monaco-icon-name-container .label-name:not(:empty)::before": {
      "content": "'/'",
    },
    ".multiDiffEditor .multiDiffEntry .header .file-path .title .monaco-icon-label-container .monaco-icon-description-container": {
      "order": "1",
    },
    ".multiDiffEditor .multiDiffEntry .header .file-path .title .monaco-icon-label-container .monaco-icon-description-container .label-description": {
      "font-size": "inherit", // Not .9em
      "opacity": "inherit", // Not .7
      "margin-left": "0px", // Not .5em
    },
    //  - "Hidden lines"
    ".monaco-editor .diff-hidden-lines .center": {
      "background": "#404040 !important",
    },
    //  - Hide left margins: Split
    ".monaco-diff-editor.side-by-side .editor.original .monaco-editor .editor-scrollable": {
      // Split left: Editor
      // "left": "0px !important", // Nope, keep the left editor right aligned
    },
    ".monaco-diff-editor.side-by-side .editor.modified .monaco-editor .margin": {
      // Split right: Margin
      "display": "none !important",
    },
    ".monaco-diff-editor.side-by-side .editor.modified .monaco-editor .editor-scrollable": {
      // Split right: Editor
      "left": "0px !important",
    },
    ".monaco-diff-editor.side-by-side .editor.modified .monaco-editor .diff-hidden-lines .center a[title='Show Unchanged Region']": {
      // Split right: Expand button for "hidden lines"
      "display": "none !important",
    },
    //  - Hide left margins: Unified
    ".monaco-diff-editor:not(.side-by-side) .editor.original": {
      // Unified "left" is just a tiny width:5px margin on the left
      "display": "none !important",
    },
    ".monaco-diff-editor:not(.side-by-side) .editor.modified": {
      // Unified "right" is the actual unified editor with left:5px
      "left": "0px !important",
    },
    ".monaco-diff-editor:not(.side-by-side) .editor.modified .monaco-editor .diff-hidden-lines .center a[title='Show Unchanged Region']": {
      // Expand button for "hidden lines"
      "display": "none !important",
    },

    // Notebooks
    //  - Hide ruler
    ".notebook-editor .notebook-overview-ruler-container": {
      "display": "none",
    },
    //  - Hide folding arrows on markdown cells
    ".notebook-editor .notebook-folding-indicator": {
      "display": "none !important",
    },
    //  - Hide three dots on cell outputs
    ".notebook-editor .code-cell-row .output .cell-output-toolbar .codicon-toolbar-more": {
      "display": "none",
    },
    //  - Hide run buttons on cells
    //    - But don't hide the stop button -- helpful indication that the cell is running
    ".notebook-editor .code-cell-row .cell .run-button-container .codicon-notebook-execute": {
      "display": "none",
    },
    ".notebook-editor .code-cell-row .cell .run-button-container .codicon.notebook-cell-run-toolbar[aria-label='More...']": {
      "display": "none",
    },
    //  - Border (white) on selected cell
    //    - Coupled with workbench.colorCustomizations: "notebook.focusedCellBorder":"#0000"
    ".notebook-editor:focus-within .code-cell-row.focused.selected .cell-editor-part::before": {
      "outline": "solid 1px #fff",
    },
    //  - Border (blue) on selected cell in edit mode
    ".notebook-editor:focus-within .code-cell-row.focused.selected .cell-editor-focus .cell-editor-part::before": {
      "outline": "solid 1px #4f97d7",
    },
    ".notebook-editor:not(:focus-within) .code-cell-row.focused.selected .cell-editor-focus .cell-editor-part::before": {
      "outline-style": "solid !important", // Override dashed (when .notebook-editor loses focus while cell is in edit mode)
    },
    //  - Border (yellow) when a cell is running
    ".notebook-editor .code-cell-row .cell .cell-editor-part:has(.monaco-progress-container:not([aria-hidden='true']))::before": {
      "outline": "solid 1px #ffd966 !important", // Add !important to override blue border when cell has inputFocus
    },
    //  - Disable code folding controls in cell editors
    ".notebook-editor .code-cell-row .cell .cell-editor-part .margin .codicon-folding-expanded": {
      "display": "none",
    },
    //  - Move cell execution counter from bottom to top
    ".notebook-editor .code-cell-row .cell-focus-indicator-left .execution-count-label": {
      "top": "12.7px !important", // NOTE Must match zoomLevel
      "font-size": "12.7px !important", // NOTE Must match zoomLevel
      "line-height": "15px !important", // NOTE Must match zoomLevel
    },

  },
  "custom-ui-style.webview.stylesheet": {

    // Markdown Preview
    ".markdown-body ul": {
      "padding-inline-start": "2em",
    },
    //  - Override default WebView/iframe styles
    //    - https://github.com/microsoft/vscode/blob/main/extensions/markdown-language-features/media/markdown.css
    ".vscode-high-contrast.showEditorSelection .code-active-line:before": {
      "border-left-color": "#4f97d7b3 !important",
    },
    ".vscode-high-contrast.showEditorSelection .code-line:hover:before": {
      "border-left-color": "#4f97d7 !important",
    },

    // Notebooks
    //  - Border (gray) on outputs
    //  - Border (red) on error outputs
    //  - Adjust padding/margin on outputs
    ".cell_container .output_container .output": {
      "border": "1px solid #404040",
      // "padding": "0px !important", // Nope, keep this one
    },
    ".cell_container .output_container .output.error": {
      "border": "1px solid #ff6666",
      "box-shadow": "inset 0 1px 0 0 #ff6666", // HACK No room for top border (precomputed height), use inset instead
    },
    ".cell_container .output_container .output .data-table:has(.text-output)": { "padding": "0px !important", },
    ".cell_container .output_container .output .data-table .text-output":      { "padding": "0px !important", },
    ".cell_container .output_container .output .output_html":                  { "padding": "0px !important", },
    ".cell_container .output_container .output .display":                      { "padding": "0px !important", },
    //  - Don't wrap output text
    //  - Don't limit output lines (no scrolling)
    ".cell_container .output_container .output .text-output": { "white-space": "pre", "max-height": "inherit", },
    ".cell_container .output_container .output pre":          { "white-space": "pre", "max-height": "inherit", },
    ".cell_container .output_container .output code":         { "white-space": "pre", "max-height": "inherit", },
    ".cell_container .output_container .output kbd":          { "white-space": "pre", "max-height": "inherit", },
    ".cell_container .output_container .output samp":         { "white-space": "pre", "max-height": "inherit", },
    //  - Don't wrap text in df table cells
    ".cell_container .output_container .output .dataframe tr": { "white-space": "nowrap", },
    ".cell_container .output_container .output .dataframe th": { "white-space": "nowrap", "padding": "0px 8px", },
    ".cell_container .output_container .output .dataframe td": { "white-space": "nowrap", "padding": "0px 8px", },
    //  - Don't wrap text in other table cells (e.g. some logs present this way)
    ".cell_container .output_container .output .data-table":   { "white-space": "nowrap", },
    //  - Hide copy/save buttons on image/plot outputs
    ".cell_container .output_container .output button.plotIcon": {
      "display": "none",
      // (And here's a better styling if I want to re-enable any of them in the future)
      "background-color": "#000",
      "border": "1px solid #fff",
      "stroke": "#fff",
      "opacity": "0.5",
    },

  },

  // Anything below was automatically added by vscode
  "": "",

}
