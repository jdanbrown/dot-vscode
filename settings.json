// Tracking
//  - https://paper.dropbox.com/doc/atom-vscode--B_1pTajtClXUnlRg8vKINs~QAg-h1pVZyCsdouFUaDxCTofw
//
// Docs
//  - https://code.visualstudio.com/docs/getstarted/settings
//    - Big reference of all available commands
//
{

  // Workspace
  "window.newWindowDimensions": "inherit",
  "window.nativeFullScreen": false,
  "window.titleBarStyle": "native",
  "window.openFoldersInNewWindow": "on", // Else opening/reopening a workspace will overwrite the current window's workspace :/
  "workspace-path-status-bar.enable": false,
  "security.workspace.trust.untrustedFiles": "open",
  "workbench.reduceMotion": "on", // Disable animations
  "workbench.editor.focusRecentEditorAfterClose": false, // On closing an editor/terminal, focus neighboring tab instead of last-selected tab
  "files.refactoring.autoSave": false,

  // Fonts
  "workbench.fontAliasing": "default", // ("auto" was required for CGFontRenderingFontSmoothingDisabled, but not for -webkit-text-stroke-width)
  "editor.fontSize": 11,
  "editor.lineHeight": 13,
  "editor.fontFamily": "Consolas",
  // "editor.fontWeight": "bold",

  // Explorer
  "workbench.list.defaultFindMatchType": "contiguous",

  // Indent/tabs
  //  - https://code.visualstudio.com/docs/editor/codebasics#_indentation
  "editor.detectIndentation": false, // So we can override editor.tabSize in "[foo]" filetypes below
  "editor.tabSize": 2,
  "editor.insertSpaces": true,

  // Editor
  //  - FIXME vim L/H keeps scrolling down/up if you repeat it: https://github.com/VSCodeVim/Vim/issues/1393
  //    - 0 fixes H, but L still scrolls down by 1
  "editor.cursorSurroundingLines": 0,

  // Completions
  //  - https://github.com/microsoft/vscode/issues/76322
  "editor.wordBasedSuggestions": true, // Complete on any word -- only if no other provider has a completion
  "editor.quickSuggestions": {
    "comments": true, // Complete in comments
    "strings": true, // Complete in strings
    "other": true, // ?
  },

  // Hide gutter (editor left margin)
  //  - https://github.com/microsoft/vscode/issues/30795
  //  - https://github.com/microsoft/vscode/issues/12543
  "editor.lineNumbers": "off",
  "editor.glyphMargin": false,
  "editor.folding": false,
  "editor.lineNumbersMinChars": 0,  // Undocumented
  "editor.lineDecorationsWidth": 3, // Undocumented

  // Hide scrollbars + some bits of overview ruler
  //  - https://github.com/microsoft/vscode/issues/35454 — Disable fading scrollbars
  //  - https://github.com/microsoft/vscode/issues/66000 — Scroll bar visibility should be configurable
  //  - https://github.com/microsoft/vscode/issues/98632 — Add option `editor.scrollbar.vertical/horizontal` as official
  //  - https://github.com/microsoft/vscode/issues/28653 — Feature: Setting to hide Vertical Scroll-Bar when the Minimap is Visible
  //  - https://github.com/microsoft/vscode/issues/85418 — Disable overview ruler entirely
  // "editor.scrollbar.verticalScrollbarSize": 0, // Hides scrollbar, but also hides overview ruler
  // "editor.scrollbar.horizontalScrollbarSize": 0,
  "editor.scrollbar.vertical": "hidden", // Hides scrollbar and leaves overview ruler shown
  "editor.scrollbar.horizontal": "hidden",
  "editor.hideCursorInOverviewRuler": true,
  // "editor.overviewRulerBorder": false,
  // "terminal.integrated.scrollbar.vertical": "hidden", // NOTE No such setting, handled in css

  // Disable decorating colors values (#rgb) with color swatches
  //  - Because it's slow to open the editor, or even to add/remove text around them
  "editor.colorDecorators": false,

  // Terminal
  "terminal.integrated.defaultLocation": "editor", // Woo!
  // NOTE This all moved to init.ts
  // "terminal.integrated.defaultProfile.osx": "tmux-new-or-attach-vscode-term-uid",
  // "terminal.integrated.profiles.osx": {
  //   "tmux-new-or-attach-vscode-term-uid": {
  //     "path": "tmux-new-or-attach-vscode-term-uid", // NOTE Requires "terminal.integrated.inheritEnv":true (default)
  //     "args": [],
  //   },
  // },
  "terminal.integrated.fontSize": 11,
  "terminal.integrated.fontWeight": "bold",
  // "terminal.integrated.fontWeightBold": "bold",
  "terminal.integrated.allowChords": false,
  "terminal.integrated.rightClickBehavior": "default",
  "terminal.external.osxExec": "iTerm.app",
  "terminal.integrated.showExitAlert": false,
  "terminal.integrated.tabs.title": "${cwdFolder}/",
  // "terminal.integrated.tabs.title": "${cwd}",
  // "terminal.integrated.tabs.title": "${process}",
  // "terminal.integrated.tabs.title": "term",
  // "terminal.integrated.tabs.title": "bash",
  // "terminal.integrated.tabs.title": "#",
  // "terminal.integrated.tabs.description": "${task}${separator}${local}${separator}${cwdFolder}",
  "terminal.integrated.tabs.description": "",
  "terminal.integrated.confirmOnKill": "always",
  "terminal.integrated.confirmOnExit": "always",
  "terminal.integrated.scrollback": 10000,
  "terminal.integrated.persistentSessionScrollback": 10000,
  "terminal.integrated.commandsToSkipShell": [
    "workbench.action.toggleKeybindingsLog"
  ],

  // GitLens
  "gitlens.showWelcomeOnInstall": false,
  "gitlens.showWhatsNewAfterUpgrades": false,
  "gitlens.currentLine.enabled": false,

  // NOTE Disabled because it adds spelling errors to the Problems list, which is too noisy
  //  - Instead, manually use alfred 'spell' -- which actually has a really great interactive mode!
  // // Spell Checker
  // //  - https://streetsidesoftware.com/vscode-spell-checker/
  // // "cSpell.enabled": false, // To disable without reload/restart
  // "cSpell.showStatus": false,
  // "cSpell.checkOnlyEnabledFileTypes": false,
  // "cSpell.showAutocompleteSuggestions": true,
  // "cSpell.hideAddToDictionaryCodeActions": true,

  // Project Manager
  //  - https://github.com/alefragnani/vscode-project-manager
  "projectManager.openInNewWindowWhenClickingInStatusBar": true,
  "projectManager.supportSymlinksOnBaseFolders": true,
  "projectManager.git.baseFolders": [
    "~/hack"
  ],

  // Symbols
  "outline.showArrays": false,
  "outline.showBooleans": false,
  "outline.showConstants": false,
  "outline.showEnumMembers": false,
  "outline.showFields": false,
  "outline.showNull": false,
  "outline.showNumbers": false,
  "outline.showProperties": false,
  "outline.showStrings": false,
  "outline.showVariables": false,

  // Emoji/unicode
  //  - https://github.com/brunnerh/insert-unicode -- shift+cmd+i
  //  - https://github.com/mattbierner/vscode-emojisense -- cmd+i
  //    - TODO Remove emojisense if insert-unicode adds a command to insert emoji only
  //      - https://github.com/brunnerh/insert-unicode/issues/43
  //      - insert-unicode has better usability (recents, favorites, etc.)
  "emojisense.languages": {"*": true},

  // Highlight
  //  - https://github.com/fabiospampinato/vscode-highlight
  "highlight.regexFlags": "g", // Default: "gi"
  "highlight.regexes": {
    "\\b(TODO|FIXME|XXX|HACK|NOTE|WARNING)\\b": {
      "decorations": [{"color": "#ff6e67", "fontWeight": "bold"}], // Same as "terminal.ansiBrightRed" (above)
    },
    "(\\t)": {
      "decorations": [{"backgroundColor": "#ff6e67"}], // Same as "terminal.ansiBrightRed" (above)
      "filterFileRegex": ".*(?<!Makefile|.go)$",
    },
  },

  // Colorize
  //  - https://github.com/kamikillerto/vscode-colorize
  //  - Enable selectively, else editors with color highlights will become veeery slow at basic scrolling/typing
  //  - No, definitely don't crawl all files: https://github.com/KamiKillertO/vscode-colorize/issues/174
  "colorize.enable_search_variables": false,
  //  - Don't hide colors on active line (doesn't make typing any faster, unfortunately)
  "colorize.hide_current_line_decorations": false,
  //  - Don't enable for any language by default (use selective file includes instead)
  "colorize.languages": [],
  //  - Only enable very selectively for these files
  "colorize.include": [
    // The Color Theme guide says that *-color-theme.json files get colors by default, but I don't see any
    //  - https://code.visualstudio.com/api/extension-guides/color-theme
    // "**/*-color-theme.json",
    // Enable my old atom syntax style files until I'm done migrating from them
    // "**/atom-jdanbrown-syntax/styles/*.less",
    // Toggle this when editing colors in this file (don't leave on all the time else it's insanely slow)
    // "**/settings.json",
  ],

  // Filetypes
  "[markdown]": {
    "editor.quickSuggestions": {
      "comments": "off",
      "strings": "off",
      "other": "off"
    },
    "editor.wordWrap": "off",
    "editor.wrappingIndent": "indent"
  },
  "[jupyter]": {
    "editor.tabSize": 4,
  },
  "[python]": {
    "editor.tabSize": 4,
  },
  "[dart]": {
    //
    // From [where? -- did I add these?]
    //
    "editor.insertSpaces": true,
    "editor.detectIndentation": false,
    "editor.suggest.insertMode": "replace",
    //
    // From dart: https://dartcode.org/docs/recommended-settings/
    //
    // Automatically format code on save and during typing of certain characters
    // (like `;` and `}`).
    // "editor.formatOnSave": true,
    // "editor.formatOnType": true,
    // Draw a guide line at 80 characters, where Dart's formatting will wrap code.
    // "editor.rulers": [80],
    // XXX Nope, I want "editor.selectionHighlight"!
    // // Disables built-in highlighting of words that match your selection. Without
    // // this, all instances of the selected text will be highlighted, interfering
    // // with Dart's ability to highlight only exact references to the selected variable.
    // "editor.selectionHighlight": false,
    // By default, VS Code prevents code completion from popping open when in
    // "snippet mode" (editing placeholders in inserted code). Setting this option
    // to `false` stops that and allows completion to open as normal, as if you
    // weren't in a snippet placeholder.
    "editor.suggest.snippetsPreventQuickSuggestions": false,
    // By default, VS Code will pre-select the most recently used item from code
    // completion. This is usually not the most relevant item.
    //
    // "first" will always select top item
    // "recentlyUsedByPrefix" will filter the recently used items based on the
    //     text immediately preceding where completion was invoked.
    "editor.suggestSelection": "first",
    // Allows pressing <TAB> to complete snippets such as `for` even when the
    // completion list is not visible.
    "editor.tabCompletion": "onlySnippets",
  },

  // Python
  "python.showStartPage": false,
  "python.languageServer": "Pylance",
  "python.analysis.typeCheckingMode": "strict",
  "python.terminal.activateEnvironment": false,
  "jupyter.interactiveWindow.viewColumn": "beside",

  // Dart
  //  - https://dartcode.org/docs/recommended-settings/
  "debug.openDebug": "openOnDebugBreak",
  "dart.closingLabels": false,
  "dart.lineLength": 120,
  "dart.showTodos": false,

  // Allow trailing commas in ~/.code/*.json
  //  - https://github.com/microsoft/vscode/issues/102061
  "json.schemas": [
    {
      "fileMatch": [
        ".code/keybindings.json",
        ".code/settings.json",
      ],
      "schema": {
        "allowTrailingCommas": true
      }
    },
  ],

  // vim
  //  - https://github.com/VSCodeVim/Vim
  //  - https://galenwong.github.io/blog/2021-03-22-vscode-neovim-vs-vscodevim/
  //
  //  - Basics
  "vim.disableAnnoyingNeovimMessage": true,
  "vim.hlsearch": true,
  "vim.leader": ",",
  "vim.mouseSelectionGoesIntoVisualMode": false,
  "vim.showmodename": false,
  "vim.textwidth": 120,
  "vim.visualstar": true,
  "vim.joinspaces": false,
  // ReplaceWithRegister
  //  - https://github.com/VSCodeVim/Vim#replacewithregister
  //  - yank -> gr<motion> to paste
  //  - TODO(practice)
  "vim.replaceWithRegister": true,
  //  - Cursor style
  "vim.cursorStylePerMode.visual": "underline-thin",
  "vim.cursorStylePerMode.visualblock": "underline-thin",
  "vim.cursorStylePerMode.visualline": "underline-thin",
  //  - Find/search highlight
  "vim.searchHighlightColor": "#ff0d", // Need a little transparency else I can't see the cursor as I next/prev
  "vim.searchHighlightTextColor": "#000",
  "vim.searchMatchColor": "#fff", // Color for the first match while typing before hitting enter (short lived)
  "vim.searchMatchTextColor": "#000",
  "vim.normalModeKeyBindingsNonRecursive": [

    // XXX No actually, this makes vim undo/redo behave really weird, with the wrong granularity of edits
    //  - iiuc these issues are about weirdness when you _mix_ vim u/^R with vscode cmd+z/shift+cmd+z, so let's just not do that
    // // Avoid vscode-vim's separate undo/redo stack, use vscode's instead
    // //  - https://github.com/VSCodeVim/Vim/issues/1490#issuecomment-352167221
    // //  - https://github.com/VSCodeVim/Vim/issues/2007
    // {"before": ["u"], "commands": ["undo"]},
    // {"before": ["<c-r>"], "commands": ["redo"]},

    // Clear search on esc
    {"before": ["<esc>"], "after": ["<esc>"], "commands": [":nohl", ":"]},
    //  - Also on \\ (old habits die hard)
    {"before": ["\\", "\\"], "commands": [":nohl", "highlightwords.removeAllHighlights"]},

    // Save
    {"before": [",", ","], "commands": ["workbench.action.files.save"]},

    // Indent/unindent
    //  - NOTE <s-tab> broken until https://github.com/VSCodeVim/Vim/issues/4719
    {"before": ["<tab>"], "commands": ["editor.action.indentLines"]},
    {"before": ["<shift+tab>"], "commands": ["editor.action.outdentLines"]},

    // Comment
    {"before": ["\\", "c"], "after": ["g", "c"]},

    // ctrl-space to show hover (like gh)
    // {"before": ["<c-space>"], "commands": ["editor.action.showHover"]},

    // Go to / Search
    {"before": [",", "a"], "after": ["v", "i", "w"], "commands": ["search.action.openNewEditorToSide"]},
    {"before": [",", "A"], "commands": ["editor.action.goToReferences"]},

  ],
  "vim.visualModeKeyBindingsNonRecursive": [

    // Clipboard
    {"before": ["Y"], "after": ["\"", "+", "y"]},

    // Indent/unindent
    //  - NOTE <s-tab> broken until https://github.com/VSCodeVim/Vim/issues/4719
    {"before": ["<tab>"], "commands": ["editor.action.indentLines"]},
    {"before": ["<shift+tab>"], "commands": ["editor.action.outdentLines"]},

    // Shrink/expand selection
    //  - https://code.visualstudio.com/docs/editor/codebasics#_shrinkexpand-selection
    //  - TODO(practice)
    {"before": ["o"], "commands": ["editor.action.smartSelect.expand"]},
    {"before": ["O"], "commands": ["editor.action.smartSelect.shrink"]},

  ],

  // multi-commands
  "multiCommand.commands": [

    // Notebook
    {
      "command": "multiCommand.notebook.cell.edit.InsertMode",
      "sequence": ["notebook.cell.edit", "extension.vim_insert"],
    },

    // Scrolling
    //  - HACK Works! (a little janky)
    {"command": "multiCommand:notebook.cell.quitEdit_scrollDown", "sequence": ["notebook.cell.quitEdit", "list.scrollDown"]},
    {"command": "multiCommand:notebook.cell.quitEdit_scrollUp", "sequence": ["notebook.cell.quitEdit", "list.scrollUp"]},
    {"command": "multiCommand:notebook.cell.quitEdit_scrollPageDown", "sequence": ["notebook.cell.quitEdit", "multiCommand.list.scrollPageDown"]},
    {"command": "multiCommand:notebook.cell.quitEdit_scrollPageUp", "sequence": ["notebook.cell.quitEdit", "multiCommand.list.scrollPageUp"]},
    {
      "command": "multiCommand.list.scrollPageDown",
      "sequence": [
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
        "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown", "list.scrollDown",
      ],
    },
    {
      "command": "multiCommand.list.scrollPageUp",
      "sequence": [
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
        "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp", "list.scrollUp",
      ],
    },

  ],

  // Colors
  //  - See all keys w/ default values: "Developer: Generate Color Theme From Current Settings"
  //  - https://code.visualstudio.com/api/references/theme-color
  //  - Inspiration for colors (high-contrast dark)
  //    - https://glitchbone.github.io/vscode-base16-term/#/3024
  //    - https://glitchbone.github.io/vscode-base16-term/#/isotope
  //    - https://glitchbone.github.io/vscode-base16-term/#/summerfruit-dark
  //    - https://glitchbone.github.io/vscode-base16-term/#/google-dark
  //    - https://glitchbone.github.io/vscode-base16-term/#/spacemacs
  //  - Tools for converting rgba->rgb<->hsl
  //    - https://rgbacolorpicker.com/rgba-to-hex
  //      - e.g. rgba(255,106,105,0.3) -> #ff6a694d
  //    - https://colordesigner.io/convert/hsltohex
  //      - e.g. show rgba -> truncate to rbg -> convert to hsl -> tune lightness -> diff tuned tab color with original rgba color
  //  - My classic colors
  //    - #777777 -black
  //    - #6871ff -blue
  //    - #60fdff -cyan
  //    - #5ffa68 -green
  //    - #ff77ff -magenta
  //    - #ff6e67 -red
  //    - #ffffff -white
  //    - #fffc67 -yellow
  "workbench.colorCustomizations": {

    "bookmarks.overviewRuler": "#0000", // Disable

    "contrastActiveBorder": "#0000", // Disable
    // "contrastBorder": "#777",
    "contrastBorder": "#404040",

    // Git diff
    //  - Red/green color samples from a github commit with "Dark high contrast" (https://github.com/settings/appearance)
    //    - Green: #09b43a (text), #26cd4d4d (line)
    //    - Red:   #ff6a69 (text), #ff6a694d (line)
    //  - Red/green color samples: Atom colors w/ scaled HSL lightness
    //    - Green: #2d571a (atom, dark) -> #4b8c30 (bright) -> #6cc644 (very bright)
    //    - Red:   #910000 (atom, dark) -> #a62c2e (bright) -> #ff4444 (very bright)
    // "diffEditor.border": "#404040", // (Default, from "contrastBorder")
    "diffEditor.diagonalFill": "#373b41", // Default: Some gray color w/ diagonal lines -- changed to solid in css below
    "diffEditor.insertedLineBackground": "#105620", // Github line rgba (#26cd4d4d) -> fiddle with hsl to get matching rgb with no alpha
    "diffEditor.insertedTextBackground": "#09b43abb", // Github text + alpha
    "diffEditor.removedLineBackground": "#712a2b", // Github line rgba (#ff6a694d) -> fiddle with hsl to get matching rgb with no alpha
    "diffEditor.removedTextBackground": "#ff6a6988", // Github text + alpha
    "diffEditorOverview.insertedForeground": "#09b43a", // Github text
    "diffEditorOverview.removedForeground":  "#ff6a69", // Github text
    "diffEditor.insertedTextBorder": "#0000", // Default: #33ff2e
    "diffEditor.removedTextBorder": "#0000",  // Default: #ff008f
    // "diffEditor.move.border": "#8b8b8b9c",     // When does move happen? (haven't seen them yet)
    // "diffEditor.moveActive.border": "#ffa500", // When does move happen? (haven't seen them yet)
    // "diffEditorGutter.insertedLineBackground": null, // Don't care about the gutter (and I don't see them with gutter on anyway)
    // "diffEditorGutter.removedLineBackground": null,  // Don't care about the gutter (and I don't see them with gutter on anyway)

    "editor.background": "#000000",
    "editor.foreground": "#ffffff",

    // Editor find/search highlight
    //  - NOTE This is for cmd+f, vim '/' is set by "vim.searchHighlightColor"
    "editor.findMatchBackground": "#ff0", // Focused match
    "editor.findMatchBorder": "#0000", // Focused match
    "editor.findMatchHighlightBackground": "#ff0d", // All other matches (like "vim.searchHighlightColor")
    "editor.findMatchHighlightBorder": "#0000", // All other matches

    "editorGutter.background": "#000",

    // Editor selection + selection highlight (other text that matches selection)
    "editor.selectionBackground": "#fff", // Selected text
    "editor.inactiveSelectionBackground": "#fff", // (Default: Adds transparency on lost focus -- don't want)
    "editor.selectionHighlightBackground": "#fff8", // All other text that matches selected text
    "editor.selectionHighlightBorder": "#0000",
    //  - No variable for this one, set below in css (".monaco-editor .selectionHighlight")
    // "editor.inactiveSelectionHighlightBackground": "#fff8", // (Default: Adds transparency on lost focus -- don't want)

    // Accent/highlight color in a _lot_ of places
    //  - e.g. autocomplete fuzzy text matching -- need a color muted enough so it doesn't burn your eyes here (99% case, always typing)
    //  - e.g. cmd-p fuzzy text matching -- need a color bright enough that it catches your eyes here (e.g. sparse char matches)
    //  - e.g. borders in focused UI widgets (e.g. settings) -- secondary concern to the above
    // "focusBorder": "#f38518", // Default orange from hcDark theme -- I don't like this orange everywhere (e.g. autocomplete)
    "focusBorder": "#4f97d7", // Blue from spacemacs -- muted enough to not burn my eyes in autocomplete as I type (99% case)
    // "focusBorder": "#01a0e4", // Blue from 3024 -- nicely bright, but a little too eye-burning for autocomplete as I type
    // "focusBorder": "#01a252", // Green from 3024 -- good alternate choice if I ever get tired of blue
    //  - Manually fix all residual orange (#f38518), from: "Developer: Generate Color Theme From Current Settings"
    "editor.lineHighlightBorder": "#4f97d7",
    "listFilterWidget.outline": "#4f97d7",
    "terminalOverviewRuler.findMatchForeground": "#4f97d7",

    "gitDecoration.addedResourceForeground": "#5ffa68", // New staged
    "gitDecoration.conflictingResourceForeground": "#ff6e67",
    "gitDecoration.deletedResourceForeground": "#ff77ff",
    "gitDecoration.ignoredResourceForeground": "#686868",
    "gitDecoration.modifiedResourceForeground": "#de935f",
    "gitDecoration.stageDeletedResourceForeground": "#ff77ff",
    "gitDecoration.stageModifiedResourceForeground": "#de935f",
    "gitDecoration.submoduleResourceForeground": "#8db9e2", // (Leave as default)
    "gitDecoration.untrackedResourceForeground": "#5ffa68", // New unstaged

    // Explorer
    //  - TODO "list.activeSelectionForeground": How to keep git decoration color instead of changing to white?
    //  - TODO "list.activeSelectionBackground": How to change to "list.focusBackground" when they overlap?
    "list.activeSelectionBackground": "#404040",
    "list.inactiveFocusBackground": "#0000",
    "list.inactiveSelectionBackground": "#404040",
    "list.focusBackground": "#666",
    "list.hoverBackground": "#666",

    // List find/search highlight (Explorer)
    "list.filterMatchBackground": "#ff0d", // Like "vim.searchHighlightColor"
    "list.filterMatchBorder": "#0000",

    "quickInputList.focusBackground": "#404040",

    // Search Editor find/search highlight
    "searchEditor.findMatchBackground": "#ff0d", // Like "vim.searchHighlightColor"
    "searchEditor.findMatchBorder": "#0000",

    "selection.background": "#008000",

    "settings.focusedRowBorder": "#a6a6a6", // Override focusBorder (blue -> gray)

    "statusBar.background": "#404040",
    "statusBar.foreground": "#a6a6a6",
    "statusBarItem.remoteBackground": "#0000",

    // "tab.activeBackground": "#404040", // Don't highlight background of active tab, only foreground (like atom)
    "tab.activeBackground": "#666", // Do highlight background of active tab (I think this is better than atom)
    "tab.activeForeground": "#fff",
    "tab.border": "#0000",
    // "tab.hoverBackground": "#404040",
    "tab.hoverBackground": "#666",
    "tab.hoverForeground": "#fff",
    // "tab.inactiveBackground": "#404040",
    // "tab.inactiveBackground": "#000",
    // "tab.inactiveForeground": "#fff",
    // "tab.inactiveForeground": "#777",
    "tab.inactiveForeground": "#a6a6a6",
    "tab.inactiveModifiedBorder": "#0000",
    // "tab.unfocusedActiveBackground": "#404040",
    "tab.unfocusedActiveBackground": "#404040",
    "tab.unfocusedActiveForeground": "#fff",
    // "tab.unfocusedActiveForeground": "#a6a6a6",
    "tab.unfocusedActiveModifiedBorder": "#0000",
    // "tab.unfocusedHoverBackground": "#404040",
    "tab.unfocusedHoverBackground": "#666",
    "tab.unfocusedHoverForeground": "#fff",
    // "tab.unfocusedInactiveBackground": "#404040",
    // "tab.unfocusedInactiveBackground": "#000",
    // "tab.unfocusedInactiveForeground": "#777",
    // "tab.unfocusedInactiveForeground": "#fff",
    "tab.unfocusedInactiveForeground": "#a6a6a6",
    "tab.unfocusedInactiveModifiedBorder": "#0000",

    // Terminal
    //  - https://code.visualstudio.com/api/references/theme-color#integrated-terminal-colors
    //  - https://glitchbone.github.io/vscode-base16-term
    //  - My classic colors
    //    - #777777 -black
    //    - #6871ff -blue
    //    - #60fdff -cyan
    //    - #5ffa68 -green
    //    - #ff77ff -magenta
    //    - #ff6e67 -red
    //    - #ffffff -white
    //    - #fffc67 -yellow
    "terminal.background": "#000000",
    "terminal.foreground": "#ffffff",
    "terminal.ansiBrightBlack": "#777777",
    "terminal.ansiBrightBlue": "#6871ff",
    "terminal.ansiBrightCyan": "#60fdff",
    "terminal.ansiBrightGreen": "#5ffa68",
    "terminal.ansiBrightMagenta": "#ff77ff",
    "terminal.ansiBrightRed": "#ff6e67",
    "terminal.ansiBrightWhite": "#ffffff",
    "terminal.ansiBrightYellow": "#fffc67",
    "terminal.ansiBlack": "#777777",
    "terminal.ansiBlue": "#6871ff",
    "terminal.ansiCyan": "#60fdff",
    "terminal.ansiGreen": "#5ffa68",
    "terminal.ansiMagenta": "#ff77ff",
    "terminal.ansiRed": "#ff6e67",
    "terminal.ansiWhite": "#ffffff",
    "terminal.ansiYellow": "#fffc67",

    // Terminal find/search highlight
    //  - NOTE Must Reload Window (ctrl+cmd+r) for these colors to update in active terminals (probably a bug)
    "terminal.findMatchBackground": "#ff0", // Focused match
    "terminal.findMatchBorder": "#ff0", // Focused match
    "terminal.findMatchHighlightBackground": "#ff0d", // All other matches (like "vim.searchHighlightColor")
    "terminal.findMatchHighlightBorder": "#0000", // All other matches

    // Links
    "editorLink.activeForeground": "#4f97d7", // Default: #00ffff
    "notificationLink.foreground": "#4f97d7", // Default: #3794ff
    "textLink.foreground": "#4f97d7", // Default: #3794ff
    "textLink.activeForeground": "#4f97d7", // Default: #3794ff

  },

  // Custom syntax colors
  //  - TODO TODO
  //  - Docs
  //    - https://code.visualstudio.com/api/extension-guides/color-theme
  //    - https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide
  //    - https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide
  //    - https://code.visualstudio.com/api/references/theme-color
  //  - Schema reference (w/ all scope names)
  //    - https://github.com/wraith13/vscode-schemas/blob/master/en/v1.82.2/schemas/color-theme.json
  //    - https://github.com/wraith13/vscode-schemas/blob/master/en/v1.82.2/schemas/token-styling.json -- semanticTokenColorCustomizations
  //    - https://github.com/wraith13/vscode-schemas/blob/master/en/v1.82.2/schemas/textmate-colors.json -- tokenColorCustomizations
  //  - My atom syntax colors
  //    - https://github.com/jdanbrown/atom-jdanbrown-syntax/blob/master/styles/colors.less
  //    - https://github.com/jdanbrown/atom-jdanbrown-syntax/blob/master/styles/syntax-variables.less
  //    - https://github.com/jdanbrown/atom-jdanbrown-syntax/blob/master/styles/base.less
  //  - My classic colors
  //    - #777777 -black
  //    - #6871ff -blue
  //    - #60fdff -cyan
  //    - #5ffa68 -green
  //    - #ff77ff -magenta
  //    - #ff6e67 -red
  //    - #ffffff -white
  //    - #fffc67 -yellow
  //  - Use semantic highlighting when it's available, and fallback to syntax highlighting when it's not
  //    - https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide
  // //    - XXX Actually nvm, I don't think I like semantic highlighting at all, disable it
  // //      - (It can also be disabled per language, if I ever want it in some languages but not others)
  // "editor.semanticHighlighting.enabled": false,
  "editor.semanticTokenColorCustomizations": {
    "rules": {

      // Standard
      //  - https://code.visualstudio.com/api/language-extensions/semantic-highlight-guide
      "class":         {"foreground": "#60fdff", "fontStyle": "bold"},
      "comment":       {"foreground": "#777777", "fontStyle": "bold"},
      "decorator":     {"foreground": "#60fdff", "fontStyle": "bold"},
      "enum":          {"foreground": "#60fdff", "fontStyle": "bold"},
      "enumMember":    {"foreground": "#ff77ff", "fontStyle": "bold"},
      "event":         {"foreground": "#60fdff", "fontStyle": "bold"},
      "function":      {"foreground": "#60fdff", "fontStyle": "bold"},
      "interface":     {"foreground": "#60fdff", "fontStyle": "bold"},
      "keyword":       {"foreground": "#fffc67", "fontStyle": "bold"},
      "label":         {"foreground": "#fffc67", "fontStyle": "bold"},
      "macro":         {"foreground": "#6871ff", "fontStyle": "bold"},
      "method":        {"foreground": "#60fdff", "fontStyle": "bold"},
      "namespace":     {"foreground": "#ffffff", "fontStyle": ""},
      "number":        {"foreground": "#ff77ff", "fontStyle": "bold"},
      "operator":      {"foreground": "#fffc67", "fontStyle": "bold"},
      "parameter":     {"foreground": "#ffffff", "fontStyle": ""},
      "property":      {"foreground": "#ffffff", "fontStyle": ""},
      "regexp":        {"foreground": "#ff77ff", "fontStyle": "bold"},
      "string":        {"foreground": "#ff77ff", "fontStyle": "bold"},
      "struct":        {"foreground": "#60fdff", "fontStyle": "bold"},
      "type":          {"foreground": "#60fdff", "fontStyle": "bold"},
      "typeParameter": {"foreground": "#ffffff", "fontStyle": ""},
      "variable":      {"foreground": "#ffffff", "fontStyle": ""},

      // Python
      //  - https://github.com/microsoft/pylance-release
      "*.typeHint:python":       {"foreground": "#fffc67", "fontStyle": "bold"},
      "clsParameter:python":     {"foreground": "#60fdff", "fontStyle": "bold"},
      "intrinsic:python":        {"foreground": "#ffffff", "fontStyle": ""},
      "magicFunction:python":    {"foreground": "#60fdff", "fontStyle": "bold"}, // (dunder methods)
      "member:python":           {"foreground": "#ffffff", "fontStyle": ""},
      "module:python":           {"foreground": "#ffffff", "fontStyle": ""},
      "selfParameter:python":    {"foreground": "#60fdff", "fontStyle": "bold"},

    },
  },
  //  - Use semantic highlighting when it's available, and fallback to syntax highlighting when it's not
  //    - https://code.visualstudio.com/api/language-extensions/syntax-highlight-guide
  "editor.tokenColorCustomizations": {
    "textMateRules": [

      {"scope": "comment",                                                  "settings": {"foreground": "#777777", "fontStyle": "bold"}},
      {"scope": "constant.character",                                       "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "constant.language",                                        "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "constant.numeric",                                         "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "constant.other.caps",                                      "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "constant.other.color.rgb-value",                           "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "constant.other.option",                                    "settings": {"foreground": "#ffffff", "fontStyle": ""}}, // shellscript
      {"scope": "constant.other.rgb-value",                                 "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "constant.regexp",                                          "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "constant.sha.git-rebase",                                  "settings": {"foreground": "#777777", "fontStyle": "bold"}},
      {"scope": "emphasis",                                                 "settings": {"fontStyle": "italic"}},
      {"scope": "entity.name.class",                                        "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "entity.name.command.shell",                                "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "entity.name.function",                                     "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "entity.name.namespace",                                    "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "entity.name.scope-resolution",                             "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "entity.name.tag",                                          "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "entity.name.type",                                         "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "entity.name.variable",                                     "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "entity.other.attribute-name.attribute",                    "settings": {"foreground": "#ffffff", "fontStyle": "bold"}},
      {"scope": "entity.other.attribute-name.css",                          "settings": {"foreground": "#5ffa68", "fontStyle": "bold"}},
      {"scope": "entity.other.attribute-name.class.css",                    "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "entity.other.attribute-name.class.mixin.css",              "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "entity.other.attribute-name.id.css",                       "settings": {"foreground": "#5ffa68", "fontStyle": "bold"}},
      {"scope": "entity.other.attribute-name.parent-selector.css",          "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "entity.other.attribute-name.pseudo-class.css",             "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "entity.other.attribute-name.pseudo-element.css",           "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "entity.other.inherited-class",                             "settings": {"foreground": "#5ffa68", "fontStyle": "bold"}},
      {"scope": "invalid",                                                  "settings": {"foreground": "#ff6e67", "fontStyle": "bold"}},
      {"scope": "keyword",                                                  "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.control",                                          "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.control.import",                                   "settings": {"foreground": "#6871ff", "fontStyle": "bold"}},
      {"scope": "keyword.operator",                                         "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.cast",                                    "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.expression",                              "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.logical",                                 "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.logical.python",                          "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.new",                                     "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.sizeof",                                  "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.type",                                    "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.operator.type.annotation",                         "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "keyword.other.operator",                                   "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "keyword.other.unit",                                       "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "keyword.other.using",                                      "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "markup.bold",                                              "settings": {"fontStyle": "bold"}},
      {"scope": "markup.changed",                                           "settings": {"foreground": "#6871ff", "fontStyle": "bold"}},
      {"scope": "markup.deleted",                                           "settings": {"foreground": "#ff6e67", "fontStyle": "bold"}},
      {"scope": "markup.heading",                                           "settings": {"foreground": "#5ffa68", "fontStyle": "bold"}},
      {"scope": "markup.inline.raw.string.markdown",                        "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "markup.inserted",                                          "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "markup.italic",                                            "settings": {"fontStyle": "italic"}},
      {"scope": "markup.strikethrough",                                     "settings": {"fontStyle": "strikethrough"}},
      {"scope": "markup.underline",                                         "settings": {"fontStyle": "underline"}},
      {"scope": "meta.definition.variable.name",                            "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "meta.diff.header",                                         "settings": {"foreground": "#777777", "fontStyle": "bold"}},
      {"scope": "meta.embedded",                                            "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "meta.function-call",                                       "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "meta.function-call.arguments",                             "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "meta.function-call punctuation",                           "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      // {"scope": "meta.function.parameters.python",                          "settings": {"foreground": "#fffc67", "fontStyle": ""}}, // Types on function args
      // {"scope": "meta.function.parameters.python support.type",             "settings": {"foreground": "#fffc67", "fontStyle": ""}}, // Types on function args
      {"scope": "meta.embedded.assembly",                                   "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "meta.object-literal.key",                                  "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "meta.preprocessor",                                        "settings": {"foreground": "#6871ff", "fontStyle": "bold"}},
      {"scope": "meta.preprocessor.numeric",                                "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "meta.preprocessor.string",                                 "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "meta.resultLinePrefix.contextLinePrefix.search",           "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "meta.return-type",                                         "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "meta.template.expression",                                 "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "meta.type.cast.expr",                                      "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "meta.type.new.expr",                                       "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "punctuation.definition.arguments",                         "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "punctuation.definition.comment",                           "settings": {"foreground": "#777777", "fontStyle": "bold"}},
      {"scope": "punctuation.definition.list.begin.markdown",               "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "punctuation.definition.parameters",                        "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      // FIXME These highlights markdown `[x]` but not `[ ]` (and it incorrectly highlights `[foo]`)
      // {"scope": "punctuation.definition.string.begin.markdown",             "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      // {"scope": "punctuation.definition.string.end.markdown",               "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "punctuation.definition.tag",                               "settings": {"foreground": "#777777", "fontStyle": "bold"}},
      {"scope": "punctuation.definition.template-expression.begin",         "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "punctuation.definition.template-expression.end",           "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "punctuation.section.embedded",                             "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "punctuation.separator",                                    "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "source.coffee.embedded",                                   "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "source.cpp keyword.operator.delete",                       "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "source.cpp keyword.operator.new",                          "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "source.groovy.embedded",                                   "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "source.powershell variable.other.member",                  "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage",                                                  "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.modifier",                                         "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.modifier.import",                                  "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "storage.modifier.package",                                 "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "storage.type",                                             "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.annotation",                                  "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.generic",                                     "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.modifier",                                    "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.object.array",                                "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.parameters",                                  "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.primitive.array",                             "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.primitive",                                   "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.string.python",                               "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}}, // f"..."
      {"scope": "storage.type.token",                                       "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "storage.type.variable",                                    "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "string meta.image.inline.markdown",                        "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "string",                                                   "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "string.regexp",                                            "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "string.tag",                                               "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "string.value",                                             "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "string.quoted.double.shell",                               "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "string.quoted.single.shell",                               "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "string.unquoted.argument.shell",                           "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "strong",                                                   "settings": {"fontStyle": "bold"}},
      {"scope": "support.class",                                            "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "support.constant.color",                                   "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.constant.dom",                                     "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "support.constant.font-name",                               "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.constant.handlebars",                              "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.constant.json",                                    "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.constant.math",                                    "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.constant.media",                                   "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.constant.media-type",                              "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.constant.property-value",                          "settings": {"foreground": "#ff77ff", "fontStyle": "bold"}},
      {"scope": "support.function",                                         "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "support.function.git-rebase",                              "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "support.type",                                             "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "support.type.primitive",                                   "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "support.type.property-name",                               "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "support.type.vendored.property-name",                      "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "support.variable",                                         "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "token.debug-token",                                        "settings": {"foreground": "#6871ff", "fontStyle": "bold"}},
      {"scope": "token.error-token",                                        "settings": {"foreground": "#ff6e67", "fontStyle": "bold"}},
      {"scope": "token.info-token",                                         "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "token.warn-token",                                         "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "variable",                                                 "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "variable.language.this",                                   "settings": {"foreground": "#fffc67", "fontStyle": "bold"}},
      {"scope": "variable.language.wildcard",                               "settings": {"foreground": "#fffc67", "fontStyle": ""}},
      {"scope": "variable.legacy.builtin.python",                           "settings": {"foreground": "#ffffff", "fontStyle": ""}},
      {"scope": "variable.other.less",                                      "settings": {"foreground": "#6871ff", "fontStyle": ""}},
      {"scope": "variable.language.special.self.python",                    "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},
      {"scope": "variable.parameter.function.language.special.self.python", "settings": {"foreground": "#60fdff", "fontStyle": "bold"}},

    ],
  },

  // Tabs + breadcrumbs
  "breadcrumbs.icons": false,
  "workbench.editor.tabCloseButton": "off",
  "workbench.editor.showIcons": false,
  "workbench.editor.decorations.badges": false,

  // Custom css/styling
  //  - https://github.com/drcika/apc-extension
  //  - apc is the newer approach to customize-ui -- yay! (2023-09-09)
  "apc.electron": {
    "frame": false,
  },
  // Monospace everywhere
  "apc.font.family": "Consolas",
  "apc.monospace.font.family": "Consolas",
  // Tabs
  "apc.header": {
    // HACK Tune height to 13px to avoid a gap at the bottom of editors/terminals/notebooks
    //  - This is caused by (and coupled with) our tabs css sizing below
    "height": 13, // If "workbench.editor.tabHeight" not specified
    "normal": 13, // If "workbench.editor.tabHeight": "normal"
    "compact": 13, // If "workbench.editor.tabHeight":" compact"
    "fontSize": 12,
  },
  // Status bar
  "apc.statusBar": {
    "height": 17,
    "fontSize": 11, // 1 smaller than tab bar (status bar is more dense and less important)
  },
  // Explorer (&al)
  "apc.listRow": {
    "height": 13,
    "fontSize": 11,
  },
  // Activity bar
  //  - Change large icons always visibile on the left -> small icons at the bottom of Explorer view
  "apc.activityBar": {
    "position": "bottom",
    "size": 26,
    "itemMargin": 0,
  },
  // XXX Nope, don't use apc.imports
  //  - https://github.com/drcika/apc-extension#apcimports
  //  - Storing in a .css that we import here introduces weird jank on save->refresh that storing css lines here in settings.json doesn't
  //  - Also, line comments in .css are a big pita (/*..*/)
  // "apc.imports": ["/Users/danb/.code/style-apc.css"],
  // XXX In case we want to switch away from vscode-init-script, here's a start
  // "apc.imports": [
  //   // "/Users/danb/.code/init-apc.js",
  //   {"type": "module", "src": "/Users/danb/.code/init-apc.js"},
  // ],
  "apc.stylesheet": {

    // Fix font smoothing
    //  - Solution
    //    - Use css `-webkit-text-stroke-width` [https://github.com/atom/atom/issues/20052#issuecomment-546669675]
    //    - For more archeology, see ~/.atom/styles.less
    //  - Troubleshooting
    //    - Try "workbench.fontAliasing":"default"->"auto" (this was required for the CGFontRenderingFontSmoothingDisabled approach)
    //  - Non-solution
    //    - `defaults write com.microsoft.VSCode.helper CGFontRenderingFontSmoothingDisabled -bool NO`
    //      - Only works when you enable the global setting "System Preferences -> General -> Use font smoothing when available"
    //      - But we don't want that enabled globally
    //      - (Note that's the same as `defaults -currentHost ... AppleFontSmoothing`)
    //    - https://github.com/microsoft/vscode/issues/82109#issuecomment-542086670
    //    - https://github.com/microsoft/vscode/issues/51132
    //    - https://github.com/microsoft/vscode/issues/59887
    "*": {
      "-webkit-text-stroke-width": ".35px", // Closest match to "Use font smoothing when available" (System Preferences -> General)
      // "-webkit-text-stroke-width": ".3px",
      // "-webkit-text-stroke-width": ".25px", // Tuned to taste
      // "-webkit-text-stroke-width": ".2px",
      // "-webkit-text-stroke-width": ".15px",
      // "-webkit-text-stroke-width": ".1px",
    },

    // Hide all scrollbars
    ".scrollbar": {
      "display": "none",
    },

    // Quick input (cmd+p)
    //  - Protip: To use element inspector on these, set "workbench.quickOpen.closeOnFocusLost":false
    //  - Wider command palette (default 600px is too narrow for long paths)
    ".monaco-workbench": {
      "font-size": "11px",
    },
    //  - Files
    //    - Reorder "file dir" -> "dir/file"
    //    - Make really wide
    ".quick-input-widget:has(.monaco-list[aria-label*='Search files'])": {
      "width": "1000px !important",
      "left": "calc((100% - 1000px) / 2) !important",
      "margin-left": "0px !important",
    },
    ".quick-input-widget .monaco-list[aria-label*='Search files'] .monaco-icon-label-container": {
      "display": "flex",
    },
    ".quick-input-widget .monaco-list[aria-label*='Search files'] .monaco-icon-label-container .monaco-icon-description-container": {
      "order": "1",
      "overflow-y": "hidden",
      "text-overflow": "ellipsis",
    },
    ".quick-input-widget .monaco-list[aria-label*='Search files'] .monaco-icon-label-container .monaco-icon-description-container .label-description": {
      "font-size": "inherit !important",
      "opacity": "1 !important",
    },
    ".quick-input-widget .monaco-list[aria-label*='Search files'] .monaco-icon-label-container .monaco-icon-name-container": {
      "order": "2",
    },
    ".quick-input-widget .monaco-list[aria-label*='Search files'] .monaco-icon-label-container:has(.label-description .monaco-highlighted-label:not(:empty)) .label-name::before": {
      "content": "'/'",
    },
    //  - Symbols
    //    - Move parent to the right edge for vertical alignment ("symbol parent [space]" -> "symbol [space] parent")
    ".quick-input-widget .monaco-list[aria-label*='name of a symbol'] .monaco-icon-description-container": {
      "float": "right",
    },

    // [nope] Quick input: Smaller row height
    //  - XXX This doesn't work because all .monaco-list-row have a precomputed top:X that's a mutliple of 22px
    // ".quick-input-list": { "line-height": "13px" },
    // ".quick-input-list .monaco-list-row": { "height": "13px !important" },
    //  - XXX This doesn't work because row elements are dynamically removed/added from the top/bottom as you scroll
    // ".quick-input-widget .monaco-list-row": { "position": "relative", "top": "unset !important" },
    //  - XXX This doesn't work because I can't find a way to include _more_ results in the dynamic list of rows
    // ".quick-input-widget .monaco-list-row[data-index='0']": { "top": "calc(13px * 0) !important" },
    // ".quick-input-widget .monaco-list-row[data-index='1']": { "top": "calc(13px * 1) !important" },
    // ".quick-input-widget .monaco-list-row[data-index='2']": { "top": "calc(13px * 2) !important" },

    // Explorer (tree view)
    ".monaco-workbench .codicon[class*=codicon-]": {
      "font-size": "11px",
    },
    //  - Color dirs blue
    //    - But leave alone when git modified (orange) or ignored (gray)
    //    - And leave the expand/collapse icons as is (white), since we can't apply orange/gray to the modified/ignored ones
    ".explorer-folders-view .monaco-list-row:has(.folder-icon):not(:has(.monaco-icon-label[class*=monaco-decoration-])) .label-name": {
      "color": "#6871ff",
      "font-weight": "bold",
    },

    // Hide ruler (editor right margin)
    //  - https://github.com/microsoft/vscode/issues/85418
    ".decorationsOverviewRuler": {
      "display": "none !important",
    },

    // Tabs + breadcrumbs
    //  - https://github.com/microsoft/vscode/issues/42253
    //  - https://github.com/microsoft/vscode/issues/42253#issuecomment-713816482 — based on this solution
    //  - Codicon references
    //    - https://microsoft.github.io/vscode-codicons/dist/codicon.html
    //    - https://github.com/microsoft/vscode-codicons/blob/main/dist/codicon.csv -- shows hex values, but incomplete
    //    - https://github.com/microsoft/vscode-codicons/blob/main/src/template/mapping.json -- complete, but shows decimal values (use python hex())

    // Tabs: Font/height sizing
    ".tabs-and-actions-container": {
      "height": "17px !important",
      "background": "#404040 !important",
    },
    ".tabs-and-actions-container .tab": {
      "padding-right": "10px",
    },
    "body.inline-title-bar .monaco-workbench .part.editor > .content .editor-group-container > .title .tabs-container": {
      "height": "17px !important",
      "line-height": "17px !important",
    },
    "body.inline-title-bar .monaco-workbench .part.editor > .content .editor-group-container > .title .tabs-container > .tab": {
      "height": "17px !important",
      "line-height": "17px !important",
    },
    "body.inline-title-bar .monaco-workbench .part.editor > .content .editor-group-container > .title .tabs-container > .tab .monaco-icon-label::before": {
      "height": "15px !important",
    },
    "body.inline-title-bar .monaco-workbench .part.editor > .content .editor-group-container > .title .editor-actions": {
      "height": "17px !important",
      "line-height": "17px !important",
    },
    ".monaco-workbench .part.editor > .content .editor-group-container > .title .tabs-container": {
      "height": "17px !important",
      "line-height": "17px !important",
    },
    ".monaco-workbench .part.editor > .content .editor-group-container > .title .tabs-container > .tab": {
      "height": "17px !important",
      "line-height": "17px !important",
      "padding": "0 7px !important",
    },
    ".monaco-workbench .part.editor > .content .editor-group-container > .title .tabs-container > .tab .monaco-icon-label::before": {
      "height": "15px !important",
    },
    ".monaco-workbench .part.editor > .content .editor-group-container > .title .editor-actions": {
      "height": "17px !important",
      "line-height": "17px !important",
      "outline": "0px !important",
      "padding": "0px !important",
    },
    ".tab .tab-label": {
      "line-height": "17px !important",
      "font-family": "Consolas",
    },
    ".monaco-workbench .part.editor > .content .editor-group-container > .title .tabs-container > .tab.sizing-fit": {
      "width": "inherit;", // Let tab widths shrink to fit tab titles (default: 120px)
    },
    ".monaco-workbench .part.editor > .content .editor-group-container > .title .tabs-container > .tab .tab-label a": {
      "font-size": "12px !important", // [Redundant with apc.header.fontSize -- safe to delete?]
    },
    ".monaco-action-bar .action-label": {
      "margin-right": "0px !important",
    },

    // Tabs: Icons
    ".tabs-and-actions-container .tab.dirty .tab-label::after": {
      "content": "'\\ea71'",
      "font-family": "codicon",
      "padding-right": "0px",
      "display": "block !important", // Add circle on dirty/unsaved editors
    },
    ".tabs-and-actions-container .codicon": {
      "font-size": "13px !important",
      "width": "inherit !important",
      "padding": "0px !important",
      "color": "#a6a6a6 !important",
    },
    ".tabs-and-actions-container .codicon:hover": {
      "color": "#fff !important",
    },
    ".tabs-and-actions-container .action-item": {
      "height": "17px !important",
      "margin": "0px !important",
      "padding": "0px 4px !important",
      "text-align": "center !important",
    },
    ".tabs-and-actions-container .action-item:hover": {
      "background": "#666 !important",
    },

    // Tabs: Hide decorations before/after
    //  - Before: Tab icons (e.g. terminal tabs have one)
    //  - After: Tab actions (e.g. X to close, git M/A/U decorations)
    ".tabs-and-actions-container .tab .tab-label::before": {
      "display": "none",
    },
    ".tabs-and-actions-container .tab .tab-actions": {
      "display": "none",
    },

    // Tabs: Disable git font color
    //  - But leave git font color enabled for Explorer view
    //  - See also: `workbench.colorCustomizations` in https://code.visualstudio.com/api/references/theme-color#git-colors
    ".monaco-workbench .part.editor > .content .editor-group-container > .title.tabs .monaco-icon-label::after": {
      "display": "none",
    },
    ".tabs-and-actions-container .tab *[class*=monaco-decoration-itemColor-]": {
      "color": "inherit",
    },
    ".tabs-and-actions-container .tab *[class*=monaco-decoration-iconBadge-]": {
      "color": "inherit",
    },
    ".tabs-and-actions-container .tab *[class*=monaco-decoration-itemBadge-]": {
      "color": "inherit",
    },
    ".tabs-and-actions-container .tab *[class*=monaco-decoration-itemBadge-]::after": {
      "color": "inherit",
    },

    // Breadcrumbs
    ".monaco-breadcrumbs": {
      "height": "17px !important",
    },
    ".monaco-workbench .part.editor > .content .editor-group-container > .title .tabs-breadcrumbs .breadcrumbs-control": {
      "height": "17px !important",
    },
    ".monaco-workbench .part.editor > .content .editor-group-container > .title .tabs-breadcrumbs .breadcrumbs-control .monaco-icon-label": {
      "line-height": "15px !important",
      "height": "17px !important",
    },
    ".tabs-breadcrumbs .monaco-breadcrumb-item .label-name": {
      "font-size": "11px !important",
      "font-family": "Consolas !important",
    },
    ".tabs-breadcrumbs .monaco-breadcrumb-item:first-of-type:not(.root_folder) .label-name::before": {
      "content": "'/'",
    },
    ".tabs-breadcrumbs .monaco-breadcrumb-item:not(:last-of-type) .label-name::after": {
      "content": "'/'",
    },
    ".tabs-breadcrumbs .codicon-breadcrumb-separator": {
      "display": "none",
      "font-size": "11px !important",
    },

    // Status bar
    ".statusbar .statusbar-item .codicon": {
      "font-size": "13px !important",
    },

    // Editor
    //  - Hack for missing color variable "editor.inactiveSelectionHighlightBackground" (see above: "Editor selection highlight")
    ".monaco-editor .selectionHighlight": {
      "background-color": "var(--vscode-editor-selectionHighlightBackground)",
    },

    // Terminals
    //  - HACK Tune bottom offset to 6px to compensate for fixing the gap above (apc.header.height)
    //    - 5px = run `cat` to put the block cursor in the bottom-left, then zoom in and to visually match pixels to the left/down
    //    - 1px = adjust to taste
    //    - Total: 6px
    ".monaco-workbench .terminal-editor .xterm": {
      "bottom": "6px",
    },
    //  - Hide gutter
    ".integrated-terminal.shell-integration .xterm, .monaco-workbench .pane-body.integrated-terminal .terminal-group .monaco-split-view2.horizontal .split-view-view:first-child .xterm, .monaco-workbench .terminal-editor .xterm": {
      "padding-left": "3px !important",
    },
    ".monaco-workbench .xterm": {
      "padding-right": "3px",
    },
    //  - Hide ruler
    ".xterm-decoration-overview-ruler": {
      "display": "none !important",
    },
    //  - Hide scrollbar
    //    - https://stackoverflow.com/a/38994837/397334
    ".xterm-viewport::-webkit-scrollbar": {
      "display": "none",
    },
    //  - TODO Remove the focusAccessibleBuffer padding-left:10px to align with terminal padding
    //    - [Started at 2am, quit before figuring it out -- probably not hard!]
    // ".monaco-workbench .terminal-accessible-widget": {
    //   "padding-left": "0px",
    // },
    // ".monaco-workbench .terminal-accessible-widget .margin": {
    //   "display": "none",
    // },

    // Terminals: Change icons from 'terminal-bash' -> 'terminal'
    //  - This affects terminal tabs (display:none above) + quick input list (cmd+p, Go To File)
    ".monaco-workbench .tab .terminal-tab.codicon-terminal-bash::before": {
      "content": "'\\ea85' !important",
      "font-family": "'codicon' !important",
    },
    ".monaco-workbench .quick-input-list .terminal-tab.codicon-terminal-bash::before": {
      "content": "'\\ea85' !important",
      "font-family": "'codicon' !important",
      // "display": "none", // Or hide them, which is confusing in cmd+p (with no input) when terminals and paths are all displayed together
    },

    // Add border on focused editor/terminal pane
    //  - Use :focus in addition to .editor-group-container.active, because focusing other views (e.g. Explorer in the
    //    sidebar) doesn't de-.active the .editor-group-container
    //  - NOTE .notebook-editor (and other iframe views) doesn't make a :focus (because iframe), and doesn't expose its
    //    own .focused/.focus state on .notebook-editor, so we rely on .active alone and let it incorrectly stay
    //    outlined when focus switches to Explorer/etc.
    //  - NOTE z-index arms race because various things keep appearing with higher z-indexes 🤷
    //  - Top
    ".editor-group-container.active:not(.empty):has(:focus, .notebook-editor) .tabs-and-actions-container::after": {
      "background-color": "#fff !important",
    },
    //  - Bottom
    //    - z-index:21 to override notebook cells
    ".editor-group-container.active:not(.empty):has(:focus, .notebook-editor)::after": {
      "background-color":"#fff", "width":"100%", "height":"1px", "z-index":"21", "bottom":"0", "right":"0", "position":"absolute", "content":"' '", "pointer-events":"none",
    },
    //  - Left
    //    - z-index:1 to override .tabs borders
    //    - z-index:10 to override some weird thing with nested alternating .split-view-view's 🤷
    ".split-view-view:has(> .editor-group-container.active:not(.empty) :focus, > .editor-group-container.active:not(.empty) .notebook-editor)::before": {
      "background-color":"#fff !important", "height":"100% !important", "width":"1px !important", "z-index":"10 !important", "top":"0 !important", "left":"0 !important", "position":"absolute", "content":"' '", "pointer-events":"none",
    },
    //  - Right
    ".split-view-view:has(> .editor-group-container.active:not(.empty) :focus, > .editor-group-container.active:not(.empty) .notebook-editor)::after": {
      "background-color":"#fff !important", "height":"100% !important", "width":"1px !important", "z-index":"10 !important", "top":"0 !important", "right":"0 !important", "position":"absolute", "content":"' '", "pointer-events":"none",
    },
    //  - Fix up z-index overlaps with left/right
    ".editor-group-container.active:not(.empty):has(:focus, .notebook-editor) .tabs-and-actions-container": {
      "z-index": "11",
    },
    ".editor-group-container.active:not(.empty):has(:focus, .notebook-editor) .tabs.title.title-border-bottom:has(.tabs-breadcrumbs)::after": {
      "z-index": "0 !important",
    },

    // Disable underlines for detected links
    ".monaco-editor .detected-link": {
      "text-decoration": "inherit",
    },
    ".monaco-editor .detected-link-active": {
      "text-decoration": "inherit",
    },

    // Git diff editor
    //  - Make negative areas solid instead of diagonal fill (e.g. what to show on left when lines added on right)
    ".monaco-editor .diagonal-fill": {
      "background-color": "var(--vscode-diffEditor-diagonalFill)",
      "background-image": "unset",
      "background-size": "unset",
    },
    //  - In the overview ruler, move red/green above the scrollbar (preserve color) instead of below it (dimmed color)
    ".monaco-diff-editor .diffOverview .diffOverviewRuler": {
      "z-index": "11", // Above z-index:10 of the scrollbar (.diffOverview .diffViewport)
    },

  },
  "apc.iframe.style": {

    // Override default WebView/iframe styles
    //  - Code: https://github.com/microsoft/vscode/blob/main/extensions/markdown-language-features/media/markdown.css
    ".vscode-high-contrast.showEditorSelection .code-active-line:before": {
      "border-left-color": "#4f97d7b3 !important",
    },
    ".vscode-high-contrast.showEditorSelection .code-line:hover:before": {
      "border-left-color": "#4f97d7 !important",
    },

    // Markdown Preview
    ".markdown-body ul": {
      "padding-inline-start": "32px",
    },

  },

  // TODO Organize
  "workbench.welcomePage.walkthroughs.openOnInstall": false,
  "workbench.startupEditor": "none",
  "workbench.colorTheme": "Default High Contrast",
  "editor.renderWhitespace": "none",
  "editor.autoClosingBrackets": "never",
  "editor.autoClosingOvertype": "never",
  "editor.autoClosingQuotes": "never",
  "editor.copyWithSyntaxHighlighting": false,
  "editor.renderLineHighlight": "none",
  "editor.cursorBlinking": "solid",
  "editor.minimap.enabled": false,
  "files.hotExit": "off",
  "files.insertFinalNewline": true,
  "files.simpleDialog.enable": true,
  "files.trimFinalNewlines": true,
  "files.trimTrailingWhitespace": true,
  "workbench.commandPalette.preserveInput": true,
  "workbench.iconTheme": null,
  "workbench.editor.enablePreview": false,
  "workbench.editor.highlightModifiedTabs": true,
  "zenMode.restore": true,
  "zenMode.hideLineNumbers": false,
  "search.smartCase": true,
  "debug.console.fontSize": 10,
  "jupyter.collapseCellInputCodeByDefault": false,
  "jupyter.disableJupyterAutoStart": true,
  "jupyter.enableScrollingForCellOutputs": false,
  "jupyter.showKernelSelectionOnInteractiveWindow": true,
  "workbench.commandPalette.history": 0,
  "search.quickOpen.includeHistory": false,
  "task.quickOpen.history": 0,
  "workbench.editorAssociations": {
    // TODO(notebook): Do we still need this? Probably from before they launched stable notebook support
    // "*.ipynb": "jupyter-notebook"
  },
  "jupyter.insidersChannel": "off",
  "jupyter.alwaysTrustNotebooks": true,
  "explorer.confirmDragAndDrop": false,
  "vscode-advanced-open-file.groupDirectoriesFirst": true,
  "workbench.quickOpen.preserveInput": true,
  "editor.matchBrackets": "near",
  "editor.lightbulb.enabled": false,
  "bookmarks.label.suggestion": "suggestWhenSelectedOrLineWhenNoSelected",
  "bookmarks.navigateThroughAllFiles": true,
  "bookmarks.sideBar.expanded": true,
  "search.searchEditor.reusePriorSearchConfiguration": true,
  "search.searchEditor.defaultNumberOfContextLines": 0,
  "search.searchEditor.doubleClickBehaviour": "openLocationToSide",
  "customizeUI.listRowHeight": 20,
  "editor.multiCursorModifier": "alt",
  "editor.acceptSuggestionOnCommitCharacter": false,
  "editor.snippetSuggestions": "bottom",
  "editor.suggestOnTriggerCharacters": false,
  "editor.suggestSelection": "first",
  "markdown-checkbox.checkmark": "x",
  "markdown-checkbox.dateWhenChecked": false,
  "markdown-checkbox.italicWhenChecked": false,
  "markdown-checkbox.showStatusBarItem": false,
  "markdown-checkbox.strikeThroughWhenChecked": false,
  "markdown-checkbox.typeOfBulletPoint": "-",
  "markdown.preview.lineHeight": 1.5,
  "markdown.extension.list.indentationSize": "inherit",
  "markdown.extension.theming.decoration.renderCodeSpan": false,
  "scm.diffDecorationsGutterVisibility": "hover",
  "editor.wordBasedSuggestionsMode": "allDocuments",
  "explorer.openEditors.visible": 50,
  "breadcrumbs.symbolPath": "off",
  "dart.previewLsp": true,
  "explorer.compactFolders": false,
  "dart.debugExternalLibraries": false,
  "dart.debugSdkLibraries": false,
  "problems.showCurrentInStatus": true,
  "git.enableStatusBarSync": false,
  "editor.acceptSuggestionOnEnter": "off",
  "dart.enableSnippets": false,
  "dart.hotReloadProgress": "statusBar",
  "dart.flutterGutterIcons": false,
  "editor.suggest.showSnippets": false,
  "notebook.globalToolbarShowLabel": false,
  "notebook.insertToolbarLocation": "notebookToolbar",
  "notebook.showCellStatusBar": "hidden",
  "swiftformat.path": "/opt/homebrew/bin/swiftformat",
  "editor.guides.indentation": false,
  "editor.bracketPairColorization.enabled": false,
  "extensions.experimental.affinity": {
    "vscodevim.vim": 1
  },
  "editor.occurrencesHighlight": false,
  "ActiveFileInStatusBar.revealFile": true,
  "vscode-neovim.neovimExecutablePaths.darwin": "/opt/homebrew/bin/nvim",
  "search.exclude": {
    "build/**": true
  },
  "editor.comments.ignoreEmptyLines": false,
  "update.showReleaseNotes": false,
  "git.openRepositoryInParentFolders": "never",
  "jupyter.interactiveWindow.creationMode": "perFile",
  "scm.alwaysShowRepositories": true,
  "scm.countBadge": "off",
  "scm.defaultViewMode": "tree",
  "scm.inputFontSize": 11,
  "scm.inputFontFamily": "editor",
  "editor.linkedEditing": true,
  "bookmarks.sideBar.countBadge": "off",
  "testing.countBadge": "off",
  "explorer.excludeGitIgnore": true,
  "workbench.hover.delay": 500,
  "workbench.tips.enabled": false,
  "workbench.tree.renderIndentGuides": "none",
  "workbench.editor.autoLockGroups": {
    "terminalEditor": false
  },
  "workbench.editor.untitled.hint": "hidden",
  "editor.accessibilitySupport": "off",

}
