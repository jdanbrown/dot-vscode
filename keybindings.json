// Tracking
//  - https://paper.dropbox.com/doc/atom-vscode--B_1pTajtClXUnlRg8vKINs~QAg-h1pVZyCsdouFUaDxCTofw
//
// Docs
//  - shift+cmd+p -> "Preferences: Open Default Keyboard Shortcuts (JSON)"
//    - Reference for default keyboard shortcuts
//    - Reference for all available commands
//  - https://code.visualstudio.com/api/references/commands
//    - Reference for commands that take arguments [do these even work here? haven't tried yet]
//  - https://code.visualstudio.com/api/references/when-clause-contexts
//    - Reference for when clauses
//  - https://github.com/codebling/vs-code-default-keybindings/blob/master/macos.keybindings.json
//    - (Only reference I can find on the web)
//
[

  // Window
  //  - Require shift+cmd+w to close a window
  //    - Default: Allow just cmd+w when no editors remaining
  {"key": "shift+cmd+w", "command": "workbench.action.closeWindow"}, // Default
  {"key": "cmd+w", "command": "-workbench.action.closeWindow", "when": "!editorIsOpen && !multipleEditorGroups"},
  //  - Allow cmd+w to close empty groups
  {"key": "cmd+w", "command": "workbench.action.closeEditorsAndGroup", "when": "activeEditorGroupEmpty"},
  //  - Don't allow cmd+w to close terminals (unsafe!)
  //    - cmd+w on terminals is destructive because you can't shift+cmd+t to reopen, like we can on editors
  //    - To close a terminal, exit the process (e.g. ^D the shell)
  {"key": "cmd+w", "command": "workbench.action.closeActiveEditor", "when": "!activeEditorGroupEmpty && !terminalFocus"},
  {"key": "cmd+w", "command": "-workbench.action.closeActiveEditor"},
  {"key": "cmd+w", "command": "-workbench.action.terminal.killEditor", "when": "terminalEditorFocus && terminalFocus && terminalHasBeenCreated && resourceScheme == 'vscode-terminal' || terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"},

  // Workspace
  // {"key": "cmd+,", "command": "workbench.action.openSettings"}, // (Default) Open Settings editor
  {"key": "shift+cmd+,", "command": "workbench.action.openSettingsJson"}, // Open settings.json
  {"key": "shift+cmd+k", "command": "workbench.action.openGlobalKeybindings"}, // Open Keyboard Shortcuts editor
  {"key": "ctrl+up", "command": "workbench.action.openGlobalKeybindingsFile"}, // Open keybindings.json file
  {"key": "ctrl+shift+r", "command": "workbench.action.reloadWindow"},
  {"key": "alt+cmd+i", "command": "workbench.action.toggleDevTools"},
  {"key": "ctrl+cmd+t", "command": "workbench.action.openRecent"},
  // {"key": "shift+ctrl+cmd+k", "command": "workbench.action.toggleKeybindingsLog"},
  // {"key": "cmd+.", "command": "workbench.action.toggleKeybindingsLog"},
  {"key": "ctrl+shift+cmd+.", "command": "workbench.action.toggleKeybindingsLog"},
  // {"key": "ctrl+shift+cmd+k", "command": "workbench.action.keybindingsReference"},

  // Command palettes
  // {"key": "shift+cmd+p", "command": "workbench.action.showCommands"}, // Default
  // {"key": "cmd+p", "command": "workbench.action.quickOpen"}, // Default
  {"key": "cmd+p", "command": "-workbench.action.quickOpenNavigateNextInFilePicker", "when": "inFilesPicker && inQuickOpen"},
  {"key": "shift+cmd+p", "command": "-workbench.action.quickOpenNavigatePreviousInFilePicker", "when": "inFilesPicker && inQuickOpen"},
  {"key": "cmd+r", "command": "workbench.action.gotoSymbol", "when": "!inSearchEditor"},
  {"key": "cmd+r", "command": "-workbench.action.reloadWindow", "when": "isDevelopment"},
  {"key": "shift+cmd+r", "command": "workbench.action.showAllSymbols"},
  {"key": "shift+cmd+r", "command": "-rerunSearchEditorSearch", "when": "inSearchEditor"},

  // Files
  {"key": "cmd+o", "command": "extension.advancedOpenFile"},
  {"key": "cmd+o", "command": "-workbench.action.files.openFileFolder"},
  {"key": "cmd+o", "command": "-workbench.action.files.openLocalFileFolder", "when": "remoteFileDialogVisible"},
  {"key": "ctrl+cmd+o", "command": "workbench.action.files.openFile"},
  {"key": "shift+cmd+backspace", "command": "fileutils.removeFile", "when": "editorFocus"},
  {"key": "ctrl+m", "command": "fileutils.moveFile", "when": "editorFocus"},
  {"key": "shift+cmd+c", "command": "copyFilePath"},
  {"key": "shift+cmd+c", "command": "-workbench.action.terminal.openNativeConsole", "when": "!terminalFocus"},
  {"key": "ctrl+cmd+c", "command": "search.action.copyPath", "when": "fileMatchOrFolderMatchWithResourceFocus"},

  // Sidebar
  //  - NOTE Must manually keep these number-view mappings up to date as new tabs come and go
  //  - Bug: https://github.com/microsoft/vscode/issues/193737 Focus into Side Bar commands don't focus the sidebar if the sidebar wasn't already visible
  //  - Bug: https://github.com/microsoft/vscode/issues/193741 gitlens doesn't set sideBarFocus, making sidbar keybindings difficult
  {"key": "cmd+;", "command": "workbench.action.toggleSidebarVisibility"},
  {"key": "shift+cmd+;", "command": "workbench.action.focusSideBar", "when": "!sideBarFocus"},
  {"key": "shift+cmd+;", "command": "workbench.action.focusActiveEditorGroup", "when": "sideBarFocus"}, // Unfocus sidebar, but leave it open
  {"key": "escape", "command": "workbench.action.focusActiveEditorGroup", "when": "sideBarFocus && !inputFocus"}, // Unfocus sidebar, but leave it open
  {"key": "shift+escape", "command": "workbench.action.focusActiveEditorGroup", "when": "sideBarFocus"},
  {"key": "cmd+h", "command": "workbench.action.focusActiveEditorGroup", "when": "sideBarFocus"},
  {"key": "cmd+j", "command": "workbench.action.focusActiveEditorGroup", "when": "sideBarFocus"},
  {"key": "cmd+k", "command": "workbench.action.focusActiveEditorGroup", "when": "sideBarFocus"},
  {"key": "cmd+l", "command": "workbench.action.focusActiveEditorGroup", "when": "sideBarFocus"},
  {"key": "shift+cmd+1", "command": "workbench.view.explorer",                       "when": "true"},
  {"key": "shift+cmd+2", "command": "workbench.view.extension.bookmarks",            "when": "true"},
  {"key": "shift+cmd+3", "command": "workbench.view.scm",                            "when": "true"},
  {"key": "shift+cmd+4", "command": "workbench.view.extension.github-pull-requests", "when": "true"},
  {"key": "shift+cmd+5", "command": "workbench.view.extension.gitlensInspect",       "when": "true"},
  // {"key": "shift+cmd+7", "command": "workbench.view.extension.test",                 "when": "true"}, // How to `when` on test view enabled? o/w focuses explorer view
  {"key": "shift+cmd+8", "command": "workbench.view.debug",                          "when": "true"},
  {"key": "shift+cmd+9", "command": "workbench.view.extensions",                     "when": "true"},
  {"key": "ctrl+tab", "command": "workbench.action.nextSideBarView", "when": "sideBarFocus"},
  {"key": "ctrl+shift+tab", "command": "workbench.action.previousSideBarView", "when": "sideBarFocus"},
  {"key": "shift+cmd+1", "command": "-search.action.replaceAllInFolder", "when": "folderMatchFocus && isEditableItem && replaceActive && searchViewletVisible"},
  {"key": "shift+cmd+1", "command": "-search.action.replaceAllInFile", "when": "fileMatchFocus && isEditableItem && replaceActive && searchViewletVisible"},
  {"key": "shift+cmd+1", "command": "-search.action.replace", "when": "isEditableItem && matchFocus && replaceActive && searchViewletVisible"},
  {"key": "shift+cmd+1", "command": "-editor.action.replaceOne", "when": "editorFocus && findWidgetVisible"},
  {"key": "shift+cmd+e", "command": "-workbench.view.explorer"}, // Disable (conflicts in terminal w/ select line down)
  {"key": "cmd+0", "command": "-workbench.action.focusSideBar"}, // Disable (need it for reset zoom)

  // Bottom panel
  //  - focusBackOn* is a workaround for focus jumping to weird places on workbench.action.togglePanel
  //  - Bug: https://github.com/microsoft/vscode/issues/193741 gitlens doesn't set sideBarFocus, making sidbar keybindings difficult
  {"key": "cmd+'", "command": "multiCommand.workbench.action.togglePanel.focusBackOnEditor", "when": "!sideBarFocus"},
  {"key": "cmd+'", "command": "multiCommand.workbench.action.togglePanel.focusBackOnSidebar", "when": "sideBarFocus"},
  {"key": "cmd+'", "command": "-workbench.action.replaceInFiles"},
  {"key": "shift+cmd+'", "command": "workbench.action.focusPanel", "when": "!panelFocus"},
  {"key": "shift+cmd+'", "command": "workbench.action.focusActiveEditorGroup", "when": "panelFocus"},
  {"key": "shift+cmd+'", "command": "-workbench.action.search.toggleQueryDetails", "when": "inSearchEditor || searchViewletFocus"},
  {"key": "ctrl+tab", "command": "workbench.action.nextPanelView", "when": "panelFocus"},
  {"key": "ctrl+shift+tab", "command": "workbench.action.previousPanelView", "when": "panelFocus"},
  {"key": "escape", "command": "workbench.action.focusActiveEditorGroup", "when": "panelFocus && !inputFocus"}, // Unfocus panel, but leave it open
  {"key": "escape", "command": "workbench.action.focusActiveEditorGroup", "when": "panelFocus && focusedView == 'workbench.panel.output'"}, // Special case to override the weird editor
  {"key": "shift+escape", "command": "workbench.action.focusActiveEditorGroup", "when": "panelFocus"},
  {"key": "cmd+h", "command": "workbench.action.focusActiveEditorGroup", "when": "panelFocus"},
  {"key": "cmd+j", "command": "workbench.action.focusActiveEditorGroup", "when": "panelFocus"},
  {"key": "cmd+k", "command": "workbench.action.focusActiveEditorGroup", "when": "panelFocus"},
  {"key": "cmd+l", "command": "workbench.action.focusActiveEditorGroup", "when": "panelFocus"},
  {"key": "ctrl+cmd+z", "command": "workbench.action.toggleMaximizedPanel", "when": "panelFocus"}, // Maximize panel
  {"key": "l", "command": "workbench.output.action.toggleAutoScroll", "when": "panelFocus && focusedView == 'workbench.panel.output'"},     // Which one do I use?
  {"key": "cmd+l", "command": "workbench.output.action.toggleAutoScroll", "when": "panelFocus && focusedView == 'workbench.panel.output'"}, // Which one do I use?
  {"key": "shift+cmd+m", "command": "workbench.actions.view.problems", "when": "workbench.panel.output.active && focusedView != 'workbench.panel.markers.view'"},
  {"key": "shift+cmd+m", "command": "workbench.action.focusActiveEditorGroup", "when": "workbench.panel.output.active && focusedView == 'workbench.panel.markers.view'"},
  {"key": "shift+cmd+o", "command": "workbench.action.output.toggleOutput", "when": "workbench.panel.output.active && focusedView != 'workbench.panel.output'"},
  {"key": "shift+cmd+o", "command": "workbench.action.focusActiveEditorGroup", "when": "workbench.panel.output.active && focusedView == 'workbench.panel.output'"},
  {"key": "shift+cmd+u", "command": "-workbench.action.output.toggleOutput", "when": "workbench.panel.output.active"},
  {"key": "shift+cmd+d", "command": "workbench.debug.action.toggleRepl", "when": "workbench.panel.output.active && focusedView != 'workbench.panel.repl.view'"},
  {"key": "shift+cmd+d", "command": "workbench.action.focusActiveEditorGroup", "when": "workbench.panel.output.active && focusedView == 'workbench.panel.repl.view'"},
  {"key": "shift+cmd+d", "command": "-workbench.view.debug", "when": "viewContainer.workbench.view.debug.enabled"},
  {"key": "shift+cmd+y", "command": "-workbench.debug.action.toggleRepl", "when": "workbench.panel.repl.view.active"},

  // Notifications
  {"key": "shift+cmd+\\", "command": "notifications.showList", "when": "!notificationFocus || notificationToastsVisible"},
  {"key": "shift+cmd+\\", "command": "notifications.hideList", "when": "notificationFocus && !notificationToastsVisible"},
  {"key": "shift+cmd+\\", "command": "-editor.action.jumpToBracket", "when": "editorTextFocus"},
  {"key": "shift+cmd+\\", "command": "-workbench.action.terminal.focusTabs", "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported || terminalHasBeenCreated && terminalTabsFocus || terminalProcessSupported && terminalTabsFocus"},
  {"key": "escape", "command": "workbench.action.focusActiveEditorGroup", "when": "notificationFocus"},
  {"key": "escape", "command": "-notifications.hideList", "when": "notificationCenterVisible"},
  {"key": "escape", "command": "-notifications.hideToasts", "when": "notificationToastsVisible"},
  {"key": "escape", "command": "-notifications.hideToasts", "when": "notificationFocus && notificationToastsVisible"},
  //  - https://github.com/microsoft/vscode/issues/194927 Accept Notification Primary Action incorrectly accepts first notification instead of selected notification
  {"key": "enter", "command": "notification.acceptPrimaryAction", "when": "notificationFocus"},
  {"key": "shift+cmd+a", "command": "-notification.acceptPrimaryAction", "when": "notificationToastsVisible"},
  {"key": "backspace", "command": "notification.clear", "when": "notificationFocus"},
  {"key": "cmd+backspace", "command": "notifications.clearAll", "when": "notificationFocus"},
  {"key": "h", "command": "notification.collapse", "when": "notificationFocus"},
  {"key": "l", "command": "notification.expand", "when": "notificationFocus"},
  //  - Toasts are different that the notifications list view
  //    - The Notifications list view happens when you shift+cmd+\ (notifications.showList)
  //    - The Notification Toasts view happens when you click the standalone notifications (which doesn't activate the notifications list)
  //    - In the list view normal j/k works (list.focusDown/focusUp), but in the toasts view we need to bind these two toast-specific commands
  {"key": "j", "command": "notifications.focusNextToast", "when": "notificationFocus && notificationToastsVisible"},
  {"key": "k", "command": "notifications.focusPreviousToast", "when": "notificationFocus && notificationToastsVisible"},

  // Navigate editors (and terminals, notebooks, etc.)
  //  - TODO(practice)
  {"key": "cmd+\\", "command": "workbench.action.showAllEditors"},
  {"key": "cmd+\\", "command": "-workbench.action.splitEditor"},
  {"key": "cmd+\\", "command": "-workbench.action.terminal.split", "when": "terminalFocus && terminalProcessSupported || terminalFocus && terminalWebExtensionContributedProfile"},
  {"key": "cmd+\\", "command": "-workbench.action.terminal.splitActiveTab", "when": "terminalProcessSupported && terminalTabsFocus"},

  // Panes ("editors" and "panels")
  {"key": "ctrl+tab", "command": "workbench.action.nextEditorInGroup", "when": "!sideBarFocus && !panelFocus"},
  {"key": "ctrl+tab", "command": "-workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"},
  {"key": "ctrl+shift+tab", "command": "workbench.action.previousEditorInGroup", "when": "!sideBarFocus && !panelFocus"},
  {"key": "ctrl+shift+tab", "command": "-workbench.action.quickOpenLeastRecentlyUsedEditorInGroup"},
  {"key": "cmd+h", "command": "workbench.action.focusLeftGroup", "when": "!sideBarFocus && !panelFocus"},
  {"key": "cmd+k", "command": "-workbench.action.terminal.clear", "when": "terminalFocus && terminalProcessSupported"},
  {"key": "cmd+k", "command": "workbench.action.focusAboveGroup", "when": "!sideBarFocus && !panelFocus"},
  {"key": "cmd+j", "command": "-workbench.action.togglePanel"},
  {"key": "cmd+j", "command": "workbench.action.focusBelowGroup", "when": "!sideBarFocus && !panelFocus"},
  {"key": "cmd+l", "command": "-expandLineSelection", "when": "textInputFocus"},
  {"key": "cmd+l", "command": "workbench.action.focusRightGroup", "when": "!sideBarFocus && !panelFocus"},
  {"key": "ctrl+alt+cmd+l", "command": "workbench.action.splitEditorToRightGroup", "when": "!sideBarFocus && !panelFocus && !terminalFocus"},
  {"key": "ctrl+alt+cmd+j", "command": "workbench.action.splitEditorToBelowGroup", "when": "!sideBarFocus && !panelFocus && !terminalFocus"},
  {"key": "ctrl+alt+cmd+h", "command": "workbench.action.splitEditorToLeftGroup", "when": "!sideBarFocus && !panelFocus && !terminalFocus"},
  {"key": "ctrl+alt+cmd+k", "command": "workbench.action.splitEditorToAboveGroup", "when": "!sideBarFocus && !panelFocus && !terminalFocus"},
  {"key": "cmd+1", "command": "workbench.action.openEditorAtIndex1", "when": "!sideBarFocus && !panelFocus"},
  {"key": "cmd+2", "command": "workbench.action.openEditorAtIndex2", "when": "!sideBarFocus && !panelFocus"},
  {"key": "cmd+3", "command": "workbench.action.openEditorAtIndex3", "when": "!sideBarFocus && !panelFocus"},
  {"key": "cmd+4", "command": "workbench.action.openEditorAtIndex4", "when": "!sideBarFocus && !panelFocus"},
  {"key": "cmd+5", "command": "workbench.action.openEditorAtIndex5", "when": "!sideBarFocus && !panelFocus"},
  {"key": "cmd+6", "command": "workbench.action.openEditorAtIndex6", "when": "!sideBarFocus && !panelFocus"},
  {"key": "cmd+7", "command": "workbench.action.openEditorAtIndex7", "when": "!sideBarFocus && !panelFocus"},
  {"key": "cmd+8", "command": "workbench.action.openEditorAtIndex8", "when": "!sideBarFocus && !panelFocus"},
  {"key": "cmd+9", "command": "workbench.action.lastEditorInGroup", "when": "!sideBarFocus && !panelFocus"},
  {"key": "cmd+1", "command": "-workbench.action.focusFirstEditorGroup"},
  {"key": "cmd+2", "command": "-workbench.action.focusSecondEditorGroup"},
  {"key": "cmd+3", "command": "-workbench.action.focusThirdEditorGroup"},
  {"key": "cmd+4", "command": "-workbench.action.focusFourthEditorGroup"},
  {"key": "cmd+5", "command": "-workbench.action.focusFifthEditorGroup"},
  {"key": "cmd+6", "command": "-workbench.action.focusSixthEditorGroup"},
  {"key": "cmd+7", "command": "-workbench.action.focusSeventhEditorGroup"},
  {"key": "cmd+8", "command": "-workbench.action.focusEighthEditorGroup"},
  {"key": "cmd+9", "command": "-workbench.action.lastEditorInGroup"},
  {"key": "ctrl+1", "command": "-workbench.action.openEditorAtIndex1"},
  {"key": "ctrl+2", "command": "-workbench.action.openEditorAtIndex2"},
  {"key": "ctrl+3", "command": "-workbench.action.openEditorAtIndex3"},
  {"key": "ctrl+4", "command": "-workbench.action.openEditorAtIndex4"},
  {"key": "ctrl+5", "command": "-workbench.action.openEditorAtIndex5"},
  {"key": "ctrl+6", "command": "-workbench.action.openEditorAtIndex6"},
  {"key": "ctrl+7", "command": "-workbench.action.openEditorAtIndex7"},
  {"key": "ctrl+8", "command": "-workbench.action.openEditorAtIndex8"},
  {"key": "ctrl+9", "command": "-workbench.action.openEditorAtIndex9"},
  {"key": "alt+cmd+k", "command": "workbench.action.moveEditorToAboveGroup", "when": "!sideBarFocus && !panelFocus"},
  {"key": "alt+cmd+j", "command": "workbench.action.moveEditorToBelowGroup", "when": "!sideBarFocus && !panelFocus"},
  {"key": "alt+cmd+h", "command": "workbench.action.moveEditorToLeftGroup", "when": "!sideBarFocus && !panelFocus"},
  {"key": "alt+cmd+l", "command": "workbench.action.moveEditorToRightGroup", "when": "!sideBarFocus && !panelFocus"},
  {"key": "ctrl+cmd+h", "command": "workbench.action.moveEditorLeftInGroup", "when": "!sideBarFocus && !panelFocus"},
  {"key": "ctrl+cmd+l", "command": "workbench.action.moveEditorRightInGroup", "when": "!sideBarFocus && !panelFocus"},
  {"key": "ctrl+cmd+z", "command": "workbench.action.toggleEditorWidths", "when": "!sideBarFocus && !panelFocus"}, // Maximize editor group
  {"key": "alt+cmd+t", "command": "-workbench.action.closeOtherEditors"}, // Dangerous, disable

  // Lists
  {"key": "ctrl+e", "command": "list.scrollDown", "when": "listFocus && !inputFocus"},
  {"key": "ctrl+y", "command": "list.scrollUp", "when": "listFocus && !inputFocus"},
  {"key": "ctrl+d", "command": "multiCommand.list.scrollPageDown", "when": "listFocus"},
  {"key": "ctrl+u", "command": "multiCommand.list.scrollPageUp", "when": "listFocus"},
  //  - Find
  //    - TODO(practice)
  // {"key": "cmd+f", "command": "list.find", "when": "listFocus && listSupportsFind"}, // Default
  {"key": "/", "command": "list.find", "when": "listFocus && listSupportsFind"},
  // {"key": "j", "command": "list.focusDown", "when": "listFocus && !inputFocus"}, // Default
  // {"key": "k", "command": "list.focusUp", "when": "listFocus && !inputFocus"}, // Default
  // {"key": "down", "command": "list.focusDown", "when": "listFocus && !inputFocus"}, // Default
  // {"key": "up", "command": "list.focusUp", "when": "listFocus && !inputFocus"}, // Default
  {"key": "cmd+g", "command": "list.focusDown", "when": "listFocus"},
  {"key": "shift+cmd+g", "command": "list.focusUp", "when": "listFocus"},

  // Editor
  {"key": "ctrl+space", "command": "editor.action.showHover"}, // Alias for gh (vim)
  // {"key": "cmd+.", "command": "editor.action.quickFix"}, // Default
  {"key": "shift+cmd+.", "command": "editor.action.openLink"},
  {"key": "ctrl+cmd+w", "command": "editor.action.toggleWordWrap"},
  {"key": "alt+z", "command": "-editor.action.toggleWordWrap"},
  {"key": "ctrl+cmd+g", "command": "jdanbrown.editor.toggleGutter"},
  {"key": "shift+cmd+.", "command": "-breadcrumbs.focusAndSelect", "when": "breadcrumbsPossible && breadcrumbsVisible"},
  {"key": "shift+cmd+.", "command": "-editor.action.inPlaceReplace.down", "when": "editorTextFocus && !editorReadonly"},
  {"key": "shift+cmd+.", "command": "-breadcrumbs.toggleToOn", "when": "!config.breadcrumbs.enabled"},
  {"key": "shift+cmd+.", "command": "-editor.action.accessibleViewGoToSymbol", "when": "accessibilityHelpIsShown && accessibleViewGoToSymbolSupported || accessibleViewGoToSymbolSupported && accessibleViewIsShown"},
  // {"key": "cmd+d", "command": "editor.action.addSelectionToNextFindMatch", "when": "editorFocus"}, // Default
  {"key": "alt+cmd+d", "command": "editor.action.moveSelectionToNextFindMatch", "when": "editorFocus"},
  // {"key": "shift+cmd+l", "command": "editor.action.selectHighlights", "when": "editorFocus"}, // Default
  {"key": "ctrl+8", "command": "highlightwords.addHighlight"},

  // Move lines up/down
  {"key": "ctrl+cmd+j", "command": "editor.action.moveLinesDownAction", "when": "editorTextFocus && !editorReadonly"},
  {"key": "ctrl+cmd+k", "command": "editor.action.moveLinesUpAction", "when": "editorTextFocus && !editorReadonly"},
  {"key": "alt+down", "command": "-editor.action.moveLinesDownAction", "when": "editorTextFocus && !editorReadonly"},
  {"key": "alt+up", "command": "-editor.action.moveLinesUpAction", "when": "editorTextFocus && !editorReadonly"},

  // vim
  //  - Unshadow vim redo
  {"key": "ctrl+r", "command": "-workbench.action.openRecent"},
  //  - shift+esc is a common typo when typing fast with shift
  {"key": "shift+escape", "command": "extension.vim_escape", "when": "vim.active && !inDebugRepl && vim.mode != 'Normal'"},

  // Multi-cursor
  {"key": "ctrl+j", "command": "editor.action.insertCursorBelow", "when": "editorTextFocus && editorLangId != 'magit'"},
  {"key": "ctrl+k", "command": "editor.action.insertCursorAbove", "when": "editorTextFocus && editorLangId != 'magit'"},
  {"key": "alt+cmd+down", "command": "-editor.action.insertCursorBelow", "when": "editorTextFocus"},
  {"key": "alt+cmd+up", "command": "-editor.action.insertCursorAbove", "when": "editorTextFocus"},
  {"key": "cmd+u", "command": "-cursorUndo", "when": "textInputFocus"},

  // Search Editor
  //  - https://github.com/VSCodeVim/Vim/issues/6619 Focus next search result enters visual mode
  //  - https://github.com/VSCodeVim/Vim/issues/3372 How to disable Visual Mode in VSCodeVim?
  //  - https://github.com/VSCodeVim/Vim/issues/7254 <C-Up> and <C-Down> cause editor to enter Visual mode #7254
  //  - https://github.com/VSCodeVim/Vim/issues/5716 Select Mode
  {"key": "shift+cmd+f", "command": "search.action.openNewEditorToSide"},
  {"key": "shift+cmd+f", "command": "-workbench.view.search", "when": "!searchViewletVisible"},
  {"key": "shift+cmd+f", "command": "-workbench.action.findInFiles"},
  {"key": "escape", "command": "multiCommand.search.action.unfocusQueryEditorWidget", "when": "inSearchEditor && searchInputBoxFocus"},
  {"key": "cmd+f", "command": "search.action.focusQueryEditorWidget", "when": "inSearchEditor"},
  {"key": "escape", "command": "-search.action.focusQueryEditorWidget", "when": "inSearchEditor"},
  {"key": "/", "command": "search.action.focusQueryEditorWidget", "when": "inSearchEditor && !searchInputBoxFocus"},
  {"key": "ctrl+/", "command": "toggleSearchEditorRegex", "when": "inSearchEditor && searchInputBoxFocus"},
  {"key": "ctrl+c", "command": "toggleSearchEditorCaseSensitive", "when": "inSearchEditor && searchInputBoxFocus"},
  {"key": "ctrl+w", "command": "toggleSearchEditorWholeWord", "when": "inSearchEditor && searchInputBoxFocus"},
  {"key": "ctrl+-", "command": "decreaseSearchEditorContextLines", "when": "inSearchEditor"},
  {"key": "ctrl+=", "command": "increaseSearchEditorContextLines", "when": "inSearchEditor"},
  {"key": "ctrl+r", "command": "rerunSearchEditorSearch", "when": "inSearchEditor"},
  {"key": "cmd+g", "command": "search.action.focusNextSearchResult", "when": "inSearchEditor"},
  {"key": "shift+cmd+g", "command": "search.action.focusPreviousSearchResult", "when": "inSearchEditor"},
  {"key": "ctrl+n", "command": "search.action.focusNextSearchResult", "when": "inSearchEditor"},
  {"key": "ctrl+p", "command": "search.action.focusPreviousSearchResult", "when": "inSearchEditor"},
  // {"key": "j", "command": "search.action.focusNextSearchResult", "when": "inSearchEditor && !searchInputBoxFocus"},     // Nope, eats normal mode key
  // {"key": "k", "command": "search.action.focusPreviousSearchResult", "when": "inSearchEditor && !searchInputBoxFocus"}, // Nope, eats normal mode key
  {"key": "backspace", "command": "search.searchEditor.action.deleteFileResults", "when": "inSearchEditor && !searchInputBoxFocus"},
  {"key": "shift+cmd+backspace", "command": "-search.searchEditor.action.deleteFileResults", "when": "inSearchEditor"}, // Confusion with File Delete
  //  - To open results, use Peek Definition / Go To Definition
  //    - TODO(practice)
  //    - https://code.visualstudio.com/docs/editor/codebasics#_search-editor
  //      - Use Goto/Peek on the results
  //    - https://stackoverflow.com/questions/63106163/vscode-navigate-search-editor-using-keyboard-only/63107297#63107297
  //      - Use Goto/Peek on the filename headers to peek all of its results at once -- useful!
  //    - Confusingly, the "search.action.*" commands are for the Search sidebar panel, they don't work in the Search Editor
  //      - https://github.com/microsoft/vscode/issues/193855 Search Editor: Can't open result with any keybindings, only with double-click
  //    - TODO After they fix this issue, add shift+o for open-to-the-side (like double-click)
  //      - https://github.com/microsoft/vscode/issues/194044 Search Editor: Add keybinding for double-click action, e.g. to open to the side
  {"key": "ctrl+o", "command": "editor.action.peekDefinition", "when": "inSearchEditor && !searchInputBoxFocus"}, // ctrl to be fluid w/ ctrl+n/ctrl+p
  {"key": "o", "command": "editor.action.revealDefinition", "when": "inSearchEditor && !searchInputBoxFocus"}, // Open result in current editor group
  // {"key": "shift+o", "command": "...", "when": "inSearchEditor && !searchInputBoxFocus"}, // Open result to the side

  // Navigation
  {"key": "cmd+]", "command": "workbench.action.navigateForward", "when": "canNavigateForward"},
  {"key": "cmd+[", "command": "workbench.action.navigateBack", "when": "canNavigateBack"},
  {"key": "ctrl+]", "command": "editor.action.revealDefinition", "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"},
  {"key": "ctrl+[", "command": "multiCommand.addHighlightAnd.editor.action.goToReferences", "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"},
  {"key": "ctrl+cmd+]", "command": "editor.action.peekDefinition", "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"},
  {"key": "ctrl+cmd+[", "command": "multiCommand.addHighlightAnd.editor.action.referenceSearch.trigger", "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"},

  // Problems
  {"key": "cmd+m", "command": "editor.action.marker.next", "when": "true"},
  {"key": "ctrl+cmd+m", "command": "editor.action.marker.prev", "when": "true"},
  {"key": "alt+cmd+m", "command": "editor.action.marker.nextInFiles", "when": "true"},
  {"key": "ctrl+alt+cmd+m", "command": "editor.action.marker.prevInFiles", "when": "true"},
  {"key": "f8", "command": "-editor.action.marker.nextInFiles", "when": "editorFocus"},
  {"key": "alt+f8", "command": "-editor.action.marker.next", "when": "editorFocus"},
  {"key": "shift+alt+f8", "command": "-editor.action.marker.prev", "when": "editorFocus"},
  {"key": "shift+f8", "command": "-editor.action.marker.prevInFiles", "when": "editorFocus"},

  // Debugging
  //  - Defaults, for reference
  // {"key": "f5",           "command": "workbench.action.debug.start",               "when": "debuggersAvailable && debugState == 'inactive'"},
  // {"key": "f5",           "command": "workbench.action.debug.continue",            "when": "debugState == 'stopped'"},
  // {"key": "shift+f5",     "command": "workbench.action.debug.stop",                "when": "inDebugMode && !focusedSessionIsAttach"},
  // {"key": "shift+f5",     "command": "workbench.action.debug.disconnect",          "when": "inDebugMode && focusedSessionIsAttach"},
  // {"key": "shift+cmd+f5", "command": "workbench.action.debug.restart",             "when": "inDebugMode"},
  // {"key": "ctrl+f5",      "command": "workbench.action.debug.run",                 "when": "debuggersAvailable && debugState != 'initializing'"},
  // {"key": "f6",           "command": "workbench.action.debug.pause",               "when": "debugState == 'running'"},
  // {"key": "f9",           "command": "editor.debug.action.toggleBreakpoint",       "when": "debuggersAvailable && disassemblyViewFocus || debuggersAvailable && editorTextFocus"},
  // {"key": "shift+f9",     "command": "editor.debug.action.toggleInlineBreakpoint", "when": "editorTextFocus"},
  // {"key": "f10",          "command": "workbench.action.debug.stepOver",            "when": "debugState == 'stopped'"},
  // {"key": "f11",          "command": "workbench.action.debug.stepInto",            "when": "debugState != 'inactive'"},
  // {"key": "cmd+f11",      "command": "workbench.action.debug.stepIntoTarget",      "when": "inDebugMode && stepIntoTargetsSupported && debugState == 'stopped'"},
  // {"key": "shift+f11",    "command": "workbench.action.debug.stepOut",             "when": "debugState == 'stopped'"},

  // Git
  //  - Duplicated in:
  //    - keybindings.json -> Git
  //    - settings.json -> vim.normalModeKeyBindingsNonRecursive
  //    - settings.json -> vim.visualModeKeyBindingsNonRecursive
  //  - These keys are for when not in vim in an editor view (e.g. sidebar panel, Settings editor)
  //  - Don't make any "g *" keys here _with editorFocus_, else vim.normalModeKeyBindings will stop receiving "g *" keys
  //    - e.g. {"key": "g s", "command": "workbench.view.scm", "when": "!inputFocus || editorFocus && vim.mode =~ /^(Normal|Visual.*)$/"},
  //    - [Or maybe it is possible? https://github.com/VSCodeVim/Vim#remapping-more-complex-key-combinations]
  //  - Wishlist
  //    - A command for Stage/Unstage File in the gs list view
  //      - https://github.com/microsoft/vscode/issues/194214 In Source Control view, add commands/keybindings for "Stage File" / "Unstage File"
  //      - https://github.com/microsoft/vscode/issues/24916 SCM: Support keyboard shortcuts
  //    - A command for Stage/Unstage Current Hunk in Diff Editor view
  //      - https://github.com/microsoft/vscode/issues/26067 SCM: Add "stage ranges" action/button to diff view
  //    - A command for Open Staged Changes from an editor, like the existing Open Changes (gd)
  //      - [TODO Open issue]
  //  - Views
  // {"key": "g s", "command": "workbench.view.scm", "when": "!inputFocus"}, // Use shift+cmd+3
  // {"key": "g l", "command": "gitlens.showCommitsView", "when": "!inputFocus"},
  {"key": "g l", "command": "gitlens.showGraph", "when": "!inputFocus"},
  {"key": "g b", "command": "gitlens.showBranchesView", "when": "!inputFocus"},
  {"key": "g t", "command": "gitlens.showTagsView", "when": "!inputFocus"},
  {"key": "g r", "command": "gitlens.showRemotesView", "when": "!inputFocus"},
  //  - Diff editor
  {"key": "ctrl+n", "command": "workbench.action.compareEditor.nextChange", "when": "textCompareEditorActive"},
  {"key": "ctrl+p", "command": "workbench.action.compareEditor.previousChange", "when": "textCompareEditorActive"},
  //  - Commands
  {"key": "g shift+a", "command": "git.stageAll", "when": "sideBarFocus && activeViewlet == 'workbench.view.scm'"},
  {"key": "g shift+u", "command": "git.unstageAll", "when": "sideBarFocus && activeViewlet == 'workbench.view.scm'"},
  // {"key": "g c", "command": "git.commitStaged", "when": "sideBarFocus && activeViewlet == 'workbench.view.scm'"}, // No, conflicts with gco
  // {"key": "g shift+c", "command": "git.commitStagedAmend", "when": "sideBarFocus && activeViewlet == 'workbench.view.scm'"}, // Want?
  {"key": "g c o", "command": "git.checkout", "when": "!inputFocus"},
  //  - Oops, these override compareEditor.nextChange/previousChange above
  //    - For merge conflicts, can we instead use next/previous problem (cmd+m/shift+cmd+m)?
  // {"key": "ctrl+n", "command": "merge-conflict.next", "when": "editorTextFocus"},
  // {"key": "ctrl+p", "command": "merge-conflict.previous", "when": "editorTextFocus"},

  // magit
  //  - https://github.com/kahole/edamagit
  //  - https://github.com/kahole/edamagit/blob/develop/TUTORIAL.md
  //  - https://github.com/kahole/edamagit/blob/develop/package.json#L392
  //  - https://magit.vc/manual/magit/
  {"key": "g m",           "command": "jdanbrown.workbench.action.quickOpen.magit", "when": "!inputFocus"},
  {"key": "g shift+m",     "command": "magit.file-popup",               "when": "!inputFocus"},
  {"key": "g s",           "command": "magit.status",                   "when": "!inputFocus"},
  {"key": "q",             "command": "magit.quit",                     "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "o",             "command": "magit.toggle-fold",              "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "ctrl+o",        "command": "magit.toggle-fold",              "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+o",       "command": "magit.toggle-all-folds-for-change-views", "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "r",             "command": "magit.refresh",                  "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {
    "key": "ctrl+w", "command": "vim.remap", "args": {"after": [
      "g", "Z", "Q", // magit.move-to-unstaged-changes (see settings.json)
      // "z", "t",
    ]},
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/",
  },
  {
    "key": "ctrl+s", "command": "vim.remap", "args": {"after": [
      // "g", "Z", "Q", // NOTE Jump to Unstaged Changes first, so that if there are no Staged Changes then the zt at least puts us somewhere familiar
      "g", "Z", "W", // magit.move-to-staged-changes
      // "z", "t",
    ]},
    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/",
  },
  {"key": "ctrl+n",        "command": "magit.move-next-change",         "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "ctrl+p",        "command": "magit.move-previous-change",     "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "ctrl+j",        "command": "magit.move-next-hunk",           "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "ctrl+k",        "command": "magit.move-previous-hunk",       "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  //  - NOTE These steal from multi-key keybindings like gZ* (and idk how to fix)
  //    - https://github.com/VSCodeVim/Vim#vim-modes
  {"key": "a",             "command": "multiCommand.magit.stage",            "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+a",       "command": "multiCommand.magit.stage-all",        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "u",             "command": "multiCommand.magit.unstage",          "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+u",       "command": "multiCommand.magit.unstage-all",      "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "d",             "command": "multiCommand.magit.discard-at-point", "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "c",             "command": "magit.commit",                        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "enter",         "command": "magit.visit-at-point",                "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+/",       "command": "magit.help",                          "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  //  - Defaults
  //    - Ignore dispatch, it's the same as help
  //      - https://github.com/kahole/edamagit/blob/develop/src/commands/helpCommands.ts#L9-L15
  {"key": "alt+x g",       "command": "-magit.status"},
  {"key": "alt+x ctrl+g",  "command": "-magit.dispatch"},
  {"key": "alt+x alt+g",   "command": "-magit.file-popup",              "when": "activeEditor"},
  {"key": "tab",           "command": "-magit.toggle-fold",             "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "g",             "command": "-magit.refresh",                 "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+-",       "command": "-magit.help",                    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  //    - Docs on apply, discard, reverse -- warning: destructive!
  //      - https://magit.vc/manual/magit/Applying.html
  {"key": "a",             "command": "-magit.apply-at-point",          "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "k",             "command": "-magit.discard-at-point",        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "v",             "command": "-magit.reverse-at-point",        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "c",             "command": "-magit.commit",                  "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "b",             "command": "-magit.branching",               "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "m",             "command": "-magit.merging",                 "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "r",             "command": "-magit.rebasing",                "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+x",       "command": "-magit.resetting",               "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "x",             "command": "-magit.reset-mixed",             "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "ctrl+u x",      "command": "-magit.reset-hard",              "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+m",       "command": "-magit.remoting",                "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "l",             "command": "-magit.logging",                 "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "y",             "command": "-magit.show-refs",               "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress|Visual).*$/"},
  {"key": "d",             "command": "-magit.diffing",                 "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "t",             "command": "-magit.tagging",                 "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+a",       "command": "-magit.cherry-picking",          "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+v",       "command": "-magit.reverting",               "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "i",             "command": "-magit.ignoring",                "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+i",       "command": "-magit.ignoring",                "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+1",       "command": "-magit.running",                 "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+5",       "command": "-magit.worktree",                "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+p",       "command": "-magit.pushing",                 "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+f",       "command": "-magit.pulling",                 "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "z",             "command": "-magit.stashing",                "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "o",             "command": "-magit.submodules",              "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "f",             "command": "-magit.fetching",                "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "s",             "command": "-magit.stage",                   "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+s",       "command": "-magit.stage-all",               "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "u",             "command": "-magit.unstage",                 "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+u",       "command": "-magit.unstage-all",             "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "shift+4",       "command": "-magit.process-log",             "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "q",             "command": "-magit.quit",                    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "ctrl+j",        "command": "-magit.move-next-entity",        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "ctrl+k",        "command": "-magit.move-previous-entity",    "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"},
  {"key": "ctrl+c ctrl+c", "command": "-magit.save-and-close-editor",   "when": "editorTextFocus && editorLangId == 'git-commit'"},
  {"key": "ctrl+c ctrl+k", "command": "-magit.clear-and-abort-editor",  "when": "editorTextFocus && editorLangId == 'git-commit'"},
  {"key": "ctrl+c ctrl+c", "command": "-magit.save-and-close-editor",   "when": "editorTextFocus && editorLangId == 'git-rebase'"},
  {"key": "ctrl+c ctrl+k", "command": "-magit.clear-and-abort-editor",  "when": "editorTextFocus && editorLangId == 'git-rebase'"},
  // {"key": "...",           "command": "-magit.blame-file",              "when": "false"},
  // {"key": "...",           "command": "-magit.copy-buffer-revision",    "when": "false"},
  // {"key": "...",           "command": "-magit.copy-section-value",      "when": "false"},
  // {"key": "...",           "command": "-magit.diff-file",               "when": "false"},
  // {"key": "...",           "command": "-magit.log-file",                "when": "false"},
  // {"key": "...",           "command": "-magit.stage-file",              "when": "false"},
  // {"key": "...",           "command": "-magit.unstage-file",            "when": "false"},

  // Project Manager
  {"key": "ctrl+cmd+p", "command": "projectManager.listProjectsNewWindow"},
  {"key": "alt+cmd+p", "command": "-projectManager.listProjects"}, // Remove to avoid confusion (this cmd blats over current workspace)

  // Emoji/unicode
  //  - https://github.com/brunnerh/insert-unicode
  //    - For pickers (cmd+i/shift+cmd+i)
  //  - https://github.com/mattbierner/vscode-emojisense
  //    - For autocomplete (:thumbsup: -> 👍)
  {"key": "cmd+i", "command": "insert-unicode.insertEmojiText", "when": "editorTextFocus && vim.mode == 'Insert'"},
  {"key": "shift+cmd+i", "command": "insert-unicode.insertText", "when": "editorTextFocus && vim.mode == 'Insert'"},
  {"key": "cmd+i", "command": "-editor.action.triggerSuggest", "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"},
  {"key": "cmd+i", "command": "-toggleSuggestionDetails", "when": "suggestWidgetHasFocusedSuggestion && suggestWidgetVisible && textInputFocus"},
  {"key": "cmd+i", "command": "-markdown.extension.editing.toggleItalic", "when": "editorTextFocus && !editorReadonly && editorLangId =~ /^markdown$|^rmd$|^quarto$/"},
  {"key": "cmd+i", "command": "-emojisense.quickEmoji", "when": "editorTextFocus"},
  {"key": "cmd+i", "command": "-emojisense.quickEmojiTerminal", "when": "terminalFocus"},
  {"key": "shift+cmd+i", "command": "-emojisense.quickEmojitext", "when": "editorTextFocus"},
  {"key": "shift+cmd+i", "command": "-emojisense.quickEmojitextTerminal", "when": "terminalFocus"},

  // Terminal
  {"key": "cmd+t", "command": "workbench.action.createTerminalEditor", "when": "terminalProcessSupported"},
  {"key": "cmd+t", "command": "-workbench.action.showAllSymbols"},
  {"key": "ctrl+a ctrl+enter", "command": "jdanbrown.terminal.rerunCommandInRecentTerminal", "when": "editorFocus"},
  //  - Recall recent cmds/dirs
  {"key": "cmd+r", "command": "workbench.action.terminal.runRecentCommand", "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"},
  //    - Disable cmd+g for Go To Dir (conflicts with Find Next)
  {"key": "shift+cmd+c", "command": "workbench.action.terminal.goToRecentDirectory", "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"},
  {"key": "cmd+g", "command": "-workbench.action.terminal.goToRecentDirectory", "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"},
  //  - Scroll/select with keyboard
  //    - TODO(practice)
  {"key": "cmd+u", "command": "jdanbrown.terminal.scrollUpHalfPage", "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"},
  {"key": "cmd+d", "command": "jdanbrown.terminal.scrollDownHalfPage", "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"},
  {"key": "cmd+y", "command": "workbench.action.terminal.scrollUp", "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"},
  {"key": "cmd+e", "command": "workbench.action.terminal.scrollDown", "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"},
  {"key": "shift+cmd+y", "command": "workbench.action.terminal.selectToPreviousLine", "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"},
  {"key": "shift+cmd+e", "command": "workbench.action.terminal.selectToNextLine", "when": "terminalFocusInAny && terminalHasBeenCreated && !terminalAltBufferActive || terminalFocusInAny && terminalProcessSupported && !terminalAltBufferActive"},
  // {"key": "shift+cmd+up", "command": "workbench.action.terminal.selectToPreviousCommand", "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"}, // Default
  // {"key": "shift+cmd+down", "command": "workbench.action.terminal.selectToNextCommand", "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"}, // Default
  //  - Hacky replacement for tmux ^K with normal vscode terminals
  //    - https://github.com/microsoft/vscode/issues/181390
  //    - https://code.visualstudio.com/docs/editor/accessibility#_terminal-accessibility -> focusAccessibleBuffer
  //    - This is pretty cool -- turns the whole terminal into a normal editor buffer, for easy copy/paste
  //    - Like tmux ^K but actually maybe better? (assuming it works on big scrollbacks!)
  //    - NOTE Had to remove accessibilityModeEnabled from the `when`, because enabling editor.accessibilitySupport would probably affect a lot of things
  {"key": "ctrl+k", "command": "workbench.action.terminal.focusAccessibleBuffer", "when": "terminalFocus && terminalHasBeenCreated && terminalTabFocusMode || terminalFocus && terminalHasBeenCreated && !terminalAccessibleBufferFocus || terminalFocus && terminalProcessSupported && terminalTabFocusMode || terminalFocus && terminalProcessSupported && !terminalAccessibleBufferFocus"},
  // Open detected links
  //  - TODO(practice)
  {"key": "shift+cmd+.", "command": "workbench.action.terminal.openDetectedLink", "when": "terminalAccessibleBufferFocus && terminalHasBeenCreated || terminalFocus && terminalHasBeenCreated"},
  {"key": "shift+cmd+o", "command": "-workbench.action.terminal.openDetectedLink", "when": "terminalAccessibleBufferFocus && terminalHasBeenCreated || terminalFocus && terminalHasBeenCreated"}, // Default

  // Notebooks
  {"key": "cmd+[", "command": "-editor.action.outdentLines", "when": "editorTextFocus && !editorReadonly"},
  {"key": "cmd+]", "command": "-editor.action.indentLines", "when": "editorTextFocus && !editorReadonly"},
  {"key": "shift+cmd+]", "command": "-workbench.action.nextEditor"},
  {"key": "shift+cmd+[", "command": "-workbench.action.previousEditor"},
  {"key": ", ,", "command": "workbench.action.files.save", "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"},
  {"key": "escape", "command": "notebook.cell.quitEdit", "when": "notebookEditorFocused && vim.active && !inDebugRepl && vim.mode == 'Normal'"},
  {"key": "shift+escape", "command": "notebook.cell.quitEdit", "when": "notebookEditorFocused && vim.active && !inDebugRepl"},
  {"key": "i", "command": "notebook.cell.edit", "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"},
  {"key": "shift+i", "command": "multiCommand.notebook.cell.edit.InsertMode", "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"},
  {"key": "cmd+]", "command": "notebook.focusNextEditor", "when": "notebookEditorFocused && inputFocus"},
  {"key": "cmd+[", "command": "notebook.focusPreviousEditor", "when": "notebookEditorFocused && inputFocus"},
  {"key": "cmd+]", "command": "list.focusDown", "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"},
  {"key": "cmd+[", "command": "list.focusUp", "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"},
  {"key": "u", "command": "undo", "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"},
  {"key": "z", "command": "-undo", "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"},
  {"key": "z z", "command": "notebook.centerActiveCell", "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"},
  {"key": "z z", "command": "notebook.centerActiveCell", "when": "notebookEditorFocused && vim.active && !inDebugRepl && vim.mode == 'Normal'"},
  //  - Disable j/k movements at cell boundaries, more often confusing than helpful
  //    - Ref: notebookEditorCursorAtBoundary = 'none' | 'top' | 'bottom' | 'both'
  //    - https://github.com/microsoft/vscode/blob/f25f1abf/src/vs/workbench/contrib/notebook/common/notebookCommon.ts#L687-L688
  {"key": "j", "command": "-notebook.focusNextEditor", "when": "editorTextFocus && inputFocus && notebookEditorFocused && vim.mode == 'Normal' && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"},
  {"key": "k", "command": "-notebook.focusPreviousEditor", "when": "editorTextFocus && inputFocus && notebookEditorFocused && vim.mode == 'Normal' && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"},
  //  - Move cells up/down
  {"key": "ctrl+cmd+j", "command": "notebook.cell.moveDown", "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"},
  {"key": "ctrl+cmd+k", "command": "notebook.cell.moveUp", "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"},
  //  - Folding
  {"key": "h", "command": "notebook.fold", "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"},
  {"key": "l", "command": "notebook.unfold", "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"},
  //  - Scrolling
  {"key": "ctrl+e", "command": "list.scrollDown", "when": "notebookEditorFocused && inputFocus"},
  {"key": "ctrl+y", "command": "list.scrollUp", "when": "notebookEditorFocused && inputFocus"},
  {"key": "ctrl+d", "command": "multiCommand.list.scrollPageDown", "when": "notebookEditorFocused && listFocus && inputFocus"},
  {"key": "ctrl+u", "command": "multiCommand.list.scrollPageUp", "when": "notebookEditorFocused && listFocus && inputFocus"},
  //  - Kernel management
  //    - TODO YOU ARE HERE (these maybe all work now? try and see)
  {"key": "ctrl+cmd+k", "command": "jupyter.switchKernel", "when": "notebookEditorFocused"},
  {"key": "ctrl+c", "command": "jupyter.notebookeditor.interruptkernel", "when": "notebookEditorFocused"},
  {"key": "0 0", "command": "jupyter.notebookeditor.restartkernel", "when": "notebookEditorFocused && !inputFocus && !notebookOutputInputFocused"},
  //  - TODO Needs update: Add missing when clauses + update to latest notebook commands
  // {"key": "cmd+]", "command": "jupyter.gotoNextCellInFile", "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"},
  // {"key": "ctrl+alt+]", "command": "-jupyter.gotoNextCellInFile", "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"},
  // {"key": "cmd+[", "command": "jupyter.gotoPrevCellInFile", "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"},
  // {"key": "ctrl+alt+[", "command": "-jupyter.gotoPrevCellInFile", "when": "editorTextFocus && jupyter.hascodecells && !notebookEditorFocused"},
  // {"key": "ctrl+cmd+r", "command": "jupyter.notebookeditor.runallcells"},
  // {"key": "ctrl+cmd+r", "command": "jupyter.runallcells"},
  // {"key": "cmd+enter", "command": "jupyter.runcell"},
  // {"key": "ctrl+cmd+a", "command": "jupyter.runallcellsabove.palette"},
  // {"key": "ctrl+cmd+b", "command": "jupyter.runcurrentcellandallbelow.palette"},
  // {"key": "cmd+enter", "command": "jupyter.runcurrentcell", "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"},
  // {"key": "ctrl+enter", "command": "-jupyter.runcurrentcell", "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"},
  // {"key": "shift+cmd+enter", "command": "jupyter.runcurrentcelladvance", "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"},
  // {"key": "shift+enter", "command": "-jupyter.runcurrentcelladvance", "when": "editorTextFocus && jupyter.hascodecells && !editorHasSelection && !notebookEditorFocused"},
  // {"key": "cmd+enter", "command": "jupyter.notebookeditor.runselectedcell"},

  // Markdown
  {"key": "cmd+enter", "command": "markdown-checkbox.markCheckbox", "when": "!notebookEditorFocused && editorLangId == 'markdown'"},
  {"key": "shift+cmd+enter", "command": "markdown-checkbox.markCheckbox", "when": "!notebookEditorFocused && editorLangId == 'markdown'"},
  {"key": "shift+cmd+enter", "command": "-markdown-checkbox.markCheckbox", "when": "editorTextFocus"},
  {"key": "shift+cmd+c", "command": "-markdown-checkbox.createCheckbox", "when": "editorTextFocus"},
  {"key": "shift+cmd+v", "command": "markdown.showPreviewToSide", "when": "!notebookEditorFocused && editorLangId == 'markdown'"},
  {"key": "shift+cmd+v", "command": "-markdown.showPreview", "when": "!notebookEditorFocused && editorLangId == 'markdown'"},

  // TODO Organize
  {"key": "cmd+b", "command": "-workbench.action.toggleSidebarVisibility"},
  {"key": "cmd+0", "command": "workbench.action.zoomReset"},
  {"key": "cmd+numpad0", "command": "-workbench.action.zoomReset"},
  {"key": "m", "command": "renameFile", "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"},
  {"key": "enter", "command": "-renameFile", "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"},
  {"key": "enter", "command": "explorer.openAndPassFocus", "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"},
  {"key": "cmd+down", "command": "-explorer.openAndPassFocus", "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"},
  {"key": "l", "command": "breadcrumbs.focusNextWithPicker", "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"},
  {"key": "h", "command": "breadcrumbs.focusPreviousWithPicker", "when": "breadcrumbsActive && breadcrumbsVisible && listFocus && !inputFocus"},
  {"key": "shift+cmd+;", "command": "-breadcrumbs.focus", "when": "breadcrumbsPossible"},
  {"key": "shift+cmd+o", "command": "-workbench.action.gotoSymbol"},
  {"key": "alt+o", "command": "breadcrumbs.focusAndSelect", "when": "breadcrumbsPossible"},
  {"key": "alt+o", "command": "breadcrumbs.selectEditor", "when": "breadcrumbsActive && breadcrumbsVisible"},
  {"key": "ctrl+j", "command": "-editor.action.joinLines", "when": "editorTextFocus && !editorReadonly"},
  {"key": "n", "command": "explorer.newFile", "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"},

]
